/* tslint:disable */
/* eslint-disable */
/**
 * ES 物件API
 * （株）いい生活 が提供予定の 物件情報API のインターフェイス仕様書  いい物件Oneに登録した賃貸物件情報を参照する物件参照API仕様について定める。  ※1: 開発中のため、実際のリリース時の仕様は異なる場合がございます。  ※2: 売買物件に関する仕様に関してはα版であり、今後大きな仕様の見直しを行う可能性がございます。  ## リソース仕様  ### 通信仕様  HTTP/2 および HTTP/1.1 をサポートする。通信はTLSで暗号化されたHTTPSのみを許可する。  ### リクエストヘッダ  リクエストヘッダには以下の指定を必須とする。  | No. | リクエストヘッダのフィールド名 | 指定値 | |:---:|:-------------------------------|:-------| | 1 | Accept | application/json | | 2 | X-Api-Key | 弊社が指定するキー。ご利用のお客様を特定するためのもの。 |  Acceptヘッダには、常にapplication/json を指定する。 これにより、レスポンスがJSONであることを指示する。  ### データフォーマットと文字コード  データフォーマットはJSON、文字コードはUTF-8とする。  ### データ型  通常のJSONの型以外に擬似型としていくつかのデータ型を用意している。 これは、JSON標準では表現しきれないデータや、不動産特有のデータを扱うために定義したもので使用する。 また、ここに記載の無いデータ型については、 OpenAPI Specification (Version 3.0.2) の DataTypes に準拠する。  * [DataTypes](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#data-types)   | No. | 型 | 説明 | |:---:|:---|:-----| | 1 | string | JSON標準の文字列 | | 2 | int | JSON標準の整数 | | 3 | float | JSON標準の浮動小数点数 | | 4 | bool | JSON標準の真偽値 | | 5 | datetime | ISO8611フォーマットの日付時刻を表す文字列。YYYY-MM-DDTHH:MM:SS。 <br> 例: 2015-08-26T19:16:03 = 2015年8月26日19時16分03秒 | | 6 | date | ISO8611フォーマットの日付を表す文字列。YYYY-MM-DD。 <br> 例: 2015-08-26 = 2015年8月26日 | | 7 | datejun | 後述 |  #### datejun型  いい生活独自の日付と旬を表すフォーマット。YYYYMMJDD。  * YYYY: 西暦年 * MM: 月。01～12。ただし00とすることにより、年単位までの精度の数字を表現可能。 * J: 旬。1=上旬、2=中旬、3=下旬。 0とすることで月単位までの精度の数字を表現可能。 * DD: 日。01～31。ただし00とすることにより、旬単位までの精度の数字を表現可能。日単位の精度の場合、1～10日までは旬を1、11～20日までは旬を2、21日以降は旬を3と指定する必要がある。 * 例:     * 201900000 = 2019年     * 201901000 = 2019年1月     * 201903100 = 2019年3月上旬     * 201912300 = 2019年12月下旬     * 201906105 = 2019年6月5日     * 201908216 = 2019年8月16日  ## 検索パラメータ  ### OR 検索  パラメータタイプが `array` のキーについては、クエリパラメータで複数指定を行った場合、 指定された値のいずれかに一致する対象を検索する（ OR 検索）。  ex) `?layout_type_code=1&layout_type_code=2`  ### ソート順  `*.order` という名前のパラメータでソート順を指定可能。ascを指定したとき昇順、descを指定したとき降順となる。  ex) `?price.order=desc`  基本的にソート順は一つだけ指定する。
 *
 * The version of the OpenAPI document: 6.1.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  Agent,
  AgentFromJSON,
  AgentToJSON,
  AgentList,
  AgentListFromJSON,
  AgentListToJSON,
  HTTPValidationError,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  Staff,
  StaffFromJSON,
  StaffToJSON,
} from '../models';

export interface GetAgentByCustomerKeyRequest {
  agentIdentifier: string;
}

export interface GetStaffRequest {
  staffGuid: string;
}

export interface ListAgentRequest {
  customerKey?: Array<number>;
  startIndex?: number;
  itemsPerPage?: number;
}

/**
 * no description
 */
export class AgentQueryAPIApi extends runtime.BaseAPI {
  /**
   * customer_key または agent_guidで問い合わせ先情報を取得する agent_guidは非推奨
   * Get Agent By Customer Key
   */
  async getAgentByCustomerKeyRaw(
    requestParameters: GetAgentByCustomerKeyRequest
  ): Promise<runtime.ApiResponse<Agent>> {
    if (
      requestParameters.agentIdentifier === null ||
      requestParameters.agentIdentifier === undefined
    ) {
      throw new runtime.RequiredError(
        'agentIdentifier',
        'Required parameter requestParameters.agentIdentifier was null or undefined when calling getAgentByCustomerKey.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Api-Key'] = this.configuration.apiKey('X-Api-Key'); // APIKeyHeader authentication
    }

    const response = await this.request({
      path: `/agent/agent/{agent_identifier}/`.replace(
        `{${'agent_identifier'}}`,
        encodeURIComponent(String(requestParameters.agentIdentifier))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AgentFromJSON(jsonValue)
    );
  }

  /**
   * customer_key または agent_guidで問い合わせ先情報を取得する agent_guidは非推奨
   * Get Agent By Customer Key
   */
  async getAgentByCustomerKey(
    requestParameters: GetAgentByCustomerKeyRequest
  ): Promise<Agent> {
    const response = await this.getAgentByCustomerKeyRaw(requestParameters);
    return await response.value();
  }

  /**
   * staff_guidでスタッフ情報を取得する
   * Get Staff
   */
  async getStaffRaw(
    requestParameters: GetStaffRequest
  ): Promise<runtime.ApiResponse<Staff>> {
    if (
      requestParameters.staffGuid === null ||
      requestParameters.staffGuid === undefined
    ) {
      throw new runtime.RequiredError(
        'staffGuid',
        'Required parameter requestParameters.staffGuid was null or undefined when calling getStaff.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Api-Key'] = this.configuration.apiKey('X-Api-Key'); // APIKeyHeader authentication
    }

    const response = await this.request({
      path: `/agent/staff/{staff_guid}/`.replace(
        `{${'staff_guid'}}`,
        encodeURIComponent(String(requestParameters.staffGuid))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StaffFromJSON(jsonValue)
    );
  }

  /**
   * staff_guidでスタッフ情報を取得する
   * Get Staff
   */
  async getStaff(requestParameters: GetStaffRequest): Promise<Staff> {
    const response = await this.getStaffRaw(requestParameters);
    return await response.value();
  }

  /**
   * API_KEYに紐づくカスタマーキーと一致する問い合わせ先組織情報一覧を取得する  クエリで customer_key を指定すれば対象を絞り込める
   * List Agent
   */
  async listAgentRaw(
    requestParameters: ListAgentRequest
  ): Promise<runtime.ApiResponse<AgentList>> {
    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.customerKey) {
      queryParameters['customer_key'] = requestParameters.customerKey;
    }

    if (requestParameters.startIndex !== undefined) {
      queryParameters['start_index'] = requestParameters.startIndex;
    }

    if (requestParameters.itemsPerPage !== undefined) {
      queryParameters['items_per_page'] = requestParameters.itemsPerPage;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Api-Key'] = this.configuration.apiKey('X-Api-Key'); // APIKeyHeader authentication
    }

    const response = await this.request({
      path: `/agent/agent/list/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AgentListFromJSON(jsonValue)
    );
  }

  /**
   * API_KEYに紐づくカスタマーキーと一致する問い合わせ先組織情報一覧を取得する  クエリで customer_key を指定すれば対象を絞り込める
   * List Agent
   */
  async listAgent(requestParameters: ListAgentRequest): Promise<AgentList> {
    const response = await this.listAgentRaw(requestParameters);
    return await response.value();
  }
}
