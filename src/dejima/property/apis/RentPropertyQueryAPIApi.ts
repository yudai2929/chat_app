/* tslint:disable */
/* eslint-disable */
/**
 * ES 物件API
 * （株）いい生活 が提供予定の 物件情報API のインターフェイス仕様書  いい物件Oneに登録した賃貸物件情報を参照する物件参照API仕様について定める。  ※1: 開発中のため、実際のリリース時の仕様は異なる場合がございます。  ※2: 売買物件に関する仕様に関してはα版であり、今後大きな仕様の見直しを行う可能性がございます。  ## リソース仕様  ### 通信仕様  HTTP/2 および HTTP/1.1 をサポートする。通信はTLSで暗号化されたHTTPSのみを許可する。  ### リクエストヘッダ  リクエストヘッダには以下の指定を必須とする。  | No. | リクエストヘッダのフィールド名 | 指定値 | |:---:|:-------------------------------|:-------| | 1 | Accept | application/json | | 2 | X-Api-Key | 弊社が指定するキー。ご利用のお客様を特定するためのもの。 |  Acceptヘッダには、常にapplication/json を指定する。 これにより、レスポンスがJSONであることを指示する。  ### データフォーマットと文字コード  データフォーマットはJSON、文字コードはUTF-8とする。  ### データ型  通常のJSONの型以外に擬似型としていくつかのデータ型を用意している。 これは、JSON標準では表現しきれないデータや、不動産特有のデータを扱うために定義したもので使用する。 また、ここに記載の無いデータ型については、 OpenAPI Specification (Version 3.0.2) の DataTypes に準拠する。  * [DataTypes](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#data-types)   | No. | 型 | 説明 | |:---:|:---|:-----| | 1 | string | JSON標準の文字列 | | 2 | int | JSON標準の整数 | | 3 | float | JSON標準の浮動小数点数 | | 4 | bool | JSON標準の真偽値 | | 5 | datetime | ISO8611フォーマットの日付時刻を表す文字列。YYYY-MM-DDTHH:MM:SS。 <br> 例: 2015-08-26T19:16:03 = 2015年8月26日19時16分03秒 | | 6 | date | ISO8611フォーマットの日付を表す文字列。YYYY-MM-DD。 <br> 例: 2015-08-26 = 2015年8月26日 | | 7 | datejun | 後述 |  #### datejun型  いい生活独自の日付と旬を表すフォーマット。YYYYMMJDD。  * YYYY: 西暦年 * MM: 月。01～12。ただし00とすることにより、年単位までの精度の数字を表現可能。 * J: 旬。1=上旬、2=中旬、3=下旬。 0とすることで月単位までの精度の数字を表現可能。 * DD: 日。01～31。ただし00とすることにより、旬単位までの精度の数字を表現可能。日単位の精度の場合、1～10日までは旬を1、11～20日までは旬を2、21日以降は旬を3と指定する必要がある。 * 例:     * 201900000 = 2019年     * 201901000 = 2019年1月     * 201903100 = 2019年3月上旬     * 201912300 = 2019年12月下旬     * 201906105 = 2019年6月5日     * 201908216 = 2019年8月16日  ## 検索パラメータ  ### OR 検索  パラメータタイプが `array` のキーについては、クエリパラメータで複数指定を行った場合、 指定された値のいずれかに一致する対象を検索する（ OR 検索）。  ex) `?layout_type_code=1&layout_type_code=2`  ### ソート順  `*.order` という名前のパラメータでソート順を指定可能。ascを指定したとき昇順、descを指定したとき降順となる。  ex) `?price.order=desc`  基本的にソート順は一つだけ指定する。
 *
 * The version of the OpenAPI document: 6.1.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  AreaAggregateResult,
  AreaAggregateResultFromJSON,
  AreaAggregateResultToJSON,
  AreaLevel,
  AreaLevelFromJSON,
  AreaLevelToJSON,
  BuildingPropertyList,
  BuildingPropertyListFromJSON,
  BuildingPropertyListToJSON,
  HTTPValidationError,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  LineAggregateResult,
  LineAggregateResultFromJSON,
  LineAggregateResultToJSON,
  LineLevel,
  LineLevelFromJSON,
  LineLevelToJSON,
  Order,
  OrderFromJSON,
  OrderToJSON,
  PropertyList,
  PropertyListFromJSON,
  PropertyListToJSON,
  RentBaitaiCode,
  RentBaitaiCodeFromJSON,
  RentBaitaiCodeToJSON,
  RentProperty,
  RentPropertyFromJSON,
  RentPropertyToJSON,
} from '../models';

export interface AggregateRentPropertyByAreaRequest {
  level: AreaLevel;
  baitaiCode?: RentBaitaiCode;
  propertyFullKey?: Array<string>;
  propertyUseCode?: Array<number>;
  propertyTypeCode?: Array<number>;
  newUsedCode?: number;
  residenceRentPeriodCode?: number;
  layoutText?: Array<string>;
  layoutTypeCode?: Array<number>;
  isLargerThan5k?: boolean;
  layoutCode?: Array<number>;
  isNowAvailable?: boolean;
  availableCode?: Array<number>;
  rentTransactionFormCode?: Array<number>;
  studentRestrictionCode?: Array<number>;
  genderRestrictionCode?: Array<number>;
  kidsRestrictionCode?: Array<number>;
  onePersonRestrictionCode?: Array<number>;
  twoPersonsRestrictionCode?: Array<number>;
  elderRestrictionCode?: Array<number>;
  manageCostFreeCode?: Array<number>;
  serviceFeeFreeCode?: Array<number>;
  miscExpenseFreeCode?: Array<number>;
  otherInitialCostFreeFlag?: boolean;
  petRestrictionCode?: Array<number>;
  officeUsageRestrictionCode?: Array<number>;
  corporateContractRestrictionCode?: Array<number>;
  musicalInstrumentRestrictionCode?: Array<number>;
  restaurantUsageRestrictionCode?: Array<number>;
  roomSharingRestrictionCode?: Array<number>;
  foreignerRestrictionCode?: Array<number>;
  friendsRestrictionCode?: Array<number>;
  foreignStudentRestrictionCode?: Array<number>;
  parkingAvailabilityCode?: Array<number>;
  gasCode?: Array<number>;
  initialCostCode?: Array<number>;
  guarantorRequirementsCode?: Array<number>;
  hasInsurance?: boolean;
  depositForStudentCode?: Array<number>;
  itJusetsuFlag?: boolean;
  noGuarantorFlag?: boolean;
  isTokuyuchin?: boolean;
  freeRentFlag?: boolean;
  managerFlag?: boolean;
  hasMotorbikeParking?: boolean;
  hasBikeParking?: boolean;
  panoramaFlag?: boolean;
  floorPlanFlag?: boolean;
  hasExteriorImage?: boolean;
  b2bCustomFlag?: boolean;
  isFurnished?: boolean;
  hasAppliances?: boolean;
  isNetFree?: boolean;
  isOver2f?: boolean;
  isBathToiletSeparate?: boolean;
  hasAircon?: boolean;
  hasAutoLock?: boolean;
  hasDeliveryBox?: boolean;
  hasElevator?: boolean;
  hasLandryRoom?: boolean;
  isFlooring?: boolean;
  isDesignersApartment?: boolean;
  isBarrierFree?: boolean;
  isSouthFacing?: boolean;
  isHighestFloor?: boolean;
  isCornerRoom?: boolean;
  hasSystemKitchen?: boolean;
  hasIhStove?: boolean;
  hasGasStove?: boolean;
  hasMultipleGasStove?: boolean;
  hasReboilBath?: boolean;
  hasWashlet?: boolean;
  hasBathDryer?: boolean;
  hasFloorHeating?: boolean;
  hasCloset?: boolean;
  hasWalkInCloset?: boolean;
  hasCatv?: boolean;
  hasCs?: boolean;
  hasBs?: boolean;
  hasOpticalFiber?: boolean;
  isAllElectric?: boolean;
  hasVerandaBalcony?: boolean;
  isMaisonette?: boolean;
  hasLoft?: boolean;
  hasSoundproof?: boolean;
  hasCounterKitchen?: boolean;
  hasGarbageCollectionSite?: boolean;
  hasOwnYard?: boolean;
  isQuakeResistantStructure?: boolean;
  isQuakeAbsorbingStructure?: boolean;
  isDampingStructure?: boolean;
  hasTvIntercom?: boolean;
  hasSecurityCamera?: boolean;
  isInternetAvailable?: boolean;
  hasTrunkRoom?: boolean;
  isCondominium?: boolean;
  isTowerApartment?: boolean;
  isRenovated?: boolean;
  hasWashroom?: boolean;
  buildingAgeFrom?: number;
  buildingAgeTo?: number;
  priceFrom?: number;
  priceTo?: number;
  manageCostYenFrom?: number;
  manageCostYenTo?: number;
  depositYenFrom?: number;
  depositYenTo?: number;
  depositMonthFrom?: number;
  depositMonthTo?: number;
  keyMoneyYenFrom?: number;
  keyMoneyYenTo?: number;
  keyMoneyMonthFrom?: number;
  keyMoneyMonthTo?: number;
  repairCostYenFrom?: number;
  repairCostYenTo?: number;
  repairCostMonthFrom?: number;
  repairCostMonthTo?: number;
  initialCostFrom?: number;
  initialCostTo?: number;
  monthlyCostSummaryFrom?: number;
  monthlyCostSummaryTo?: number;
  advertisingFeePercentTo?: number;
  advertisingFeePercentFrom?: number;
  areaFrom?: number;
  areaTo?: number;
  exclusiveAreaFrom?: number;
  exclusiveAreaTo?: number;
  walkFromStationMinutesFrom?: number;
  walkFromStationMinutesTo?: number;
  lastUpdateDatetimeFrom?: Date;
  lastUpdateDatetimeTo?: Date;
  publishedDatetimeFrom?: Date;
  publishedDatetimeTo?: Date;
  priceUpdateDateFrom?: Date;
  priceUpdateDateTo?: Date;
  advertisingFeeUpdateDateFrom?: Date;
  advertisingFeeUpdateDateTo?: Date;
  originalPropertyCodeText?: string;
  buildingGuid?: Array<string>;
  buildingTypeCode?: Array<number>;
  structureCode?: Array<number>;
  siteAreaFrom?: number;
  siteAreaTo?: number;
  buildingName?: string;
  buildingFurigana?: string;
  tagGuid?: Array<string>;
  prefecture?: string;
  prefectureCode?: Array<number>;
  city?: Array<string>;
  cityCode?: Array<number>;
  town?: Array<string>;
  jisCode?: Array<number>;
  address?: Array<string>;
  lineCode?: Array<number>;
  stationCode?: Array<number>;
  customerKey?: Array<number>;
  ignorePublishStatus?: boolean;
  nameOrCodeText?: string;
  ignoreNameDisplay?: boolean;
  query?: string;
}

export interface AggregateRentPropertyByLineRequest {
  level: LineLevel;
  companyCode?: Array<number>;
  baitaiCode?: RentBaitaiCode;
  propertyFullKey?: Array<string>;
  propertyUseCode?: Array<number>;
  propertyTypeCode?: Array<number>;
  newUsedCode?: number;
  residenceRentPeriodCode?: number;
  layoutText?: Array<string>;
  layoutTypeCode?: Array<number>;
  isLargerThan5k?: boolean;
  layoutCode?: Array<number>;
  isNowAvailable?: boolean;
  availableCode?: Array<number>;
  rentTransactionFormCode?: Array<number>;
  studentRestrictionCode?: Array<number>;
  genderRestrictionCode?: Array<number>;
  kidsRestrictionCode?: Array<number>;
  onePersonRestrictionCode?: Array<number>;
  twoPersonsRestrictionCode?: Array<number>;
  elderRestrictionCode?: Array<number>;
  manageCostFreeCode?: Array<number>;
  serviceFeeFreeCode?: Array<number>;
  miscExpenseFreeCode?: Array<number>;
  otherInitialCostFreeFlag?: boolean;
  petRestrictionCode?: Array<number>;
  officeUsageRestrictionCode?: Array<number>;
  corporateContractRestrictionCode?: Array<number>;
  musicalInstrumentRestrictionCode?: Array<number>;
  restaurantUsageRestrictionCode?: Array<number>;
  roomSharingRestrictionCode?: Array<number>;
  foreignerRestrictionCode?: Array<number>;
  friendsRestrictionCode?: Array<number>;
  foreignStudentRestrictionCode?: Array<number>;
  parkingAvailabilityCode?: Array<number>;
  gasCode?: Array<number>;
  initialCostCode?: Array<number>;
  guarantorRequirementsCode?: Array<number>;
  hasInsurance?: boolean;
  depositForStudentCode?: Array<number>;
  itJusetsuFlag?: boolean;
  noGuarantorFlag?: boolean;
  isTokuyuchin?: boolean;
  freeRentFlag?: boolean;
  managerFlag?: boolean;
  hasMotorbikeParking?: boolean;
  hasBikeParking?: boolean;
  panoramaFlag?: boolean;
  floorPlanFlag?: boolean;
  hasExteriorImage?: boolean;
  b2bCustomFlag?: boolean;
  isFurnished?: boolean;
  hasAppliances?: boolean;
  isNetFree?: boolean;
  isOver2f?: boolean;
  isBathToiletSeparate?: boolean;
  hasAircon?: boolean;
  hasAutoLock?: boolean;
  hasDeliveryBox?: boolean;
  hasElevator?: boolean;
  hasLandryRoom?: boolean;
  isFlooring?: boolean;
  isDesignersApartment?: boolean;
  isBarrierFree?: boolean;
  isSouthFacing?: boolean;
  isHighestFloor?: boolean;
  isCornerRoom?: boolean;
  hasSystemKitchen?: boolean;
  hasIhStove?: boolean;
  hasGasStove?: boolean;
  hasMultipleGasStove?: boolean;
  hasReboilBath?: boolean;
  hasWashlet?: boolean;
  hasBathDryer?: boolean;
  hasFloorHeating?: boolean;
  hasCloset?: boolean;
  hasWalkInCloset?: boolean;
  hasCatv?: boolean;
  hasCs?: boolean;
  hasBs?: boolean;
  hasOpticalFiber?: boolean;
  isAllElectric?: boolean;
  hasVerandaBalcony?: boolean;
  isMaisonette?: boolean;
  hasLoft?: boolean;
  hasSoundproof?: boolean;
  hasCounterKitchen?: boolean;
  hasGarbageCollectionSite?: boolean;
  hasOwnYard?: boolean;
  isQuakeResistantStructure?: boolean;
  isQuakeAbsorbingStructure?: boolean;
  isDampingStructure?: boolean;
  hasTvIntercom?: boolean;
  hasSecurityCamera?: boolean;
  isInternetAvailable?: boolean;
  hasTrunkRoom?: boolean;
  isCondominium?: boolean;
  isTowerApartment?: boolean;
  isRenovated?: boolean;
  hasWashroom?: boolean;
  buildingAgeFrom?: number;
  buildingAgeTo?: number;
  priceFrom?: number;
  priceTo?: number;
  manageCostYenFrom?: number;
  manageCostYenTo?: number;
  depositYenFrom?: number;
  depositYenTo?: number;
  depositMonthFrom?: number;
  depositMonthTo?: number;
  keyMoneyYenFrom?: number;
  keyMoneyYenTo?: number;
  keyMoneyMonthFrom?: number;
  keyMoneyMonthTo?: number;
  repairCostYenFrom?: number;
  repairCostYenTo?: number;
  repairCostMonthFrom?: number;
  repairCostMonthTo?: number;
  initialCostFrom?: number;
  initialCostTo?: number;
  monthlyCostSummaryFrom?: number;
  monthlyCostSummaryTo?: number;
  advertisingFeePercentTo?: number;
  advertisingFeePercentFrom?: number;
  areaFrom?: number;
  areaTo?: number;
  exclusiveAreaFrom?: number;
  exclusiveAreaTo?: number;
  walkFromStationMinutesFrom?: number;
  walkFromStationMinutesTo?: number;
  lastUpdateDatetimeFrom?: Date;
  lastUpdateDatetimeTo?: Date;
  publishedDatetimeFrom?: Date;
  publishedDatetimeTo?: Date;
  priceUpdateDateFrom?: Date;
  priceUpdateDateTo?: Date;
  advertisingFeeUpdateDateFrom?: Date;
  advertisingFeeUpdateDateTo?: Date;
  originalPropertyCodeText?: string;
  buildingGuid?: Array<string>;
  buildingTypeCode?: Array<number>;
  structureCode?: Array<number>;
  siteAreaFrom?: number;
  siteAreaTo?: number;
  buildingName?: string;
  buildingFurigana?: string;
  tagGuid?: Array<string>;
  prefecture?: string;
  prefectureCode?: Array<number>;
  city?: Array<string>;
  cityCode?: Array<number>;
  town?: Array<string>;
  jisCode?: Array<number>;
  address?: Array<string>;
  lineCode?: Array<number>;
  stationCode?: Array<number>;
  customerKey?: Array<number>;
  ignorePublishStatus?: boolean;
  nameOrCodeText?: string;
  ignoreNameDisplay?: boolean;
  query?: string;
}

export interface ChoiceRentPropertyRequest {
  startIndex?: number;
  itemsPerPage?: number;
  baitaiCode?: RentBaitaiCode;
  propertyFullKey?: Array<string>;
  propertyUseCode?: Array<number>;
  propertyTypeCode?: Array<number>;
  newUsedCode?: number;
  residenceRentPeriodCode?: number;
  layoutText?: Array<string>;
  layoutTypeCode?: Array<number>;
  isLargerThan5k?: boolean;
  layoutCode?: Array<number>;
  isNowAvailable?: boolean;
  availableCode?: Array<number>;
  rentTransactionFormCode?: Array<number>;
  studentRestrictionCode?: Array<number>;
  genderRestrictionCode?: Array<number>;
  kidsRestrictionCode?: Array<number>;
  onePersonRestrictionCode?: Array<number>;
  twoPersonsRestrictionCode?: Array<number>;
  elderRestrictionCode?: Array<number>;
  manageCostFreeCode?: Array<number>;
  serviceFeeFreeCode?: Array<number>;
  miscExpenseFreeCode?: Array<number>;
  otherInitialCostFreeFlag?: boolean;
  petRestrictionCode?: Array<number>;
  officeUsageRestrictionCode?: Array<number>;
  corporateContractRestrictionCode?: Array<number>;
  musicalInstrumentRestrictionCode?: Array<number>;
  restaurantUsageRestrictionCode?: Array<number>;
  roomSharingRestrictionCode?: Array<number>;
  foreignerRestrictionCode?: Array<number>;
  friendsRestrictionCode?: Array<number>;
  foreignStudentRestrictionCode?: Array<number>;
  parkingAvailabilityCode?: Array<number>;
  gasCode?: Array<number>;
  initialCostCode?: Array<number>;
  guarantorRequirementsCode?: Array<number>;
  hasInsurance?: boolean;
  depositForStudentCode?: Array<number>;
  itJusetsuFlag?: boolean;
  noGuarantorFlag?: boolean;
  isTokuyuchin?: boolean;
  freeRentFlag?: boolean;
  managerFlag?: boolean;
  hasMotorbikeParking?: boolean;
  hasBikeParking?: boolean;
  panoramaFlag?: boolean;
  floorPlanFlag?: boolean;
  hasExteriorImage?: boolean;
  b2bCustomFlag?: boolean;
  isFurnished?: boolean;
  hasAppliances?: boolean;
  isNetFree?: boolean;
  isOver2f?: boolean;
  isBathToiletSeparate?: boolean;
  hasAircon?: boolean;
  hasAutoLock?: boolean;
  hasDeliveryBox?: boolean;
  hasElevator?: boolean;
  hasLandryRoom?: boolean;
  isFlooring?: boolean;
  isDesignersApartment?: boolean;
  isBarrierFree?: boolean;
  isSouthFacing?: boolean;
  isHighestFloor?: boolean;
  isCornerRoom?: boolean;
  hasSystemKitchen?: boolean;
  hasIhStove?: boolean;
  hasGasStove?: boolean;
  hasMultipleGasStove?: boolean;
  hasReboilBath?: boolean;
  hasWashlet?: boolean;
  hasBathDryer?: boolean;
  hasFloorHeating?: boolean;
  hasCloset?: boolean;
  hasWalkInCloset?: boolean;
  hasCatv?: boolean;
  hasCs?: boolean;
  hasBs?: boolean;
  hasOpticalFiber?: boolean;
  isAllElectric?: boolean;
  hasVerandaBalcony?: boolean;
  isMaisonette?: boolean;
  hasLoft?: boolean;
  hasSoundproof?: boolean;
  hasCounterKitchen?: boolean;
  hasGarbageCollectionSite?: boolean;
  hasOwnYard?: boolean;
  isQuakeResistantStructure?: boolean;
  isQuakeAbsorbingStructure?: boolean;
  isDampingStructure?: boolean;
  hasTvIntercom?: boolean;
  hasSecurityCamera?: boolean;
  isInternetAvailable?: boolean;
  hasTrunkRoom?: boolean;
  isCondominium?: boolean;
  isTowerApartment?: boolean;
  isRenovated?: boolean;
  hasWashroom?: boolean;
  buildingAgeFrom?: number;
  buildingAgeTo?: number;
  priceFrom?: number;
  priceTo?: number;
  manageCostYenFrom?: number;
  manageCostYenTo?: number;
  depositYenFrom?: number;
  depositYenTo?: number;
  depositMonthFrom?: number;
  depositMonthTo?: number;
  keyMoneyYenFrom?: number;
  keyMoneyYenTo?: number;
  keyMoneyMonthFrom?: number;
  keyMoneyMonthTo?: number;
  repairCostYenFrom?: number;
  repairCostYenTo?: number;
  repairCostMonthFrom?: number;
  repairCostMonthTo?: number;
  initialCostFrom?: number;
  initialCostTo?: number;
  monthlyCostSummaryFrom?: number;
  monthlyCostSummaryTo?: number;
  advertisingFeePercentTo?: number;
  advertisingFeePercentFrom?: number;
  areaFrom?: number;
  areaTo?: number;
  exclusiveAreaFrom?: number;
  exclusiveAreaTo?: number;
  walkFromStationMinutesFrom?: number;
  walkFromStationMinutesTo?: number;
  lastUpdateDatetimeFrom?: Date;
  lastUpdateDatetimeTo?: Date;
  publishedDatetimeFrom?: Date;
  publishedDatetimeTo?: Date;
  priceUpdateDateFrom?: Date;
  priceUpdateDateTo?: Date;
  advertisingFeeUpdateDateFrom?: Date;
  advertisingFeeUpdateDateTo?: Date;
  originalPropertyCodeText?: string;
  buildingGuid?: Array<string>;
  buildingTypeCode?: Array<number>;
  structureCode?: Array<number>;
  siteAreaFrom?: number;
  siteAreaTo?: number;
  buildingName?: string;
  buildingFurigana?: string;
  tagGuid?: Array<string>;
  prefecture?: string;
  prefectureCode?: Array<number>;
  city?: Array<string>;
  cityCode?: Array<number>;
  town?: Array<string>;
  jisCode?: Array<number>;
  address?: Array<string>;
  lineCode?: Array<number>;
  stationCode?: Array<number>;
  customerKey?: Array<number>;
  ignorePublishStatus?: boolean;
  nameOrCodeText?: string;
  ignoreNameDisplay?: boolean;
  query?: string;
  order?: string;
  propertyFullKeyOrder?: Order;
  propertyClassCodeOrder?: Order;
  propertyUseCodeOrder?: Order;
  propertyTypeCodeOrder?: Order;
  modifiedOrder?: Order;
  lastUpdateDatetimeOrder?: Order;
  layoutOrder?: Order;
  buildingAgeOrder?: Order;
  stationOrder?: Order;
  stationNameOrder?: Order;
  lineOrder?: Order;
  lineNameOrder?: Order;
  walkFromStationMinutesOrder?: Order;
  addressOrder?: Order;
  searchAreaOrder?: Order;
  exclusiveAreaOrder?: Order;
  buildingNameOrder?: Order;
  buildingFuriganaOrder?: Order;
  depositPriceOrder?: Order;
  keyMoneyPriceOrder?: Order;
  manageCostPriceOrder?: Order;
  advertisingFeePercentOrder?: Order;
  advertiseFlagOrder?: Order;
  floorNumberOrder?: Order;
  availableDateOrder?: Order;
  priceOrder?: Order;
  initialCostOrder?: Order;
  monthlyCostSummaryOrder?: Order;
}

export interface GetRentPropertyRequest {
  propertyFullKey: string;
  baitaiCode?: RentBaitaiCode;
}

export interface SearchRentPropertyByBuildingRequest {
  startIndex?: number;
  itemsPerPage?: number;
  baitaiCode?: RentBaitaiCode;
  propertyFullKey?: Array<string>;
  propertyUseCode?: Array<number>;
  propertyTypeCode?: Array<number>;
  newUsedCode?: number;
  residenceRentPeriodCode?: number;
  layoutText?: Array<string>;
  layoutTypeCode?: Array<number>;
  isLargerThan5k?: boolean;
  layoutCode?: Array<number>;
  isNowAvailable?: boolean;
  availableCode?: Array<number>;
  rentTransactionFormCode?: Array<number>;
  studentRestrictionCode?: Array<number>;
  genderRestrictionCode?: Array<number>;
  kidsRestrictionCode?: Array<number>;
  onePersonRestrictionCode?: Array<number>;
  twoPersonsRestrictionCode?: Array<number>;
  elderRestrictionCode?: Array<number>;
  manageCostFreeCode?: Array<number>;
  serviceFeeFreeCode?: Array<number>;
  miscExpenseFreeCode?: Array<number>;
  otherInitialCostFreeFlag?: boolean;
  petRestrictionCode?: Array<number>;
  officeUsageRestrictionCode?: Array<number>;
  corporateContractRestrictionCode?: Array<number>;
  musicalInstrumentRestrictionCode?: Array<number>;
  restaurantUsageRestrictionCode?: Array<number>;
  roomSharingRestrictionCode?: Array<number>;
  foreignerRestrictionCode?: Array<number>;
  friendsRestrictionCode?: Array<number>;
  foreignStudentRestrictionCode?: Array<number>;
  parkingAvailabilityCode?: Array<number>;
  gasCode?: Array<number>;
  initialCostCode?: Array<number>;
  guarantorRequirementsCode?: Array<number>;
  hasInsurance?: boolean;
  depositForStudentCode?: Array<number>;
  itJusetsuFlag?: boolean;
  noGuarantorFlag?: boolean;
  isTokuyuchin?: boolean;
  freeRentFlag?: boolean;
  managerFlag?: boolean;
  hasMotorbikeParking?: boolean;
  hasBikeParking?: boolean;
  panoramaFlag?: boolean;
  floorPlanFlag?: boolean;
  hasExteriorImage?: boolean;
  b2bCustomFlag?: boolean;
  isFurnished?: boolean;
  hasAppliances?: boolean;
  isNetFree?: boolean;
  isOver2f?: boolean;
  isBathToiletSeparate?: boolean;
  hasAircon?: boolean;
  hasAutoLock?: boolean;
  hasDeliveryBox?: boolean;
  hasElevator?: boolean;
  hasLandryRoom?: boolean;
  isFlooring?: boolean;
  isDesignersApartment?: boolean;
  isBarrierFree?: boolean;
  isSouthFacing?: boolean;
  isHighestFloor?: boolean;
  isCornerRoom?: boolean;
  hasSystemKitchen?: boolean;
  hasIhStove?: boolean;
  hasGasStove?: boolean;
  hasMultipleGasStove?: boolean;
  hasReboilBath?: boolean;
  hasWashlet?: boolean;
  hasBathDryer?: boolean;
  hasFloorHeating?: boolean;
  hasCloset?: boolean;
  hasWalkInCloset?: boolean;
  hasCatv?: boolean;
  hasCs?: boolean;
  hasBs?: boolean;
  hasOpticalFiber?: boolean;
  isAllElectric?: boolean;
  hasVerandaBalcony?: boolean;
  isMaisonette?: boolean;
  hasLoft?: boolean;
  hasSoundproof?: boolean;
  hasCounterKitchen?: boolean;
  hasGarbageCollectionSite?: boolean;
  hasOwnYard?: boolean;
  isQuakeResistantStructure?: boolean;
  isQuakeAbsorbingStructure?: boolean;
  isDampingStructure?: boolean;
  hasTvIntercom?: boolean;
  hasSecurityCamera?: boolean;
  isInternetAvailable?: boolean;
  hasTrunkRoom?: boolean;
  isCondominium?: boolean;
  isTowerApartment?: boolean;
  isRenovated?: boolean;
  hasWashroom?: boolean;
  buildingAgeFrom?: number;
  buildingAgeTo?: number;
  priceFrom?: number;
  priceTo?: number;
  manageCostYenFrom?: number;
  manageCostYenTo?: number;
  depositYenFrom?: number;
  depositYenTo?: number;
  depositMonthFrom?: number;
  depositMonthTo?: number;
  keyMoneyYenFrom?: number;
  keyMoneyYenTo?: number;
  keyMoneyMonthFrom?: number;
  keyMoneyMonthTo?: number;
  repairCostYenFrom?: number;
  repairCostYenTo?: number;
  repairCostMonthFrom?: number;
  repairCostMonthTo?: number;
  initialCostFrom?: number;
  initialCostTo?: number;
  monthlyCostSummaryFrom?: number;
  monthlyCostSummaryTo?: number;
  advertisingFeePercentTo?: number;
  advertisingFeePercentFrom?: number;
  areaFrom?: number;
  areaTo?: number;
  exclusiveAreaFrom?: number;
  exclusiveAreaTo?: number;
  walkFromStationMinutesFrom?: number;
  walkFromStationMinutesTo?: number;
  lastUpdateDatetimeFrom?: Date;
  lastUpdateDatetimeTo?: Date;
  publishedDatetimeFrom?: Date;
  publishedDatetimeTo?: Date;
  priceUpdateDateFrom?: Date;
  priceUpdateDateTo?: Date;
  advertisingFeeUpdateDateFrom?: Date;
  advertisingFeeUpdateDateTo?: Date;
  originalPropertyCodeText?: string;
  buildingGuid?: Array<string>;
  buildingTypeCode?: Array<number>;
  structureCode?: Array<number>;
  siteAreaFrom?: number;
  siteAreaTo?: number;
  buildingName?: string;
  buildingFurigana?: string;
  tagGuid?: Array<string>;
  prefecture?: string;
  prefectureCode?: Array<number>;
  city?: Array<string>;
  cityCode?: Array<number>;
  town?: Array<string>;
  jisCode?: Array<number>;
  address?: Array<string>;
  lineCode?: Array<number>;
  stationCode?: Array<number>;
  customerKey?: Array<number>;
  ignorePublishStatus?: boolean;
  nameOrCodeText?: string;
  ignoreNameDisplay?: boolean;
  query?: string;
  order?: string;
  propertyFullKeyOrder?: Order;
  propertyClassCodeOrder?: Order;
  propertyUseCodeOrder?: Order;
  propertyTypeCodeOrder?: Order;
  modifiedOrder?: Order;
  lastUpdateDatetimeOrder?: Order;
  layoutOrder?: Order;
  buildingAgeOrder?: Order;
  stationOrder?: Order;
  stationNameOrder?: Order;
  lineOrder?: Order;
  lineNameOrder?: Order;
  walkFromStationMinutesOrder?: Order;
  addressOrder?: Order;
  searchAreaOrder?: Order;
  exclusiveAreaOrder?: Order;
  buildingNameOrder?: Order;
  buildingFuriganaOrder?: Order;
  depositPriceOrder?: Order;
  keyMoneyPriceOrder?: Order;
  manageCostPriceOrder?: Order;
  advertisingFeePercentOrder?: Order;
  advertiseFlagOrder?: Order;
  floorNumberOrder?: Order;
  availableDateOrder?: Order;
  priceOrder?: Order;
  initialCostOrder?: Order;
  monthlyCostSummaryOrder?: Order;
}

export interface SearchRentPropertyByDwellingUnitRequest {
  startIndex?: number;
  itemsPerPage?: number;
  baitaiCode?: RentBaitaiCode;
  propertyFullKey?: Array<string>;
  propertyUseCode?: Array<number>;
  propertyTypeCode?: Array<number>;
  newUsedCode?: number;
  residenceRentPeriodCode?: number;
  layoutText?: Array<string>;
  layoutTypeCode?: Array<number>;
  isLargerThan5k?: boolean;
  layoutCode?: Array<number>;
  isNowAvailable?: boolean;
  availableCode?: Array<number>;
  rentTransactionFormCode?: Array<number>;
  studentRestrictionCode?: Array<number>;
  genderRestrictionCode?: Array<number>;
  kidsRestrictionCode?: Array<number>;
  onePersonRestrictionCode?: Array<number>;
  twoPersonsRestrictionCode?: Array<number>;
  elderRestrictionCode?: Array<number>;
  manageCostFreeCode?: Array<number>;
  serviceFeeFreeCode?: Array<number>;
  miscExpenseFreeCode?: Array<number>;
  otherInitialCostFreeFlag?: boolean;
  petRestrictionCode?: Array<number>;
  officeUsageRestrictionCode?: Array<number>;
  corporateContractRestrictionCode?: Array<number>;
  musicalInstrumentRestrictionCode?: Array<number>;
  restaurantUsageRestrictionCode?: Array<number>;
  roomSharingRestrictionCode?: Array<number>;
  foreignerRestrictionCode?: Array<number>;
  friendsRestrictionCode?: Array<number>;
  foreignStudentRestrictionCode?: Array<number>;
  parkingAvailabilityCode?: Array<number>;
  gasCode?: Array<number>;
  initialCostCode?: Array<number>;
  guarantorRequirementsCode?: Array<number>;
  hasInsurance?: boolean;
  depositForStudentCode?: Array<number>;
  itJusetsuFlag?: boolean;
  noGuarantorFlag?: boolean;
  isTokuyuchin?: boolean;
  freeRentFlag?: boolean;
  managerFlag?: boolean;
  hasMotorbikeParking?: boolean;
  hasBikeParking?: boolean;
  panoramaFlag?: boolean;
  floorPlanFlag?: boolean;
  hasExteriorImage?: boolean;
  b2bCustomFlag?: boolean;
  isFurnished?: boolean;
  hasAppliances?: boolean;
  isNetFree?: boolean;
  isOver2f?: boolean;
  isBathToiletSeparate?: boolean;
  hasAircon?: boolean;
  hasAutoLock?: boolean;
  hasDeliveryBox?: boolean;
  hasElevator?: boolean;
  hasLandryRoom?: boolean;
  isFlooring?: boolean;
  isDesignersApartment?: boolean;
  isBarrierFree?: boolean;
  isSouthFacing?: boolean;
  isHighestFloor?: boolean;
  isCornerRoom?: boolean;
  hasSystemKitchen?: boolean;
  hasIhStove?: boolean;
  hasGasStove?: boolean;
  hasMultipleGasStove?: boolean;
  hasReboilBath?: boolean;
  hasWashlet?: boolean;
  hasBathDryer?: boolean;
  hasFloorHeating?: boolean;
  hasCloset?: boolean;
  hasWalkInCloset?: boolean;
  hasCatv?: boolean;
  hasCs?: boolean;
  hasBs?: boolean;
  hasOpticalFiber?: boolean;
  isAllElectric?: boolean;
  hasVerandaBalcony?: boolean;
  isMaisonette?: boolean;
  hasLoft?: boolean;
  hasSoundproof?: boolean;
  hasCounterKitchen?: boolean;
  hasGarbageCollectionSite?: boolean;
  hasOwnYard?: boolean;
  isQuakeResistantStructure?: boolean;
  isQuakeAbsorbingStructure?: boolean;
  isDampingStructure?: boolean;
  hasTvIntercom?: boolean;
  hasSecurityCamera?: boolean;
  isInternetAvailable?: boolean;
  hasTrunkRoom?: boolean;
  isCondominium?: boolean;
  isTowerApartment?: boolean;
  isRenovated?: boolean;
  hasWashroom?: boolean;
  buildingAgeFrom?: number;
  buildingAgeTo?: number;
  priceFrom?: number;
  priceTo?: number;
  manageCostYenFrom?: number;
  manageCostYenTo?: number;
  depositYenFrom?: number;
  depositYenTo?: number;
  depositMonthFrom?: number;
  depositMonthTo?: number;
  keyMoneyYenFrom?: number;
  keyMoneyYenTo?: number;
  keyMoneyMonthFrom?: number;
  keyMoneyMonthTo?: number;
  repairCostYenFrom?: number;
  repairCostYenTo?: number;
  repairCostMonthFrom?: number;
  repairCostMonthTo?: number;
  initialCostFrom?: number;
  initialCostTo?: number;
  monthlyCostSummaryFrom?: number;
  monthlyCostSummaryTo?: number;
  advertisingFeePercentTo?: number;
  advertisingFeePercentFrom?: number;
  areaFrom?: number;
  areaTo?: number;
  exclusiveAreaFrom?: number;
  exclusiveAreaTo?: number;
  walkFromStationMinutesFrom?: number;
  walkFromStationMinutesTo?: number;
  lastUpdateDatetimeFrom?: Date;
  lastUpdateDatetimeTo?: Date;
  publishedDatetimeFrom?: Date;
  publishedDatetimeTo?: Date;
  priceUpdateDateFrom?: Date;
  priceUpdateDateTo?: Date;
  advertisingFeeUpdateDateFrom?: Date;
  advertisingFeeUpdateDateTo?: Date;
  originalPropertyCodeText?: string;
  buildingGuid?: Array<string>;
  buildingTypeCode?: Array<number>;
  structureCode?: Array<number>;
  siteAreaFrom?: number;
  siteAreaTo?: number;
  buildingName?: string;
  buildingFurigana?: string;
  tagGuid?: Array<string>;
  prefecture?: string;
  prefectureCode?: Array<number>;
  city?: Array<string>;
  cityCode?: Array<number>;
  town?: Array<string>;
  jisCode?: Array<number>;
  address?: Array<string>;
  lineCode?: Array<number>;
  stationCode?: Array<number>;
  customerKey?: Array<number>;
  ignorePublishStatus?: boolean;
  nameOrCodeText?: string;
  ignoreNameDisplay?: boolean;
  query?: string;
  order?: string;
  propertyFullKeyOrder?: Order;
  propertyClassCodeOrder?: Order;
  propertyUseCodeOrder?: Order;
  propertyTypeCodeOrder?: Order;
  modifiedOrder?: Order;
  lastUpdateDatetimeOrder?: Order;
  layoutOrder?: Order;
  buildingAgeOrder?: Order;
  stationOrder?: Order;
  stationNameOrder?: Order;
  lineOrder?: Order;
  lineNameOrder?: Order;
  walkFromStationMinutesOrder?: Order;
  addressOrder?: Order;
  searchAreaOrder?: Order;
  exclusiveAreaOrder?: Order;
  buildingNameOrder?: Order;
  buildingFuriganaOrder?: Order;
  depositPriceOrder?: Order;
  keyMoneyPriceOrder?: Order;
  manageCostPriceOrder?: Order;
  advertisingFeePercentOrder?: Order;
  advertiseFlagOrder?: Order;
  floorNumberOrder?: Order;
  availableDateOrder?: Order;
  priceOrder?: Order;
  initialCostOrder?: Order;
  monthlyCostSummaryOrder?: Order;
}

/**
 * no description
 */
export class RentPropertyQueryAPIApi extends runtime.BaseAPI {
  /**
   * エリア別の物件数の集計結果を取得する（賃貸）  市区郡/町村のレベル別に物件数を集計し、その結果を返す。 クエリパラメータで検索条件を付加することもできる。
   * Aggregate By Area
   */
  async aggregateRentPropertyByAreaRaw(
    requestParameters: AggregateRentPropertyByAreaRequest
  ): Promise<runtime.ApiResponse<AreaAggregateResult>> {
    if (
      requestParameters.level === null ||
      requestParameters.level === undefined
    ) {
      throw new runtime.RequiredError(
        'level',
        'Required parameter requestParameters.level was null or undefined when calling aggregateRentPropertyByArea.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.level !== undefined) {
      queryParameters['level'] = requestParameters.level;
    }

    if (requestParameters.baitaiCode !== undefined) {
      queryParameters['baitai_code'] = requestParameters.baitaiCode;
    }

    if (requestParameters.propertyFullKey) {
      queryParameters['property_full_key'] = requestParameters.propertyFullKey;
    }

    if (requestParameters.propertyUseCode) {
      queryParameters['property_use_code'] = requestParameters.propertyUseCode;
    }

    if (requestParameters.propertyTypeCode) {
      queryParameters['property_type_code'] =
        requestParameters.propertyTypeCode;
    }

    if (requestParameters.newUsedCode !== undefined) {
      queryParameters['new_used_code'] = requestParameters.newUsedCode;
    }

    if (requestParameters.residenceRentPeriodCode !== undefined) {
      queryParameters['residence_rent_period_code'] =
        requestParameters.residenceRentPeriodCode;
    }

    if (requestParameters.layoutText) {
      queryParameters['layout_text'] = requestParameters.layoutText;
    }

    if (requestParameters.layoutTypeCode) {
      queryParameters['layout_type_code'] = requestParameters.layoutTypeCode;
    }

    if (requestParameters.isLargerThan5k !== undefined) {
      queryParameters['is_larger_than_5k'] = requestParameters.isLargerThan5k;
    }

    if (requestParameters.layoutCode) {
      queryParameters['layout_code'] = requestParameters.layoutCode;
    }

    if (requestParameters.isNowAvailable !== undefined) {
      queryParameters['is_now_available'] = requestParameters.isNowAvailable;
    }

    if (requestParameters.availableCode) {
      queryParameters['available_code'] = requestParameters.availableCode;
    }

    if (requestParameters.rentTransactionFormCode) {
      queryParameters['rent_transaction_form_code'] =
        requestParameters.rentTransactionFormCode;
    }

    if (requestParameters.studentRestrictionCode) {
      queryParameters['student_restriction_code'] =
        requestParameters.studentRestrictionCode;
    }

    if (requestParameters.genderRestrictionCode) {
      queryParameters['gender_restriction_code'] =
        requestParameters.genderRestrictionCode;
    }

    if (requestParameters.kidsRestrictionCode) {
      queryParameters['kids_restriction_code'] =
        requestParameters.kidsRestrictionCode;
    }

    if (requestParameters.onePersonRestrictionCode) {
      queryParameters['one_person_restriction_code'] =
        requestParameters.onePersonRestrictionCode;
    }

    if (requestParameters.twoPersonsRestrictionCode) {
      queryParameters['two_persons_restriction_code'] =
        requestParameters.twoPersonsRestrictionCode;
    }

    if (requestParameters.elderRestrictionCode) {
      queryParameters['elder_restriction_code'] =
        requestParameters.elderRestrictionCode;
    }

    if (requestParameters.manageCostFreeCode) {
      queryParameters['manage_cost_free_code'] =
        requestParameters.manageCostFreeCode;
    }

    if (requestParameters.serviceFeeFreeCode) {
      queryParameters['service_fee_free_code'] =
        requestParameters.serviceFeeFreeCode;
    }

    if (requestParameters.miscExpenseFreeCode) {
      queryParameters['misc_expense_free_code'] =
        requestParameters.miscExpenseFreeCode;
    }

    if (requestParameters.otherInitialCostFreeFlag !== undefined) {
      queryParameters['other_initial_cost_free_flag'] =
        requestParameters.otherInitialCostFreeFlag;
    }

    if (requestParameters.petRestrictionCode) {
      queryParameters['pet_restriction_code'] =
        requestParameters.petRestrictionCode;
    }

    if (requestParameters.officeUsageRestrictionCode) {
      queryParameters['office_usage_restriction_code'] =
        requestParameters.officeUsageRestrictionCode;
    }

    if (requestParameters.corporateContractRestrictionCode) {
      queryParameters['corporate_contract_restriction_code'] =
        requestParameters.corporateContractRestrictionCode;
    }

    if (requestParameters.musicalInstrumentRestrictionCode) {
      queryParameters['musical_instrument_restriction_code'] =
        requestParameters.musicalInstrumentRestrictionCode;
    }

    if (requestParameters.restaurantUsageRestrictionCode) {
      queryParameters['restaurant_usage_restriction_code'] =
        requestParameters.restaurantUsageRestrictionCode;
    }

    if (requestParameters.roomSharingRestrictionCode) {
      queryParameters['room_sharing_restriction_code'] =
        requestParameters.roomSharingRestrictionCode;
    }

    if (requestParameters.foreignerRestrictionCode) {
      queryParameters['foreigner_restriction_code'] =
        requestParameters.foreignerRestrictionCode;
    }

    if (requestParameters.friendsRestrictionCode) {
      queryParameters['friends_restriction_code'] =
        requestParameters.friendsRestrictionCode;
    }

    if (requestParameters.foreignStudentRestrictionCode) {
      queryParameters['foreign_student_restriction_code'] =
        requestParameters.foreignStudentRestrictionCode;
    }

    if (requestParameters.parkingAvailabilityCode) {
      queryParameters['parking_availability_code'] =
        requestParameters.parkingAvailabilityCode;
    }

    if (requestParameters.gasCode) {
      queryParameters['gas_code'] = requestParameters.gasCode;
    }

    if (requestParameters.initialCostCode) {
      queryParameters['initial_cost_code'] = requestParameters.initialCostCode;
    }

    if (requestParameters.guarantorRequirementsCode) {
      queryParameters['guarantor_requirements_code'] =
        requestParameters.guarantorRequirementsCode;
    }

    if (requestParameters.hasInsurance !== undefined) {
      queryParameters['has_insurance'] = requestParameters.hasInsurance;
    }

    if (requestParameters.depositForStudentCode) {
      queryParameters['deposit_for_student_code'] =
        requestParameters.depositForStudentCode;
    }

    if (requestParameters.itJusetsuFlag !== undefined) {
      queryParameters['it_jusetsu_flag'] = requestParameters.itJusetsuFlag;
    }

    if (requestParameters.noGuarantorFlag !== undefined) {
      queryParameters['no_guarantor_flag'] = requestParameters.noGuarantorFlag;
    }

    if (requestParameters.isTokuyuchin !== undefined) {
      queryParameters['is_tokuyuchin'] = requestParameters.isTokuyuchin;
    }

    if (requestParameters.freeRentFlag !== undefined) {
      queryParameters['free_rent_flag'] = requestParameters.freeRentFlag;
    }

    if (requestParameters.managerFlag !== undefined) {
      queryParameters['manager_flag'] = requestParameters.managerFlag;
    }

    if (requestParameters.hasMotorbikeParking !== undefined) {
      queryParameters['has_motorbike_parking'] =
        requestParameters.hasMotorbikeParking;
    }

    if (requestParameters.hasBikeParking !== undefined) {
      queryParameters['has_bike_parking'] = requestParameters.hasBikeParking;
    }

    if (requestParameters.panoramaFlag !== undefined) {
      queryParameters['panorama_flag'] = requestParameters.panoramaFlag;
    }

    if (requestParameters.floorPlanFlag !== undefined) {
      queryParameters['floor_plan_flag'] = requestParameters.floorPlanFlag;
    }

    if (requestParameters.hasExteriorImage !== undefined) {
      queryParameters['has_exterior_image'] =
        requestParameters.hasExteriorImage;
    }

    if (requestParameters.b2bCustomFlag !== undefined) {
      queryParameters['b2b_custom_flag'] = requestParameters.b2bCustomFlag;
    }

    if (requestParameters.isFurnished !== undefined) {
      queryParameters['is_furnished'] = requestParameters.isFurnished;
    }

    if (requestParameters.hasAppliances !== undefined) {
      queryParameters['has_appliances'] = requestParameters.hasAppliances;
    }

    if (requestParameters.isNetFree !== undefined) {
      queryParameters['is_net_free'] = requestParameters.isNetFree;
    }

    if (requestParameters.isOver2f !== undefined) {
      queryParameters['is_over_2f'] = requestParameters.isOver2f;
    }

    if (requestParameters.isBathToiletSeparate !== undefined) {
      queryParameters['is_bath_toilet_separate'] =
        requestParameters.isBathToiletSeparate;
    }

    if (requestParameters.hasAircon !== undefined) {
      queryParameters['has_aircon'] = requestParameters.hasAircon;
    }

    if (requestParameters.hasAutoLock !== undefined) {
      queryParameters['has_auto_lock'] = requestParameters.hasAutoLock;
    }

    if (requestParameters.hasDeliveryBox !== undefined) {
      queryParameters['has_delivery_box'] = requestParameters.hasDeliveryBox;
    }

    if (requestParameters.hasElevator !== undefined) {
      queryParameters['has_elevator'] = requestParameters.hasElevator;
    }

    if (requestParameters.hasLandryRoom !== undefined) {
      queryParameters['has_landry_room'] = requestParameters.hasLandryRoom;
    }

    if (requestParameters.isFlooring !== undefined) {
      queryParameters['is_flooring'] = requestParameters.isFlooring;
    }

    if (requestParameters.isDesignersApartment !== undefined) {
      queryParameters['is_designers_apartment'] =
        requestParameters.isDesignersApartment;
    }

    if (requestParameters.isBarrierFree !== undefined) {
      queryParameters['is_barrier_free'] = requestParameters.isBarrierFree;
    }

    if (requestParameters.isSouthFacing !== undefined) {
      queryParameters['is_south_facing'] = requestParameters.isSouthFacing;
    }

    if (requestParameters.isHighestFloor !== undefined) {
      queryParameters['is_highest_floor'] = requestParameters.isHighestFloor;
    }

    if (requestParameters.isCornerRoom !== undefined) {
      queryParameters['is_corner_room'] = requestParameters.isCornerRoom;
    }

    if (requestParameters.hasSystemKitchen !== undefined) {
      queryParameters['has_system_kitchen'] =
        requestParameters.hasSystemKitchen;
    }

    if (requestParameters.hasIhStove !== undefined) {
      queryParameters['has_ih_stove'] = requestParameters.hasIhStove;
    }

    if (requestParameters.hasGasStove !== undefined) {
      queryParameters['has_gas_stove'] = requestParameters.hasGasStove;
    }

    if (requestParameters.hasMultipleGasStove !== undefined) {
      queryParameters['has_multiple_gas_stove'] =
        requestParameters.hasMultipleGasStove;
    }

    if (requestParameters.hasReboilBath !== undefined) {
      queryParameters['has_reboil_bath'] = requestParameters.hasReboilBath;
    }

    if (requestParameters.hasWashlet !== undefined) {
      queryParameters['has_washlet'] = requestParameters.hasWashlet;
    }

    if (requestParameters.hasBathDryer !== undefined) {
      queryParameters['has_bath_dryer'] = requestParameters.hasBathDryer;
    }

    if (requestParameters.hasFloorHeating !== undefined) {
      queryParameters['has_floor_heating'] = requestParameters.hasFloorHeating;
    }

    if (requestParameters.hasCloset !== undefined) {
      queryParameters['has_closet'] = requestParameters.hasCloset;
    }

    if (requestParameters.hasWalkInCloset !== undefined) {
      queryParameters['has_walk_in_closet'] = requestParameters.hasWalkInCloset;
    }

    if (requestParameters.hasCatv !== undefined) {
      queryParameters['has_catv'] = requestParameters.hasCatv;
    }

    if (requestParameters.hasCs !== undefined) {
      queryParameters['has_cs'] = requestParameters.hasCs;
    }

    if (requestParameters.hasBs !== undefined) {
      queryParameters['has_bs'] = requestParameters.hasBs;
    }

    if (requestParameters.hasOpticalFiber !== undefined) {
      queryParameters['has_optical_fiber'] = requestParameters.hasOpticalFiber;
    }

    if (requestParameters.isAllElectric !== undefined) {
      queryParameters['is_all_electric'] = requestParameters.isAllElectric;
    }

    if (requestParameters.hasVerandaBalcony !== undefined) {
      queryParameters['has_veranda_balcony'] =
        requestParameters.hasVerandaBalcony;
    }

    if (requestParameters.isMaisonette !== undefined) {
      queryParameters['is_maisonette'] = requestParameters.isMaisonette;
    }

    if (requestParameters.hasLoft !== undefined) {
      queryParameters['has_loft'] = requestParameters.hasLoft;
    }

    if (requestParameters.hasSoundproof !== undefined) {
      queryParameters['has_soundproof'] = requestParameters.hasSoundproof;
    }

    if (requestParameters.hasCounterKitchen !== undefined) {
      queryParameters['has_counter_kitchen'] =
        requestParameters.hasCounterKitchen;
    }

    if (requestParameters.hasGarbageCollectionSite !== undefined) {
      queryParameters['has_garbage_collection_site'] =
        requestParameters.hasGarbageCollectionSite;
    }

    if (requestParameters.hasOwnYard !== undefined) {
      queryParameters['has_own_yard'] = requestParameters.hasOwnYard;
    }

    if (requestParameters.isQuakeResistantStructure !== undefined) {
      queryParameters['is_quake_resistant_structure'] =
        requestParameters.isQuakeResistantStructure;
    }

    if (requestParameters.isQuakeAbsorbingStructure !== undefined) {
      queryParameters['is_quake_absorbing_structure'] =
        requestParameters.isQuakeAbsorbingStructure;
    }

    if (requestParameters.isDampingStructure !== undefined) {
      queryParameters['is_damping_structure'] =
        requestParameters.isDampingStructure;
    }

    if (requestParameters.hasTvIntercom !== undefined) {
      queryParameters['has_tv_intercom'] = requestParameters.hasTvIntercom;
    }

    if (requestParameters.hasSecurityCamera !== undefined) {
      queryParameters['has_security_camera'] =
        requestParameters.hasSecurityCamera;
    }

    if (requestParameters.isInternetAvailable !== undefined) {
      queryParameters['is_internet_available'] =
        requestParameters.isInternetAvailable;
    }

    if (requestParameters.hasTrunkRoom !== undefined) {
      queryParameters['has_trunk_room'] = requestParameters.hasTrunkRoom;
    }

    if (requestParameters.isCondominium !== undefined) {
      queryParameters['is_condominium'] = requestParameters.isCondominium;
    }

    if (requestParameters.isTowerApartment !== undefined) {
      queryParameters['is_tower_apartment'] =
        requestParameters.isTowerApartment;
    }

    if (requestParameters.isRenovated !== undefined) {
      queryParameters['is_renovated'] = requestParameters.isRenovated;
    }

    if (requestParameters.hasWashroom !== undefined) {
      queryParameters['has_washroom'] = requestParameters.hasWashroom;
    }

    if (requestParameters.buildingAgeFrom !== undefined) {
      queryParameters['building_age.from'] = requestParameters.buildingAgeFrom;
    }

    if (requestParameters.buildingAgeTo !== undefined) {
      queryParameters['building_age.to'] = requestParameters.buildingAgeTo;
    }

    if (requestParameters.priceFrom !== undefined) {
      queryParameters['price.from'] = requestParameters.priceFrom;
    }

    if (requestParameters.priceTo !== undefined) {
      queryParameters['price.to'] = requestParameters.priceTo;
    }

    if (requestParameters.manageCostYenFrom !== undefined) {
      queryParameters['manage_cost_yen.from'] =
        requestParameters.manageCostYenFrom;
    }

    if (requestParameters.manageCostYenTo !== undefined) {
      queryParameters['manage_cost_yen.to'] = requestParameters.manageCostYenTo;
    }

    if (requestParameters.depositYenFrom !== undefined) {
      queryParameters['deposit_yen.from'] = requestParameters.depositYenFrom;
    }

    if (requestParameters.depositYenTo !== undefined) {
      queryParameters['deposit_yen.to'] = requestParameters.depositYenTo;
    }

    if (requestParameters.depositMonthFrom !== undefined) {
      queryParameters['deposit_month.from'] =
        requestParameters.depositMonthFrom;
    }

    if (requestParameters.depositMonthTo !== undefined) {
      queryParameters['deposit_month.to'] = requestParameters.depositMonthTo;
    }

    if (requestParameters.keyMoneyYenFrom !== undefined) {
      queryParameters['key_money_yen.from'] = requestParameters.keyMoneyYenFrom;
    }

    if (requestParameters.keyMoneyYenTo !== undefined) {
      queryParameters['key_money_yen.to'] = requestParameters.keyMoneyYenTo;
    }

    if (requestParameters.keyMoneyMonthFrom !== undefined) {
      queryParameters['key_money_month.from'] =
        requestParameters.keyMoneyMonthFrom;
    }

    if (requestParameters.keyMoneyMonthTo !== undefined) {
      queryParameters['key_money_month.to'] = requestParameters.keyMoneyMonthTo;
    }

    if (requestParameters.repairCostYenFrom !== undefined) {
      queryParameters['repair_cost_yen.from'] =
        requestParameters.repairCostYenFrom;
    }

    if (requestParameters.repairCostYenTo !== undefined) {
      queryParameters['repair_cost_yen.to'] = requestParameters.repairCostYenTo;
    }

    if (requestParameters.repairCostMonthFrom !== undefined) {
      queryParameters['repair_cost_month.from'] =
        requestParameters.repairCostMonthFrom;
    }

    if (requestParameters.repairCostMonthTo !== undefined) {
      queryParameters['repair_cost_month.to'] =
        requestParameters.repairCostMonthTo;
    }

    if (requestParameters.initialCostFrom !== undefined) {
      queryParameters['initial_cost.from'] = requestParameters.initialCostFrom;
    }

    if (requestParameters.initialCostTo !== undefined) {
      queryParameters['initial_cost.to'] = requestParameters.initialCostTo;
    }

    if (requestParameters.monthlyCostSummaryFrom !== undefined) {
      queryParameters['monthly_cost_summary.from'] =
        requestParameters.monthlyCostSummaryFrom;
    }

    if (requestParameters.monthlyCostSummaryTo !== undefined) {
      queryParameters['monthly_cost_summary.to'] =
        requestParameters.monthlyCostSummaryTo;
    }

    if (requestParameters.advertisingFeePercentTo !== undefined) {
      queryParameters['advertising_fee_percent.to'] =
        requestParameters.advertisingFeePercentTo;
    }

    if (requestParameters.advertisingFeePercentFrom !== undefined) {
      queryParameters['advertising_fee_percent.from'] =
        requestParameters.advertisingFeePercentFrom;
    }

    if (requestParameters.areaFrom !== undefined) {
      queryParameters['area.from'] = requestParameters.areaFrom;
    }

    if (requestParameters.areaTo !== undefined) {
      queryParameters['area.to'] = requestParameters.areaTo;
    }

    if (requestParameters.exclusiveAreaFrom !== undefined) {
      queryParameters['exclusive_area.from'] =
        requestParameters.exclusiveAreaFrom;
    }

    if (requestParameters.exclusiveAreaTo !== undefined) {
      queryParameters['exclusive_area.to'] = requestParameters.exclusiveAreaTo;
    }

    if (requestParameters.walkFromStationMinutesFrom !== undefined) {
      queryParameters['walk_from_station_minutes.from'] =
        requestParameters.walkFromStationMinutesFrom;
    }

    if (requestParameters.walkFromStationMinutesTo !== undefined) {
      queryParameters['walk_from_station_minutes.to'] =
        requestParameters.walkFromStationMinutesTo;
    }

    if (requestParameters.lastUpdateDatetimeFrom !== undefined) {
      queryParameters['last_update_datetime.from'] = (
        requestParameters.lastUpdateDatetimeFrom as any
      ).toISOString();
    }

    if (requestParameters.lastUpdateDatetimeTo !== undefined) {
      queryParameters['last_update_datetime.to'] = (
        requestParameters.lastUpdateDatetimeTo as any
      ).toISOString();
    }

    if (requestParameters.publishedDatetimeFrom !== undefined) {
      queryParameters['published_datetime.from'] = (
        requestParameters.publishedDatetimeFrom as any
      ).toISOString();
    }

    if (requestParameters.publishedDatetimeTo !== undefined) {
      queryParameters['published_datetime.to'] = (
        requestParameters.publishedDatetimeTo as any
      ).toISOString();
    }

    if (requestParameters.priceUpdateDateFrom !== undefined) {
      queryParameters['price_update_date.from'] = (
        requestParameters.priceUpdateDateFrom as any
      ).toISOString();
    }

    if (requestParameters.priceUpdateDateTo !== undefined) {
      queryParameters['price_update_date.to'] = (
        requestParameters.priceUpdateDateTo as any
      ).toISOString();
    }

    if (requestParameters.advertisingFeeUpdateDateFrom !== undefined) {
      queryParameters['advertising_fee_update_date.from'] = (
        requestParameters.advertisingFeeUpdateDateFrom as any
      ).toISOString();
    }

    if (requestParameters.advertisingFeeUpdateDateTo !== undefined) {
      queryParameters['advertising_fee_update_date.to'] = (
        requestParameters.advertisingFeeUpdateDateTo as any
      ).toISOString();
    }

    if (requestParameters.originalPropertyCodeText !== undefined) {
      queryParameters['original_property_code_text'] =
        requestParameters.originalPropertyCodeText;
    }

    if (requestParameters.buildingGuid) {
      queryParameters['building_guid'] = requestParameters.buildingGuid;
    }

    if (requestParameters.buildingTypeCode) {
      queryParameters['building_type_code'] =
        requestParameters.buildingTypeCode;
    }

    if (requestParameters.structureCode) {
      queryParameters['structure_code'] = requestParameters.structureCode;
    }

    if (requestParameters.siteAreaFrom !== undefined) {
      queryParameters['site_area.from'] = requestParameters.siteAreaFrom;
    }

    if (requestParameters.siteAreaTo !== undefined) {
      queryParameters['site_area.to'] = requestParameters.siteAreaTo;
    }

    if (requestParameters.buildingName !== undefined) {
      queryParameters['building_name'] = requestParameters.buildingName;
    }

    if (requestParameters.buildingFurigana !== undefined) {
      queryParameters['building_furigana'] = requestParameters.buildingFurigana;
    }

    if (requestParameters.tagGuid) {
      queryParameters['tag_guid'] = requestParameters.tagGuid;
    }

    if (requestParameters.prefecture !== undefined) {
      queryParameters['prefecture'] = requestParameters.prefecture;
    }

    if (requestParameters.prefectureCode) {
      queryParameters['prefecture_code'] = requestParameters.prefectureCode;
    }

    if (requestParameters.city) {
      queryParameters['city'] = requestParameters.city;
    }

    if (requestParameters.cityCode) {
      queryParameters['city_code'] = requestParameters.cityCode;
    }

    if (requestParameters.town) {
      queryParameters['town'] = requestParameters.town;
    }

    if (requestParameters.jisCode) {
      queryParameters['jis_code'] = requestParameters.jisCode;
    }

    if (requestParameters.address) {
      queryParameters['address'] = requestParameters.address;
    }

    if (requestParameters.lineCode) {
      queryParameters['line_code'] = requestParameters.lineCode;
    }

    if (requestParameters.stationCode) {
      queryParameters['station_code'] = requestParameters.stationCode;
    }

    if (requestParameters.customerKey) {
      queryParameters['customer_key'] = requestParameters.customerKey;
    }

    if (requestParameters.ignorePublishStatus !== undefined) {
      queryParameters['ignore_publish_status'] =
        requestParameters.ignorePublishStatus;
    }

    if (requestParameters.nameOrCodeText !== undefined) {
      queryParameters['name_or_code_text'] = requestParameters.nameOrCodeText;
    }

    if (requestParameters.ignoreNameDisplay !== undefined) {
      queryParameters['ignore_name_display'] =
        requestParameters.ignoreNameDisplay;
    }

    if (requestParameters.query !== undefined) {
      queryParameters['query'] = requestParameters.query;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Api-Key'] = this.configuration.apiKey('X-Api-Key'); // APIKeyHeader authentication
    }

    const response = await this.request({
      path: `/property/rent/area/count/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AreaAggregateResultFromJSON(jsonValue)
    );
  }

  /**
   * エリア別の物件数の集計結果を取得する（賃貸）  市区郡/町村のレベル別に物件数を集計し、その結果を返す。 クエリパラメータで検索条件を付加することもできる。
   * Aggregate By Area
   */
  async aggregateRentPropertyByArea(
    requestParameters: AggregateRentPropertyByAreaRequest
  ): Promise<AreaAggregateResult> {
    const response = await this.aggregateRentPropertyByAreaRaw(
      requestParameters
    );
    return await response.value();
  }

  /**
   * 鉄道会社・駅・沿線別の物件数の集計結果を取得する（賃貸）  鉄道会社・駅・沿線のレベルごとに物件数を集計し、その結果を返す。 クエリパラメータで検索条件を付加することもできる。
   * Aggregate By Line
   */
  async aggregateRentPropertyByLineRaw(
    requestParameters: AggregateRentPropertyByLineRequest
  ): Promise<runtime.ApiResponse<LineAggregateResult>> {
    if (
      requestParameters.level === null ||
      requestParameters.level === undefined
    ) {
      throw new runtime.RequiredError(
        'level',
        'Required parameter requestParameters.level was null or undefined when calling aggregateRentPropertyByLine.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.level !== undefined) {
      queryParameters['level'] = requestParameters.level;
    }

    if (requestParameters.companyCode) {
      queryParameters['company_code'] = requestParameters.companyCode;
    }

    if (requestParameters.baitaiCode !== undefined) {
      queryParameters['baitai_code'] = requestParameters.baitaiCode;
    }

    if (requestParameters.propertyFullKey) {
      queryParameters['property_full_key'] = requestParameters.propertyFullKey;
    }

    if (requestParameters.propertyUseCode) {
      queryParameters['property_use_code'] = requestParameters.propertyUseCode;
    }

    if (requestParameters.propertyTypeCode) {
      queryParameters['property_type_code'] =
        requestParameters.propertyTypeCode;
    }

    if (requestParameters.newUsedCode !== undefined) {
      queryParameters['new_used_code'] = requestParameters.newUsedCode;
    }

    if (requestParameters.residenceRentPeriodCode !== undefined) {
      queryParameters['residence_rent_period_code'] =
        requestParameters.residenceRentPeriodCode;
    }

    if (requestParameters.layoutText) {
      queryParameters['layout_text'] = requestParameters.layoutText;
    }

    if (requestParameters.layoutTypeCode) {
      queryParameters['layout_type_code'] = requestParameters.layoutTypeCode;
    }

    if (requestParameters.isLargerThan5k !== undefined) {
      queryParameters['is_larger_than_5k'] = requestParameters.isLargerThan5k;
    }

    if (requestParameters.layoutCode) {
      queryParameters['layout_code'] = requestParameters.layoutCode;
    }

    if (requestParameters.isNowAvailable !== undefined) {
      queryParameters['is_now_available'] = requestParameters.isNowAvailable;
    }

    if (requestParameters.availableCode) {
      queryParameters['available_code'] = requestParameters.availableCode;
    }

    if (requestParameters.rentTransactionFormCode) {
      queryParameters['rent_transaction_form_code'] =
        requestParameters.rentTransactionFormCode;
    }

    if (requestParameters.studentRestrictionCode) {
      queryParameters['student_restriction_code'] =
        requestParameters.studentRestrictionCode;
    }

    if (requestParameters.genderRestrictionCode) {
      queryParameters['gender_restriction_code'] =
        requestParameters.genderRestrictionCode;
    }

    if (requestParameters.kidsRestrictionCode) {
      queryParameters['kids_restriction_code'] =
        requestParameters.kidsRestrictionCode;
    }

    if (requestParameters.onePersonRestrictionCode) {
      queryParameters['one_person_restriction_code'] =
        requestParameters.onePersonRestrictionCode;
    }

    if (requestParameters.twoPersonsRestrictionCode) {
      queryParameters['two_persons_restriction_code'] =
        requestParameters.twoPersonsRestrictionCode;
    }

    if (requestParameters.elderRestrictionCode) {
      queryParameters['elder_restriction_code'] =
        requestParameters.elderRestrictionCode;
    }

    if (requestParameters.manageCostFreeCode) {
      queryParameters['manage_cost_free_code'] =
        requestParameters.manageCostFreeCode;
    }

    if (requestParameters.serviceFeeFreeCode) {
      queryParameters['service_fee_free_code'] =
        requestParameters.serviceFeeFreeCode;
    }

    if (requestParameters.miscExpenseFreeCode) {
      queryParameters['misc_expense_free_code'] =
        requestParameters.miscExpenseFreeCode;
    }

    if (requestParameters.otherInitialCostFreeFlag !== undefined) {
      queryParameters['other_initial_cost_free_flag'] =
        requestParameters.otherInitialCostFreeFlag;
    }

    if (requestParameters.petRestrictionCode) {
      queryParameters['pet_restriction_code'] =
        requestParameters.petRestrictionCode;
    }

    if (requestParameters.officeUsageRestrictionCode) {
      queryParameters['office_usage_restriction_code'] =
        requestParameters.officeUsageRestrictionCode;
    }

    if (requestParameters.corporateContractRestrictionCode) {
      queryParameters['corporate_contract_restriction_code'] =
        requestParameters.corporateContractRestrictionCode;
    }

    if (requestParameters.musicalInstrumentRestrictionCode) {
      queryParameters['musical_instrument_restriction_code'] =
        requestParameters.musicalInstrumentRestrictionCode;
    }

    if (requestParameters.restaurantUsageRestrictionCode) {
      queryParameters['restaurant_usage_restriction_code'] =
        requestParameters.restaurantUsageRestrictionCode;
    }

    if (requestParameters.roomSharingRestrictionCode) {
      queryParameters['room_sharing_restriction_code'] =
        requestParameters.roomSharingRestrictionCode;
    }

    if (requestParameters.foreignerRestrictionCode) {
      queryParameters['foreigner_restriction_code'] =
        requestParameters.foreignerRestrictionCode;
    }

    if (requestParameters.friendsRestrictionCode) {
      queryParameters['friends_restriction_code'] =
        requestParameters.friendsRestrictionCode;
    }

    if (requestParameters.foreignStudentRestrictionCode) {
      queryParameters['foreign_student_restriction_code'] =
        requestParameters.foreignStudentRestrictionCode;
    }

    if (requestParameters.parkingAvailabilityCode) {
      queryParameters['parking_availability_code'] =
        requestParameters.parkingAvailabilityCode;
    }

    if (requestParameters.gasCode) {
      queryParameters['gas_code'] = requestParameters.gasCode;
    }

    if (requestParameters.initialCostCode) {
      queryParameters['initial_cost_code'] = requestParameters.initialCostCode;
    }

    if (requestParameters.guarantorRequirementsCode) {
      queryParameters['guarantor_requirements_code'] =
        requestParameters.guarantorRequirementsCode;
    }

    if (requestParameters.hasInsurance !== undefined) {
      queryParameters['has_insurance'] = requestParameters.hasInsurance;
    }

    if (requestParameters.depositForStudentCode) {
      queryParameters['deposit_for_student_code'] =
        requestParameters.depositForStudentCode;
    }

    if (requestParameters.itJusetsuFlag !== undefined) {
      queryParameters['it_jusetsu_flag'] = requestParameters.itJusetsuFlag;
    }

    if (requestParameters.noGuarantorFlag !== undefined) {
      queryParameters['no_guarantor_flag'] = requestParameters.noGuarantorFlag;
    }

    if (requestParameters.isTokuyuchin !== undefined) {
      queryParameters['is_tokuyuchin'] = requestParameters.isTokuyuchin;
    }

    if (requestParameters.freeRentFlag !== undefined) {
      queryParameters['free_rent_flag'] = requestParameters.freeRentFlag;
    }

    if (requestParameters.managerFlag !== undefined) {
      queryParameters['manager_flag'] = requestParameters.managerFlag;
    }

    if (requestParameters.hasMotorbikeParking !== undefined) {
      queryParameters['has_motorbike_parking'] =
        requestParameters.hasMotorbikeParking;
    }

    if (requestParameters.hasBikeParking !== undefined) {
      queryParameters['has_bike_parking'] = requestParameters.hasBikeParking;
    }

    if (requestParameters.panoramaFlag !== undefined) {
      queryParameters['panorama_flag'] = requestParameters.panoramaFlag;
    }

    if (requestParameters.floorPlanFlag !== undefined) {
      queryParameters['floor_plan_flag'] = requestParameters.floorPlanFlag;
    }

    if (requestParameters.hasExteriorImage !== undefined) {
      queryParameters['has_exterior_image'] =
        requestParameters.hasExteriorImage;
    }

    if (requestParameters.b2bCustomFlag !== undefined) {
      queryParameters['b2b_custom_flag'] = requestParameters.b2bCustomFlag;
    }

    if (requestParameters.isFurnished !== undefined) {
      queryParameters['is_furnished'] = requestParameters.isFurnished;
    }

    if (requestParameters.hasAppliances !== undefined) {
      queryParameters['has_appliances'] = requestParameters.hasAppliances;
    }

    if (requestParameters.isNetFree !== undefined) {
      queryParameters['is_net_free'] = requestParameters.isNetFree;
    }

    if (requestParameters.isOver2f !== undefined) {
      queryParameters['is_over_2f'] = requestParameters.isOver2f;
    }

    if (requestParameters.isBathToiletSeparate !== undefined) {
      queryParameters['is_bath_toilet_separate'] =
        requestParameters.isBathToiletSeparate;
    }

    if (requestParameters.hasAircon !== undefined) {
      queryParameters['has_aircon'] = requestParameters.hasAircon;
    }

    if (requestParameters.hasAutoLock !== undefined) {
      queryParameters['has_auto_lock'] = requestParameters.hasAutoLock;
    }

    if (requestParameters.hasDeliveryBox !== undefined) {
      queryParameters['has_delivery_box'] = requestParameters.hasDeliveryBox;
    }

    if (requestParameters.hasElevator !== undefined) {
      queryParameters['has_elevator'] = requestParameters.hasElevator;
    }

    if (requestParameters.hasLandryRoom !== undefined) {
      queryParameters['has_landry_room'] = requestParameters.hasLandryRoom;
    }

    if (requestParameters.isFlooring !== undefined) {
      queryParameters['is_flooring'] = requestParameters.isFlooring;
    }

    if (requestParameters.isDesignersApartment !== undefined) {
      queryParameters['is_designers_apartment'] =
        requestParameters.isDesignersApartment;
    }

    if (requestParameters.isBarrierFree !== undefined) {
      queryParameters['is_barrier_free'] = requestParameters.isBarrierFree;
    }

    if (requestParameters.isSouthFacing !== undefined) {
      queryParameters['is_south_facing'] = requestParameters.isSouthFacing;
    }

    if (requestParameters.isHighestFloor !== undefined) {
      queryParameters['is_highest_floor'] = requestParameters.isHighestFloor;
    }

    if (requestParameters.isCornerRoom !== undefined) {
      queryParameters['is_corner_room'] = requestParameters.isCornerRoom;
    }

    if (requestParameters.hasSystemKitchen !== undefined) {
      queryParameters['has_system_kitchen'] =
        requestParameters.hasSystemKitchen;
    }

    if (requestParameters.hasIhStove !== undefined) {
      queryParameters['has_ih_stove'] = requestParameters.hasIhStove;
    }

    if (requestParameters.hasGasStove !== undefined) {
      queryParameters['has_gas_stove'] = requestParameters.hasGasStove;
    }

    if (requestParameters.hasMultipleGasStove !== undefined) {
      queryParameters['has_multiple_gas_stove'] =
        requestParameters.hasMultipleGasStove;
    }

    if (requestParameters.hasReboilBath !== undefined) {
      queryParameters['has_reboil_bath'] = requestParameters.hasReboilBath;
    }

    if (requestParameters.hasWashlet !== undefined) {
      queryParameters['has_washlet'] = requestParameters.hasWashlet;
    }

    if (requestParameters.hasBathDryer !== undefined) {
      queryParameters['has_bath_dryer'] = requestParameters.hasBathDryer;
    }

    if (requestParameters.hasFloorHeating !== undefined) {
      queryParameters['has_floor_heating'] = requestParameters.hasFloorHeating;
    }

    if (requestParameters.hasCloset !== undefined) {
      queryParameters['has_closet'] = requestParameters.hasCloset;
    }

    if (requestParameters.hasWalkInCloset !== undefined) {
      queryParameters['has_walk_in_closet'] = requestParameters.hasWalkInCloset;
    }

    if (requestParameters.hasCatv !== undefined) {
      queryParameters['has_catv'] = requestParameters.hasCatv;
    }

    if (requestParameters.hasCs !== undefined) {
      queryParameters['has_cs'] = requestParameters.hasCs;
    }

    if (requestParameters.hasBs !== undefined) {
      queryParameters['has_bs'] = requestParameters.hasBs;
    }

    if (requestParameters.hasOpticalFiber !== undefined) {
      queryParameters['has_optical_fiber'] = requestParameters.hasOpticalFiber;
    }

    if (requestParameters.isAllElectric !== undefined) {
      queryParameters['is_all_electric'] = requestParameters.isAllElectric;
    }

    if (requestParameters.hasVerandaBalcony !== undefined) {
      queryParameters['has_veranda_balcony'] =
        requestParameters.hasVerandaBalcony;
    }

    if (requestParameters.isMaisonette !== undefined) {
      queryParameters['is_maisonette'] = requestParameters.isMaisonette;
    }

    if (requestParameters.hasLoft !== undefined) {
      queryParameters['has_loft'] = requestParameters.hasLoft;
    }

    if (requestParameters.hasSoundproof !== undefined) {
      queryParameters['has_soundproof'] = requestParameters.hasSoundproof;
    }

    if (requestParameters.hasCounterKitchen !== undefined) {
      queryParameters['has_counter_kitchen'] =
        requestParameters.hasCounterKitchen;
    }

    if (requestParameters.hasGarbageCollectionSite !== undefined) {
      queryParameters['has_garbage_collection_site'] =
        requestParameters.hasGarbageCollectionSite;
    }

    if (requestParameters.hasOwnYard !== undefined) {
      queryParameters['has_own_yard'] = requestParameters.hasOwnYard;
    }

    if (requestParameters.isQuakeResistantStructure !== undefined) {
      queryParameters['is_quake_resistant_structure'] =
        requestParameters.isQuakeResistantStructure;
    }

    if (requestParameters.isQuakeAbsorbingStructure !== undefined) {
      queryParameters['is_quake_absorbing_structure'] =
        requestParameters.isQuakeAbsorbingStructure;
    }

    if (requestParameters.isDampingStructure !== undefined) {
      queryParameters['is_damping_structure'] =
        requestParameters.isDampingStructure;
    }

    if (requestParameters.hasTvIntercom !== undefined) {
      queryParameters['has_tv_intercom'] = requestParameters.hasTvIntercom;
    }

    if (requestParameters.hasSecurityCamera !== undefined) {
      queryParameters['has_security_camera'] =
        requestParameters.hasSecurityCamera;
    }

    if (requestParameters.isInternetAvailable !== undefined) {
      queryParameters['is_internet_available'] =
        requestParameters.isInternetAvailable;
    }

    if (requestParameters.hasTrunkRoom !== undefined) {
      queryParameters['has_trunk_room'] = requestParameters.hasTrunkRoom;
    }

    if (requestParameters.isCondominium !== undefined) {
      queryParameters['is_condominium'] = requestParameters.isCondominium;
    }

    if (requestParameters.isTowerApartment !== undefined) {
      queryParameters['is_tower_apartment'] =
        requestParameters.isTowerApartment;
    }

    if (requestParameters.isRenovated !== undefined) {
      queryParameters['is_renovated'] = requestParameters.isRenovated;
    }

    if (requestParameters.hasWashroom !== undefined) {
      queryParameters['has_washroom'] = requestParameters.hasWashroom;
    }

    if (requestParameters.buildingAgeFrom !== undefined) {
      queryParameters['building_age.from'] = requestParameters.buildingAgeFrom;
    }

    if (requestParameters.buildingAgeTo !== undefined) {
      queryParameters['building_age.to'] = requestParameters.buildingAgeTo;
    }

    if (requestParameters.priceFrom !== undefined) {
      queryParameters['price.from'] = requestParameters.priceFrom;
    }

    if (requestParameters.priceTo !== undefined) {
      queryParameters['price.to'] = requestParameters.priceTo;
    }

    if (requestParameters.manageCostYenFrom !== undefined) {
      queryParameters['manage_cost_yen.from'] =
        requestParameters.manageCostYenFrom;
    }

    if (requestParameters.manageCostYenTo !== undefined) {
      queryParameters['manage_cost_yen.to'] = requestParameters.manageCostYenTo;
    }

    if (requestParameters.depositYenFrom !== undefined) {
      queryParameters['deposit_yen.from'] = requestParameters.depositYenFrom;
    }

    if (requestParameters.depositYenTo !== undefined) {
      queryParameters['deposit_yen.to'] = requestParameters.depositYenTo;
    }

    if (requestParameters.depositMonthFrom !== undefined) {
      queryParameters['deposit_month.from'] =
        requestParameters.depositMonthFrom;
    }

    if (requestParameters.depositMonthTo !== undefined) {
      queryParameters['deposit_month.to'] = requestParameters.depositMonthTo;
    }

    if (requestParameters.keyMoneyYenFrom !== undefined) {
      queryParameters['key_money_yen.from'] = requestParameters.keyMoneyYenFrom;
    }

    if (requestParameters.keyMoneyYenTo !== undefined) {
      queryParameters['key_money_yen.to'] = requestParameters.keyMoneyYenTo;
    }

    if (requestParameters.keyMoneyMonthFrom !== undefined) {
      queryParameters['key_money_month.from'] =
        requestParameters.keyMoneyMonthFrom;
    }

    if (requestParameters.keyMoneyMonthTo !== undefined) {
      queryParameters['key_money_month.to'] = requestParameters.keyMoneyMonthTo;
    }

    if (requestParameters.repairCostYenFrom !== undefined) {
      queryParameters['repair_cost_yen.from'] =
        requestParameters.repairCostYenFrom;
    }

    if (requestParameters.repairCostYenTo !== undefined) {
      queryParameters['repair_cost_yen.to'] = requestParameters.repairCostYenTo;
    }

    if (requestParameters.repairCostMonthFrom !== undefined) {
      queryParameters['repair_cost_month.from'] =
        requestParameters.repairCostMonthFrom;
    }

    if (requestParameters.repairCostMonthTo !== undefined) {
      queryParameters['repair_cost_month.to'] =
        requestParameters.repairCostMonthTo;
    }

    if (requestParameters.initialCostFrom !== undefined) {
      queryParameters['initial_cost.from'] = requestParameters.initialCostFrom;
    }

    if (requestParameters.initialCostTo !== undefined) {
      queryParameters['initial_cost.to'] = requestParameters.initialCostTo;
    }

    if (requestParameters.monthlyCostSummaryFrom !== undefined) {
      queryParameters['monthly_cost_summary.from'] =
        requestParameters.monthlyCostSummaryFrom;
    }

    if (requestParameters.monthlyCostSummaryTo !== undefined) {
      queryParameters['monthly_cost_summary.to'] =
        requestParameters.monthlyCostSummaryTo;
    }

    if (requestParameters.advertisingFeePercentTo !== undefined) {
      queryParameters['advertising_fee_percent.to'] =
        requestParameters.advertisingFeePercentTo;
    }

    if (requestParameters.advertisingFeePercentFrom !== undefined) {
      queryParameters['advertising_fee_percent.from'] =
        requestParameters.advertisingFeePercentFrom;
    }

    if (requestParameters.areaFrom !== undefined) {
      queryParameters['area.from'] = requestParameters.areaFrom;
    }

    if (requestParameters.areaTo !== undefined) {
      queryParameters['area.to'] = requestParameters.areaTo;
    }

    if (requestParameters.exclusiveAreaFrom !== undefined) {
      queryParameters['exclusive_area.from'] =
        requestParameters.exclusiveAreaFrom;
    }

    if (requestParameters.exclusiveAreaTo !== undefined) {
      queryParameters['exclusive_area.to'] = requestParameters.exclusiveAreaTo;
    }

    if (requestParameters.walkFromStationMinutesFrom !== undefined) {
      queryParameters['walk_from_station_minutes.from'] =
        requestParameters.walkFromStationMinutesFrom;
    }

    if (requestParameters.walkFromStationMinutesTo !== undefined) {
      queryParameters['walk_from_station_minutes.to'] =
        requestParameters.walkFromStationMinutesTo;
    }

    if (requestParameters.lastUpdateDatetimeFrom !== undefined) {
      queryParameters['last_update_datetime.from'] = (
        requestParameters.lastUpdateDatetimeFrom as any
      ).toISOString();
    }

    if (requestParameters.lastUpdateDatetimeTo !== undefined) {
      queryParameters['last_update_datetime.to'] = (
        requestParameters.lastUpdateDatetimeTo as any
      ).toISOString();
    }

    if (requestParameters.publishedDatetimeFrom !== undefined) {
      queryParameters['published_datetime.from'] = (
        requestParameters.publishedDatetimeFrom as any
      ).toISOString();
    }

    if (requestParameters.publishedDatetimeTo !== undefined) {
      queryParameters['published_datetime.to'] = (
        requestParameters.publishedDatetimeTo as any
      ).toISOString();
    }

    if (requestParameters.priceUpdateDateFrom !== undefined) {
      queryParameters['price_update_date.from'] = (
        requestParameters.priceUpdateDateFrom as any
      ).toISOString();
    }

    if (requestParameters.priceUpdateDateTo !== undefined) {
      queryParameters['price_update_date.to'] = (
        requestParameters.priceUpdateDateTo as any
      ).toISOString();
    }

    if (requestParameters.advertisingFeeUpdateDateFrom !== undefined) {
      queryParameters['advertising_fee_update_date.from'] = (
        requestParameters.advertisingFeeUpdateDateFrom as any
      ).toISOString();
    }

    if (requestParameters.advertisingFeeUpdateDateTo !== undefined) {
      queryParameters['advertising_fee_update_date.to'] = (
        requestParameters.advertisingFeeUpdateDateTo as any
      ).toISOString();
    }

    if (requestParameters.originalPropertyCodeText !== undefined) {
      queryParameters['original_property_code_text'] =
        requestParameters.originalPropertyCodeText;
    }

    if (requestParameters.buildingGuid) {
      queryParameters['building_guid'] = requestParameters.buildingGuid;
    }

    if (requestParameters.buildingTypeCode) {
      queryParameters['building_type_code'] =
        requestParameters.buildingTypeCode;
    }

    if (requestParameters.structureCode) {
      queryParameters['structure_code'] = requestParameters.structureCode;
    }

    if (requestParameters.siteAreaFrom !== undefined) {
      queryParameters['site_area.from'] = requestParameters.siteAreaFrom;
    }

    if (requestParameters.siteAreaTo !== undefined) {
      queryParameters['site_area.to'] = requestParameters.siteAreaTo;
    }

    if (requestParameters.buildingName !== undefined) {
      queryParameters['building_name'] = requestParameters.buildingName;
    }

    if (requestParameters.buildingFurigana !== undefined) {
      queryParameters['building_furigana'] = requestParameters.buildingFurigana;
    }

    if (requestParameters.tagGuid) {
      queryParameters['tag_guid'] = requestParameters.tagGuid;
    }

    if (requestParameters.prefecture !== undefined) {
      queryParameters['prefecture'] = requestParameters.prefecture;
    }

    if (requestParameters.prefectureCode) {
      queryParameters['prefecture_code'] = requestParameters.prefectureCode;
    }

    if (requestParameters.city) {
      queryParameters['city'] = requestParameters.city;
    }

    if (requestParameters.cityCode) {
      queryParameters['city_code'] = requestParameters.cityCode;
    }

    if (requestParameters.town) {
      queryParameters['town'] = requestParameters.town;
    }

    if (requestParameters.jisCode) {
      queryParameters['jis_code'] = requestParameters.jisCode;
    }

    if (requestParameters.address) {
      queryParameters['address'] = requestParameters.address;
    }

    if (requestParameters.lineCode) {
      queryParameters['line_code'] = requestParameters.lineCode;
    }

    if (requestParameters.stationCode) {
      queryParameters['station_code'] = requestParameters.stationCode;
    }

    if (requestParameters.customerKey) {
      queryParameters['customer_key'] = requestParameters.customerKey;
    }

    if (requestParameters.ignorePublishStatus !== undefined) {
      queryParameters['ignore_publish_status'] =
        requestParameters.ignorePublishStatus;
    }

    if (requestParameters.nameOrCodeText !== undefined) {
      queryParameters['name_or_code_text'] = requestParameters.nameOrCodeText;
    }

    if (requestParameters.ignoreNameDisplay !== undefined) {
      queryParameters['ignore_name_display'] =
        requestParameters.ignoreNameDisplay;
    }

    if (requestParameters.query !== undefined) {
      queryParameters['query'] = requestParameters.query;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Api-Key'] = this.configuration.apiKey('X-Api-Key'); // APIKeyHeader authentication
    }

    const response = await this.request({
      path: `/property/rent/line/count/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      LineAggregateResultFromJSON(jsonValue)
    );
  }

  /**
   * 鉄道会社・駅・沿線別の物件数の集計結果を取得する（賃貸）  鉄道会社・駅・沿線のレベルごとに物件数を集計し、その結果を返す。 クエリパラメータで検索条件を付加することもできる。
   * Aggregate By Line
   */
  async aggregateRentPropertyByLine(
    requestParameters: AggregateRentPropertyByLineRequest
  ): Promise<LineAggregateResult> {
    const response = await this.aggregateRentPropertyByLineRaw(
      requestParameters
    );
    return await response.value();
  }

  /**
   * 区画単位での物件をランダムに返す(賃貸)  区画ごとに検索条件に合致する部屋区画から items_per_page 個だけランダムに 選んで一覧情報を返す。 レスポンス形式のイメージは以下のようになる。   ``` 区画a -- 建物A 区画b -- 建物A 区画c -- 建物A 区画d -- 建物B 区画e -- 建物B ```
   * Choice Rent Property Dwelling Unit
   */
  async choiceRentPropertyRaw(
    requestParameters: ChoiceRentPropertyRequest
  ): Promise<runtime.ApiResponse<PropertyList>> {
    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.startIndex !== undefined) {
      queryParameters['start_index'] = requestParameters.startIndex;
    }

    if (requestParameters.itemsPerPage !== undefined) {
      queryParameters['items_per_page'] = requestParameters.itemsPerPage;
    }

    if (requestParameters.baitaiCode !== undefined) {
      queryParameters['baitai_code'] = requestParameters.baitaiCode;
    }

    if (requestParameters.propertyFullKey) {
      queryParameters['property_full_key'] = requestParameters.propertyFullKey;
    }

    if (requestParameters.propertyUseCode) {
      queryParameters['property_use_code'] = requestParameters.propertyUseCode;
    }

    if (requestParameters.propertyTypeCode) {
      queryParameters['property_type_code'] =
        requestParameters.propertyTypeCode;
    }

    if (requestParameters.newUsedCode !== undefined) {
      queryParameters['new_used_code'] = requestParameters.newUsedCode;
    }

    if (requestParameters.residenceRentPeriodCode !== undefined) {
      queryParameters['residence_rent_period_code'] =
        requestParameters.residenceRentPeriodCode;
    }

    if (requestParameters.layoutText) {
      queryParameters['layout_text'] = requestParameters.layoutText;
    }

    if (requestParameters.layoutTypeCode) {
      queryParameters['layout_type_code'] = requestParameters.layoutTypeCode;
    }

    if (requestParameters.isLargerThan5k !== undefined) {
      queryParameters['is_larger_than_5k'] = requestParameters.isLargerThan5k;
    }

    if (requestParameters.layoutCode) {
      queryParameters['layout_code'] = requestParameters.layoutCode;
    }

    if (requestParameters.isNowAvailable !== undefined) {
      queryParameters['is_now_available'] = requestParameters.isNowAvailable;
    }

    if (requestParameters.availableCode) {
      queryParameters['available_code'] = requestParameters.availableCode;
    }

    if (requestParameters.rentTransactionFormCode) {
      queryParameters['rent_transaction_form_code'] =
        requestParameters.rentTransactionFormCode;
    }

    if (requestParameters.studentRestrictionCode) {
      queryParameters['student_restriction_code'] =
        requestParameters.studentRestrictionCode;
    }

    if (requestParameters.genderRestrictionCode) {
      queryParameters['gender_restriction_code'] =
        requestParameters.genderRestrictionCode;
    }

    if (requestParameters.kidsRestrictionCode) {
      queryParameters['kids_restriction_code'] =
        requestParameters.kidsRestrictionCode;
    }

    if (requestParameters.onePersonRestrictionCode) {
      queryParameters['one_person_restriction_code'] =
        requestParameters.onePersonRestrictionCode;
    }

    if (requestParameters.twoPersonsRestrictionCode) {
      queryParameters['two_persons_restriction_code'] =
        requestParameters.twoPersonsRestrictionCode;
    }

    if (requestParameters.elderRestrictionCode) {
      queryParameters['elder_restriction_code'] =
        requestParameters.elderRestrictionCode;
    }

    if (requestParameters.manageCostFreeCode) {
      queryParameters['manage_cost_free_code'] =
        requestParameters.manageCostFreeCode;
    }

    if (requestParameters.serviceFeeFreeCode) {
      queryParameters['service_fee_free_code'] =
        requestParameters.serviceFeeFreeCode;
    }

    if (requestParameters.miscExpenseFreeCode) {
      queryParameters['misc_expense_free_code'] =
        requestParameters.miscExpenseFreeCode;
    }

    if (requestParameters.otherInitialCostFreeFlag !== undefined) {
      queryParameters['other_initial_cost_free_flag'] =
        requestParameters.otherInitialCostFreeFlag;
    }

    if (requestParameters.petRestrictionCode) {
      queryParameters['pet_restriction_code'] =
        requestParameters.petRestrictionCode;
    }

    if (requestParameters.officeUsageRestrictionCode) {
      queryParameters['office_usage_restriction_code'] =
        requestParameters.officeUsageRestrictionCode;
    }

    if (requestParameters.corporateContractRestrictionCode) {
      queryParameters['corporate_contract_restriction_code'] =
        requestParameters.corporateContractRestrictionCode;
    }

    if (requestParameters.musicalInstrumentRestrictionCode) {
      queryParameters['musical_instrument_restriction_code'] =
        requestParameters.musicalInstrumentRestrictionCode;
    }

    if (requestParameters.restaurantUsageRestrictionCode) {
      queryParameters['restaurant_usage_restriction_code'] =
        requestParameters.restaurantUsageRestrictionCode;
    }

    if (requestParameters.roomSharingRestrictionCode) {
      queryParameters['room_sharing_restriction_code'] =
        requestParameters.roomSharingRestrictionCode;
    }

    if (requestParameters.foreignerRestrictionCode) {
      queryParameters['foreigner_restriction_code'] =
        requestParameters.foreignerRestrictionCode;
    }

    if (requestParameters.friendsRestrictionCode) {
      queryParameters['friends_restriction_code'] =
        requestParameters.friendsRestrictionCode;
    }

    if (requestParameters.foreignStudentRestrictionCode) {
      queryParameters['foreign_student_restriction_code'] =
        requestParameters.foreignStudentRestrictionCode;
    }

    if (requestParameters.parkingAvailabilityCode) {
      queryParameters['parking_availability_code'] =
        requestParameters.parkingAvailabilityCode;
    }

    if (requestParameters.gasCode) {
      queryParameters['gas_code'] = requestParameters.gasCode;
    }

    if (requestParameters.initialCostCode) {
      queryParameters['initial_cost_code'] = requestParameters.initialCostCode;
    }

    if (requestParameters.guarantorRequirementsCode) {
      queryParameters['guarantor_requirements_code'] =
        requestParameters.guarantorRequirementsCode;
    }

    if (requestParameters.hasInsurance !== undefined) {
      queryParameters['has_insurance'] = requestParameters.hasInsurance;
    }

    if (requestParameters.depositForStudentCode) {
      queryParameters['deposit_for_student_code'] =
        requestParameters.depositForStudentCode;
    }

    if (requestParameters.itJusetsuFlag !== undefined) {
      queryParameters['it_jusetsu_flag'] = requestParameters.itJusetsuFlag;
    }

    if (requestParameters.noGuarantorFlag !== undefined) {
      queryParameters['no_guarantor_flag'] = requestParameters.noGuarantorFlag;
    }

    if (requestParameters.isTokuyuchin !== undefined) {
      queryParameters['is_tokuyuchin'] = requestParameters.isTokuyuchin;
    }

    if (requestParameters.freeRentFlag !== undefined) {
      queryParameters['free_rent_flag'] = requestParameters.freeRentFlag;
    }

    if (requestParameters.managerFlag !== undefined) {
      queryParameters['manager_flag'] = requestParameters.managerFlag;
    }

    if (requestParameters.hasMotorbikeParking !== undefined) {
      queryParameters['has_motorbike_parking'] =
        requestParameters.hasMotorbikeParking;
    }

    if (requestParameters.hasBikeParking !== undefined) {
      queryParameters['has_bike_parking'] = requestParameters.hasBikeParking;
    }

    if (requestParameters.panoramaFlag !== undefined) {
      queryParameters['panorama_flag'] = requestParameters.panoramaFlag;
    }

    if (requestParameters.floorPlanFlag !== undefined) {
      queryParameters['floor_plan_flag'] = requestParameters.floorPlanFlag;
    }

    if (requestParameters.hasExteriorImage !== undefined) {
      queryParameters['has_exterior_image'] =
        requestParameters.hasExteriorImage;
    }

    if (requestParameters.b2bCustomFlag !== undefined) {
      queryParameters['b2b_custom_flag'] = requestParameters.b2bCustomFlag;
    }

    if (requestParameters.isFurnished !== undefined) {
      queryParameters['is_furnished'] = requestParameters.isFurnished;
    }

    if (requestParameters.hasAppliances !== undefined) {
      queryParameters['has_appliances'] = requestParameters.hasAppliances;
    }

    if (requestParameters.isNetFree !== undefined) {
      queryParameters['is_net_free'] = requestParameters.isNetFree;
    }

    if (requestParameters.isOver2f !== undefined) {
      queryParameters['is_over_2f'] = requestParameters.isOver2f;
    }

    if (requestParameters.isBathToiletSeparate !== undefined) {
      queryParameters['is_bath_toilet_separate'] =
        requestParameters.isBathToiletSeparate;
    }

    if (requestParameters.hasAircon !== undefined) {
      queryParameters['has_aircon'] = requestParameters.hasAircon;
    }

    if (requestParameters.hasAutoLock !== undefined) {
      queryParameters['has_auto_lock'] = requestParameters.hasAutoLock;
    }

    if (requestParameters.hasDeliveryBox !== undefined) {
      queryParameters['has_delivery_box'] = requestParameters.hasDeliveryBox;
    }

    if (requestParameters.hasElevator !== undefined) {
      queryParameters['has_elevator'] = requestParameters.hasElevator;
    }

    if (requestParameters.hasLandryRoom !== undefined) {
      queryParameters['has_landry_room'] = requestParameters.hasLandryRoom;
    }

    if (requestParameters.isFlooring !== undefined) {
      queryParameters['is_flooring'] = requestParameters.isFlooring;
    }

    if (requestParameters.isDesignersApartment !== undefined) {
      queryParameters['is_designers_apartment'] =
        requestParameters.isDesignersApartment;
    }

    if (requestParameters.isBarrierFree !== undefined) {
      queryParameters['is_barrier_free'] = requestParameters.isBarrierFree;
    }

    if (requestParameters.isSouthFacing !== undefined) {
      queryParameters['is_south_facing'] = requestParameters.isSouthFacing;
    }

    if (requestParameters.isHighestFloor !== undefined) {
      queryParameters['is_highest_floor'] = requestParameters.isHighestFloor;
    }

    if (requestParameters.isCornerRoom !== undefined) {
      queryParameters['is_corner_room'] = requestParameters.isCornerRoom;
    }

    if (requestParameters.hasSystemKitchen !== undefined) {
      queryParameters['has_system_kitchen'] =
        requestParameters.hasSystemKitchen;
    }

    if (requestParameters.hasIhStove !== undefined) {
      queryParameters['has_ih_stove'] = requestParameters.hasIhStove;
    }

    if (requestParameters.hasGasStove !== undefined) {
      queryParameters['has_gas_stove'] = requestParameters.hasGasStove;
    }

    if (requestParameters.hasMultipleGasStove !== undefined) {
      queryParameters['has_multiple_gas_stove'] =
        requestParameters.hasMultipleGasStove;
    }

    if (requestParameters.hasReboilBath !== undefined) {
      queryParameters['has_reboil_bath'] = requestParameters.hasReboilBath;
    }

    if (requestParameters.hasWashlet !== undefined) {
      queryParameters['has_washlet'] = requestParameters.hasWashlet;
    }

    if (requestParameters.hasBathDryer !== undefined) {
      queryParameters['has_bath_dryer'] = requestParameters.hasBathDryer;
    }

    if (requestParameters.hasFloorHeating !== undefined) {
      queryParameters['has_floor_heating'] = requestParameters.hasFloorHeating;
    }

    if (requestParameters.hasCloset !== undefined) {
      queryParameters['has_closet'] = requestParameters.hasCloset;
    }

    if (requestParameters.hasWalkInCloset !== undefined) {
      queryParameters['has_walk_in_closet'] = requestParameters.hasWalkInCloset;
    }

    if (requestParameters.hasCatv !== undefined) {
      queryParameters['has_catv'] = requestParameters.hasCatv;
    }

    if (requestParameters.hasCs !== undefined) {
      queryParameters['has_cs'] = requestParameters.hasCs;
    }

    if (requestParameters.hasBs !== undefined) {
      queryParameters['has_bs'] = requestParameters.hasBs;
    }

    if (requestParameters.hasOpticalFiber !== undefined) {
      queryParameters['has_optical_fiber'] = requestParameters.hasOpticalFiber;
    }

    if (requestParameters.isAllElectric !== undefined) {
      queryParameters['is_all_electric'] = requestParameters.isAllElectric;
    }

    if (requestParameters.hasVerandaBalcony !== undefined) {
      queryParameters['has_veranda_balcony'] =
        requestParameters.hasVerandaBalcony;
    }

    if (requestParameters.isMaisonette !== undefined) {
      queryParameters['is_maisonette'] = requestParameters.isMaisonette;
    }

    if (requestParameters.hasLoft !== undefined) {
      queryParameters['has_loft'] = requestParameters.hasLoft;
    }

    if (requestParameters.hasSoundproof !== undefined) {
      queryParameters['has_soundproof'] = requestParameters.hasSoundproof;
    }

    if (requestParameters.hasCounterKitchen !== undefined) {
      queryParameters['has_counter_kitchen'] =
        requestParameters.hasCounterKitchen;
    }

    if (requestParameters.hasGarbageCollectionSite !== undefined) {
      queryParameters['has_garbage_collection_site'] =
        requestParameters.hasGarbageCollectionSite;
    }

    if (requestParameters.hasOwnYard !== undefined) {
      queryParameters['has_own_yard'] = requestParameters.hasOwnYard;
    }

    if (requestParameters.isQuakeResistantStructure !== undefined) {
      queryParameters['is_quake_resistant_structure'] =
        requestParameters.isQuakeResistantStructure;
    }

    if (requestParameters.isQuakeAbsorbingStructure !== undefined) {
      queryParameters['is_quake_absorbing_structure'] =
        requestParameters.isQuakeAbsorbingStructure;
    }

    if (requestParameters.isDampingStructure !== undefined) {
      queryParameters['is_damping_structure'] =
        requestParameters.isDampingStructure;
    }

    if (requestParameters.hasTvIntercom !== undefined) {
      queryParameters['has_tv_intercom'] = requestParameters.hasTvIntercom;
    }

    if (requestParameters.hasSecurityCamera !== undefined) {
      queryParameters['has_security_camera'] =
        requestParameters.hasSecurityCamera;
    }

    if (requestParameters.isInternetAvailable !== undefined) {
      queryParameters['is_internet_available'] =
        requestParameters.isInternetAvailable;
    }

    if (requestParameters.hasTrunkRoom !== undefined) {
      queryParameters['has_trunk_room'] = requestParameters.hasTrunkRoom;
    }

    if (requestParameters.isCondominium !== undefined) {
      queryParameters['is_condominium'] = requestParameters.isCondominium;
    }

    if (requestParameters.isTowerApartment !== undefined) {
      queryParameters['is_tower_apartment'] =
        requestParameters.isTowerApartment;
    }

    if (requestParameters.isRenovated !== undefined) {
      queryParameters['is_renovated'] = requestParameters.isRenovated;
    }

    if (requestParameters.hasWashroom !== undefined) {
      queryParameters['has_washroom'] = requestParameters.hasWashroom;
    }

    if (requestParameters.buildingAgeFrom !== undefined) {
      queryParameters['building_age.from'] = requestParameters.buildingAgeFrom;
    }

    if (requestParameters.buildingAgeTo !== undefined) {
      queryParameters['building_age.to'] = requestParameters.buildingAgeTo;
    }

    if (requestParameters.priceFrom !== undefined) {
      queryParameters['price.from'] = requestParameters.priceFrom;
    }

    if (requestParameters.priceTo !== undefined) {
      queryParameters['price.to'] = requestParameters.priceTo;
    }

    if (requestParameters.manageCostYenFrom !== undefined) {
      queryParameters['manage_cost_yen.from'] =
        requestParameters.manageCostYenFrom;
    }

    if (requestParameters.manageCostYenTo !== undefined) {
      queryParameters['manage_cost_yen.to'] = requestParameters.manageCostYenTo;
    }

    if (requestParameters.depositYenFrom !== undefined) {
      queryParameters['deposit_yen.from'] = requestParameters.depositYenFrom;
    }

    if (requestParameters.depositYenTo !== undefined) {
      queryParameters['deposit_yen.to'] = requestParameters.depositYenTo;
    }

    if (requestParameters.depositMonthFrom !== undefined) {
      queryParameters['deposit_month.from'] =
        requestParameters.depositMonthFrom;
    }

    if (requestParameters.depositMonthTo !== undefined) {
      queryParameters['deposit_month.to'] = requestParameters.depositMonthTo;
    }

    if (requestParameters.keyMoneyYenFrom !== undefined) {
      queryParameters['key_money_yen.from'] = requestParameters.keyMoneyYenFrom;
    }

    if (requestParameters.keyMoneyYenTo !== undefined) {
      queryParameters['key_money_yen.to'] = requestParameters.keyMoneyYenTo;
    }

    if (requestParameters.keyMoneyMonthFrom !== undefined) {
      queryParameters['key_money_month.from'] =
        requestParameters.keyMoneyMonthFrom;
    }

    if (requestParameters.keyMoneyMonthTo !== undefined) {
      queryParameters['key_money_month.to'] = requestParameters.keyMoneyMonthTo;
    }

    if (requestParameters.repairCostYenFrom !== undefined) {
      queryParameters['repair_cost_yen.from'] =
        requestParameters.repairCostYenFrom;
    }

    if (requestParameters.repairCostYenTo !== undefined) {
      queryParameters['repair_cost_yen.to'] = requestParameters.repairCostYenTo;
    }

    if (requestParameters.repairCostMonthFrom !== undefined) {
      queryParameters['repair_cost_month.from'] =
        requestParameters.repairCostMonthFrom;
    }

    if (requestParameters.repairCostMonthTo !== undefined) {
      queryParameters['repair_cost_month.to'] =
        requestParameters.repairCostMonthTo;
    }

    if (requestParameters.initialCostFrom !== undefined) {
      queryParameters['initial_cost.from'] = requestParameters.initialCostFrom;
    }

    if (requestParameters.initialCostTo !== undefined) {
      queryParameters['initial_cost.to'] = requestParameters.initialCostTo;
    }

    if (requestParameters.monthlyCostSummaryFrom !== undefined) {
      queryParameters['monthly_cost_summary.from'] =
        requestParameters.monthlyCostSummaryFrom;
    }

    if (requestParameters.monthlyCostSummaryTo !== undefined) {
      queryParameters['monthly_cost_summary.to'] =
        requestParameters.monthlyCostSummaryTo;
    }

    if (requestParameters.advertisingFeePercentTo !== undefined) {
      queryParameters['advertising_fee_percent.to'] =
        requestParameters.advertisingFeePercentTo;
    }

    if (requestParameters.advertisingFeePercentFrom !== undefined) {
      queryParameters['advertising_fee_percent.from'] =
        requestParameters.advertisingFeePercentFrom;
    }

    if (requestParameters.areaFrom !== undefined) {
      queryParameters['area.from'] = requestParameters.areaFrom;
    }

    if (requestParameters.areaTo !== undefined) {
      queryParameters['area.to'] = requestParameters.areaTo;
    }

    if (requestParameters.exclusiveAreaFrom !== undefined) {
      queryParameters['exclusive_area.from'] =
        requestParameters.exclusiveAreaFrom;
    }

    if (requestParameters.exclusiveAreaTo !== undefined) {
      queryParameters['exclusive_area.to'] = requestParameters.exclusiveAreaTo;
    }

    if (requestParameters.walkFromStationMinutesFrom !== undefined) {
      queryParameters['walk_from_station_minutes.from'] =
        requestParameters.walkFromStationMinutesFrom;
    }

    if (requestParameters.walkFromStationMinutesTo !== undefined) {
      queryParameters['walk_from_station_minutes.to'] =
        requestParameters.walkFromStationMinutesTo;
    }

    if (requestParameters.lastUpdateDatetimeFrom !== undefined) {
      queryParameters['last_update_datetime.from'] = (
        requestParameters.lastUpdateDatetimeFrom as any
      ).toISOString();
    }

    if (requestParameters.lastUpdateDatetimeTo !== undefined) {
      queryParameters['last_update_datetime.to'] = (
        requestParameters.lastUpdateDatetimeTo as any
      ).toISOString();
    }

    if (requestParameters.publishedDatetimeFrom !== undefined) {
      queryParameters['published_datetime.from'] = (
        requestParameters.publishedDatetimeFrom as any
      ).toISOString();
    }

    if (requestParameters.publishedDatetimeTo !== undefined) {
      queryParameters['published_datetime.to'] = (
        requestParameters.publishedDatetimeTo as any
      ).toISOString();
    }

    if (requestParameters.priceUpdateDateFrom !== undefined) {
      queryParameters['price_update_date.from'] = (
        requestParameters.priceUpdateDateFrom as any
      ).toISOString();
    }

    if (requestParameters.priceUpdateDateTo !== undefined) {
      queryParameters['price_update_date.to'] = (
        requestParameters.priceUpdateDateTo as any
      ).toISOString();
    }

    if (requestParameters.advertisingFeeUpdateDateFrom !== undefined) {
      queryParameters['advertising_fee_update_date.from'] = (
        requestParameters.advertisingFeeUpdateDateFrom as any
      ).toISOString();
    }

    if (requestParameters.advertisingFeeUpdateDateTo !== undefined) {
      queryParameters['advertising_fee_update_date.to'] = (
        requestParameters.advertisingFeeUpdateDateTo as any
      ).toISOString();
    }

    if (requestParameters.originalPropertyCodeText !== undefined) {
      queryParameters['original_property_code_text'] =
        requestParameters.originalPropertyCodeText;
    }

    if (requestParameters.buildingGuid) {
      queryParameters['building_guid'] = requestParameters.buildingGuid;
    }

    if (requestParameters.buildingTypeCode) {
      queryParameters['building_type_code'] =
        requestParameters.buildingTypeCode;
    }

    if (requestParameters.structureCode) {
      queryParameters['structure_code'] = requestParameters.structureCode;
    }

    if (requestParameters.siteAreaFrom !== undefined) {
      queryParameters['site_area.from'] = requestParameters.siteAreaFrom;
    }

    if (requestParameters.siteAreaTo !== undefined) {
      queryParameters['site_area.to'] = requestParameters.siteAreaTo;
    }

    if (requestParameters.buildingName !== undefined) {
      queryParameters['building_name'] = requestParameters.buildingName;
    }

    if (requestParameters.buildingFurigana !== undefined) {
      queryParameters['building_furigana'] = requestParameters.buildingFurigana;
    }

    if (requestParameters.tagGuid) {
      queryParameters['tag_guid'] = requestParameters.tagGuid;
    }

    if (requestParameters.prefecture !== undefined) {
      queryParameters['prefecture'] = requestParameters.prefecture;
    }

    if (requestParameters.prefectureCode) {
      queryParameters['prefecture_code'] = requestParameters.prefectureCode;
    }

    if (requestParameters.city) {
      queryParameters['city'] = requestParameters.city;
    }

    if (requestParameters.cityCode) {
      queryParameters['city_code'] = requestParameters.cityCode;
    }

    if (requestParameters.town) {
      queryParameters['town'] = requestParameters.town;
    }

    if (requestParameters.jisCode) {
      queryParameters['jis_code'] = requestParameters.jisCode;
    }

    if (requestParameters.address) {
      queryParameters['address'] = requestParameters.address;
    }

    if (requestParameters.lineCode) {
      queryParameters['line_code'] = requestParameters.lineCode;
    }

    if (requestParameters.stationCode) {
      queryParameters['station_code'] = requestParameters.stationCode;
    }

    if (requestParameters.customerKey) {
      queryParameters['customer_key'] = requestParameters.customerKey;
    }

    if (requestParameters.ignorePublishStatus !== undefined) {
      queryParameters['ignore_publish_status'] =
        requestParameters.ignorePublishStatus;
    }

    if (requestParameters.nameOrCodeText !== undefined) {
      queryParameters['name_or_code_text'] = requestParameters.nameOrCodeText;
    }

    if (requestParameters.ignoreNameDisplay !== undefined) {
      queryParameters['ignore_name_display'] =
        requestParameters.ignoreNameDisplay;
    }

    if (requestParameters.query !== undefined) {
      queryParameters['query'] = requestParameters.query;
    }

    if (requestParameters.order !== undefined) {
      queryParameters['order'] = requestParameters.order;
    }

    if (requestParameters.propertyFullKeyOrder !== undefined) {
      queryParameters['property_full_key.order'] =
        requestParameters.propertyFullKeyOrder;
    }

    if (requestParameters.propertyClassCodeOrder !== undefined) {
      queryParameters['property_class_code.order'] =
        requestParameters.propertyClassCodeOrder;
    }

    if (requestParameters.propertyUseCodeOrder !== undefined) {
      queryParameters['property_use_code.order'] =
        requestParameters.propertyUseCodeOrder;
    }

    if (requestParameters.propertyTypeCodeOrder !== undefined) {
      queryParameters['property_type_code.order'] =
        requestParameters.propertyTypeCodeOrder;
    }

    if (requestParameters.modifiedOrder !== undefined) {
      queryParameters['modified.order'] = requestParameters.modifiedOrder;
    }

    if (requestParameters.lastUpdateDatetimeOrder !== undefined) {
      queryParameters['last_update_datetime.order'] =
        requestParameters.lastUpdateDatetimeOrder;
    }

    if (requestParameters.layoutOrder !== undefined) {
      queryParameters['layout.order'] = requestParameters.layoutOrder;
    }

    if (requestParameters.buildingAgeOrder !== undefined) {
      queryParameters['building_age.order'] =
        requestParameters.buildingAgeOrder;
    }

    if (requestParameters.stationOrder !== undefined) {
      queryParameters['station.order'] = requestParameters.stationOrder;
    }

    if (requestParameters.stationNameOrder !== undefined) {
      queryParameters['station_name.order'] =
        requestParameters.stationNameOrder;
    }

    if (requestParameters.lineOrder !== undefined) {
      queryParameters['line.order'] = requestParameters.lineOrder;
    }

    if (requestParameters.lineNameOrder !== undefined) {
      queryParameters['line_name.order'] = requestParameters.lineNameOrder;
    }

    if (requestParameters.walkFromStationMinutesOrder !== undefined) {
      queryParameters['walk_from_station_minutes.order'] =
        requestParameters.walkFromStationMinutesOrder;
    }

    if (requestParameters.addressOrder !== undefined) {
      queryParameters['address.order'] = requestParameters.addressOrder;
    }

    if (requestParameters.searchAreaOrder !== undefined) {
      queryParameters['search_area.order'] = requestParameters.searchAreaOrder;
    }

    if (requestParameters.exclusiveAreaOrder !== undefined) {
      queryParameters['exclusive_area.order'] =
        requestParameters.exclusiveAreaOrder;
    }

    if (requestParameters.buildingNameOrder !== undefined) {
      queryParameters['building_name.order'] =
        requestParameters.buildingNameOrder;
    }

    if (requestParameters.buildingFuriganaOrder !== undefined) {
      queryParameters['building_furigana.order'] =
        requestParameters.buildingFuriganaOrder;
    }

    if (requestParameters.depositPriceOrder !== undefined) {
      queryParameters['deposit_price.order'] =
        requestParameters.depositPriceOrder;
    }

    if (requestParameters.keyMoneyPriceOrder !== undefined) {
      queryParameters['key_money_price.order'] =
        requestParameters.keyMoneyPriceOrder;
    }

    if (requestParameters.manageCostPriceOrder !== undefined) {
      queryParameters['manage_cost_price.order'] =
        requestParameters.manageCostPriceOrder;
    }

    if (requestParameters.advertisingFeePercentOrder !== undefined) {
      queryParameters['advertising_fee_percent.order'] =
        requestParameters.advertisingFeePercentOrder;
    }

    if (requestParameters.advertiseFlagOrder !== undefined) {
      queryParameters['advertise_flag.order'] =
        requestParameters.advertiseFlagOrder;
    }

    if (requestParameters.floorNumberOrder !== undefined) {
      queryParameters['floor_number.order'] =
        requestParameters.floorNumberOrder;
    }

    if (requestParameters.availableDateOrder !== undefined) {
      queryParameters['available_date.order'] =
        requestParameters.availableDateOrder;
    }

    if (requestParameters.priceOrder !== undefined) {
      queryParameters['price.order'] = requestParameters.priceOrder;
    }

    if (requestParameters.initialCostOrder !== undefined) {
      queryParameters['initial_cost.order'] =
        requestParameters.initialCostOrder;
    }

    if (requestParameters.monthlyCostSummaryOrder !== undefined) {
      queryParameters['monthly_cost_summary.order'] =
        requestParameters.monthlyCostSummaryOrder;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Api-Key'] = this.configuration.apiKey('X-Api-Key'); // APIKeyHeader authentication
    }

    const response = await this.request({
      path: `/property/rent/dwelling_unit/choice/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PropertyListFromJSON(jsonValue)
    );
  }

  /**
   * 区画単位での物件をランダムに返す(賃貸)  区画ごとに検索条件に合致する部屋区画から items_per_page 個だけランダムに 選んで一覧情報を返す。 レスポンス形式のイメージは以下のようになる。   ``` 区画a -- 建物A 区画b -- 建物A 区画c -- 建物A 区画d -- 建物B 区画e -- 建物B ```
   * Choice Rent Property Dwelling Unit
   */
  async choiceRentProperty(
    requestParameters: ChoiceRentPropertyRequest
  ): Promise<PropertyList> {
    const response = await this.choiceRentPropertyRaw(requestParameters);
    return await response.value();
  }

  /**
   * property_full_keyで物件情報を取得する（賃貸）  物件の詳細情報を返す。
   * Get Property
   */
  async getRentPropertyRaw(
    requestParameters: GetRentPropertyRequest
  ): Promise<runtime.ApiResponse<RentProperty>> {
    if (
      requestParameters.propertyFullKey === null ||
      requestParameters.propertyFullKey === undefined
    ) {
      throw new runtime.RequiredError(
        'propertyFullKey',
        'Required parameter requestParameters.propertyFullKey was null or undefined when calling getRentProperty.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.baitaiCode !== undefined) {
      queryParameters['baitai_code'] = requestParameters.baitaiCode;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Api-Key'] = this.configuration.apiKey('X-Api-Key'); // APIKeyHeader authentication
    }

    const response = await this.request({
      path: `/property/rent/{property_full_key}/`.replace(
        `{${'property_full_key'}}`,
        encodeURIComponent(String(requestParameters.propertyFullKey))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RentPropertyFromJSON(jsonValue)
    );
  }

  /**
   * property_full_keyで物件情報を取得する（賃貸）  物件の詳細情報を返す。
   * Get Property
   */
  async getRentProperty(
    requestParameters: GetRentPropertyRequest
  ): Promise<RentProperty> {
    const response = await this.getRentPropertyRaw(requestParameters);
    return await response.value();
  }

  /**
   * 建物とそれに紐づく物件の一覧を取得する（賃貸）  建物ごとにグルーピングした形式で、検索条件に合致する部屋区画の一覧情報を返す。 レスポンス形式のイメージは以下のようになる。  ``` 建物A -- 区画a       |- 区画b       |- 区画c 建物B -- 区画d       |- 区画e ```
   * Search Rent Property
   */
  async searchRentPropertyByBuildingRaw(
    requestParameters: SearchRentPropertyByBuildingRequest
  ): Promise<runtime.ApiResponse<BuildingPropertyList>> {
    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.startIndex !== undefined) {
      queryParameters['start_index'] = requestParameters.startIndex;
    }

    if (requestParameters.itemsPerPage !== undefined) {
      queryParameters['items_per_page'] = requestParameters.itemsPerPage;
    }

    if (requestParameters.baitaiCode !== undefined) {
      queryParameters['baitai_code'] = requestParameters.baitaiCode;
    }

    if (requestParameters.propertyFullKey) {
      queryParameters['property_full_key'] = requestParameters.propertyFullKey;
    }

    if (requestParameters.propertyUseCode) {
      queryParameters['property_use_code'] = requestParameters.propertyUseCode;
    }

    if (requestParameters.propertyTypeCode) {
      queryParameters['property_type_code'] =
        requestParameters.propertyTypeCode;
    }

    if (requestParameters.newUsedCode !== undefined) {
      queryParameters['new_used_code'] = requestParameters.newUsedCode;
    }

    if (requestParameters.residenceRentPeriodCode !== undefined) {
      queryParameters['residence_rent_period_code'] =
        requestParameters.residenceRentPeriodCode;
    }

    if (requestParameters.layoutText) {
      queryParameters['layout_text'] = requestParameters.layoutText;
    }

    if (requestParameters.layoutTypeCode) {
      queryParameters['layout_type_code'] = requestParameters.layoutTypeCode;
    }

    if (requestParameters.isLargerThan5k !== undefined) {
      queryParameters['is_larger_than_5k'] = requestParameters.isLargerThan5k;
    }

    if (requestParameters.layoutCode) {
      queryParameters['layout_code'] = requestParameters.layoutCode;
    }

    if (requestParameters.isNowAvailable !== undefined) {
      queryParameters['is_now_available'] = requestParameters.isNowAvailable;
    }

    if (requestParameters.availableCode) {
      queryParameters['available_code'] = requestParameters.availableCode;
    }

    if (requestParameters.rentTransactionFormCode) {
      queryParameters['rent_transaction_form_code'] =
        requestParameters.rentTransactionFormCode;
    }

    if (requestParameters.studentRestrictionCode) {
      queryParameters['student_restriction_code'] =
        requestParameters.studentRestrictionCode;
    }

    if (requestParameters.genderRestrictionCode) {
      queryParameters['gender_restriction_code'] =
        requestParameters.genderRestrictionCode;
    }

    if (requestParameters.kidsRestrictionCode) {
      queryParameters['kids_restriction_code'] =
        requestParameters.kidsRestrictionCode;
    }

    if (requestParameters.onePersonRestrictionCode) {
      queryParameters['one_person_restriction_code'] =
        requestParameters.onePersonRestrictionCode;
    }

    if (requestParameters.twoPersonsRestrictionCode) {
      queryParameters['two_persons_restriction_code'] =
        requestParameters.twoPersonsRestrictionCode;
    }

    if (requestParameters.elderRestrictionCode) {
      queryParameters['elder_restriction_code'] =
        requestParameters.elderRestrictionCode;
    }

    if (requestParameters.manageCostFreeCode) {
      queryParameters['manage_cost_free_code'] =
        requestParameters.manageCostFreeCode;
    }

    if (requestParameters.serviceFeeFreeCode) {
      queryParameters['service_fee_free_code'] =
        requestParameters.serviceFeeFreeCode;
    }

    if (requestParameters.miscExpenseFreeCode) {
      queryParameters['misc_expense_free_code'] =
        requestParameters.miscExpenseFreeCode;
    }

    if (requestParameters.otherInitialCostFreeFlag !== undefined) {
      queryParameters['other_initial_cost_free_flag'] =
        requestParameters.otherInitialCostFreeFlag;
    }

    if (requestParameters.petRestrictionCode) {
      queryParameters['pet_restriction_code'] =
        requestParameters.petRestrictionCode;
    }

    if (requestParameters.officeUsageRestrictionCode) {
      queryParameters['office_usage_restriction_code'] =
        requestParameters.officeUsageRestrictionCode;
    }

    if (requestParameters.corporateContractRestrictionCode) {
      queryParameters['corporate_contract_restriction_code'] =
        requestParameters.corporateContractRestrictionCode;
    }

    if (requestParameters.musicalInstrumentRestrictionCode) {
      queryParameters['musical_instrument_restriction_code'] =
        requestParameters.musicalInstrumentRestrictionCode;
    }

    if (requestParameters.restaurantUsageRestrictionCode) {
      queryParameters['restaurant_usage_restriction_code'] =
        requestParameters.restaurantUsageRestrictionCode;
    }

    if (requestParameters.roomSharingRestrictionCode) {
      queryParameters['room_sharing_restriction_code'] =
        requestParameters.roomSharingRestrictionCode;
    }

    if (requestParameters.foreignerRestrictionCode) {
      queryParameters['foreigner_restriction_code'] =
        requestParameters.foreignerRestrictionCode;
    }

    if (requestParameters.friendsRestrictionCode) {
      queryParameters['friends_restriction_code'] =
        requestParameters.friendsRestrictionCode;
    }

    if (requestParameters.foreignStudentRestrictionCode) {
      queryParameters['foreign_student_restriction_code'] =
        requestParameters.foreignStudentRestrictionCode;
    }

    if (requestParameters.parkingAvailabilityCode) {
      queryParameters['parking_availability_code'] =
        requestParameters.parkingAvailabilityCode;
    }

    if (requestParameters.gasCode) {
      queryParameters['gas_code'] = requestParameters.gasCode;
    }

    if (requestParameters.initialCostCode) {
      queryParameters['initial_cost_code'] = requestParameters.initialCostCode;
    }

    if (requestParameters.guarantorRequirementsCode) {
      queryParameters['guarantor_requirements_code'] =
        requestParameters.guarantorRequirementsCode;
    }

    if (requestParameters.hasInsurance !== undefined) {
      queryParameters['has_insurance'] = requestParameters.hasInsurance;
    }

    if (requestParameters.depositForStudentCode) {
      queryParameters['deposit_for_student_code'] =
        requestParameters.depositForStudentCode;
    }

    if (requestParameters.itJusetsuFlag !== undefined) {
      queryParameters['it_jusetsu_flag'] = requestParameters.itJusetsuFlag;
    }

    if (requestParameters.noGuarantorFlag !== undefined) {
      queryParameters['no_guarantor_flag'] = requestParameters.noGuarantorFlag;
    }

    if (requestParameters.isTokuyuchin !== undefined) {
      queryParameters['is_tokuyuchin'] = requestParameters.isTokuyuchin;
    }

    if (requestParameters.freeRentFlag !== undefined) {
      queryParameters['free_rent_flag'] = requestParameters.freeRentFlag;
    }

    if (requestParameters.managerFlag !== undefined) {
      queryParameters['manager_flag'] = requestParameters.managerFlag;
    }

    if (requestParameters.hasMotorbikeParking !== undefined) {
      queryParameters['has_motorbike_parking'] =
        requestParameters.hasMotorbikeParking;
    }

    if (requestParameters.hasBikeParking !== undefined) {
      queryParameters['has_bike_parking'] = requestParameters.hasBikeParking;
    }

    if (requestParameters.panoramaFlag !== undefined) {
      queryParameters['panorama_flag'] = requestParameters.panoramaFlag;
    }

    if (requestParameters.floorPlanFlag !== undefined) {
      queryParameters['floor_plan_flag'] = requestParameters.floorPlanFlag;
    }

    if (requestParameters.hasExteriorImage !== undefined) {
      queryParameters['has_exterior_image'] =
        requestParameters.hasExteriorImage;
    }

    if (requestParameters.b2bCustomFlag !== undefined) {
      queryParameters['b2b_custom_flag'] = requestParameters.b2bCustomFlag;
    }

    if (requestParameters.isFurnished !== undefined) {
      queryParameters['is_furnished'] = requestParameters.isFurnished;
    }

    if (requestParameters.hasAppliances !== undefined) {
      queryParameters['has_appliances'] = requestParameters.hasAppliances;
    }

    if (requestParameters.isNetFree !== undefined) {
      queryParameters['is_net_free'] = requestParameters.isNetFree;
    }

    if (requestParameters.isOver2f !== undefined) {
      queryParameters['is_over_2f'] = requestParameters.isOver2f;
    }

    if (requestParameters.isBathToiletSeparate !== undefined) {
      queryParameters['is_bath_toilet_separate'] =
        requestParameters.isBathToiletSeparate;
    }

    if (requestParameters.hasAircon !== undefined) {
      queryParameters['has_aircon'] = requestParameters.hasAircon;
    }

    if (requestParameters.hasAutoLock !== undefined) {
      queryParameters['has_auto_lock'] = requestParameters.hasAutoLock;
    }

    if (requestParameters.hasDeliveryBox !== undefined) {
      queryParameters['has_delivery_box'] = requestParameters.hasDeliveryBox;
    }

    if (requestParameters.hasElevator !== undefined) {
      queryParameters['has_elevator'] = requestParameters.hasElevator;
    }

    if (requestParameters.hasLandryRoom !== undefined) {
      queryParameters['has_landry_room'] = requestParameters.hasLandryRoom;
    }

    if (requestParameters.isFlooring !== undefined) {
      queryParameters['is_flooring'] = requestParameters.isFlooring;
    }

    if (requestParameters.isDesignersApartment !== undefined) {
      queryParameters['is_designers_apartment'] =
        requestParameters.isDesignersApartment;
    }

    if (requestParameters.isBarrierFree !== undefined) {
      queryParameters['is_barrier_free'] = requestParameters.isBarrierFree;
    }

    if (requestParameters.isSouthFacing !== undefined) {
      queryParameters['is_south_facing'] = requestParameters.isSouthFacing;
    }

    if (requestParameters.isHighestFloor !== undefined) {
      queryParameters['is_highest_floor'] = requestParameters.isHighestFloor;
    }

    if (requestParameters.isCornerRoom !== undefined) {
      queryParameters['is_corner_room'] = requestParameters.isCornerRoom;
    }

    if (requestParameters.hasSystemKitchen !== undefined) {
      queryParameters['has_system_kitchen'] =
        requestParameters.hasSystemKitchen;
    }

    if (requestParameters.hasIhStove !== undefined) {
      queryParameters['has_ih_stove'] = requestParameters.hasIhStove;
    }

    if (requestParameters.hasGasStove !== undefined) {
      queryParameters['has_gas_stove'] = requestParameters.hasGasStove;
    }

    if (requestParameters.hasMultipleGasStove !== undefined) {
      queryParameters['has_multiple_gas_stove'] =
        requestParameters.hasMultipleGasStove;
    }

    if (requestParameters.hasReboilBath !== undefined) {
      queryParameters['has_reboil_bath'] = requestParameters.hasReboilBath;
    }

    if (requestParameters.hasWashlet !== undefined) {
      queryParameters['has_washlet'] = requestParameters.hasWashlet;
    }

    if (requestParameters.hasBathDryer !== undefined) {
      queryParameters['has_bath_dryer'] = requestParameters.hasBathDryer;
    }

    if (requestParameters.hasFloorHeating !== undefined) {
      queryParameters['has_floor_heating'] = requestParameters.hasFloorHeating;
    }

    if (requestParameters.hasCloset !== undefined) {
      queryParameters['has_closet'] = requestParameters.hasCloset;
    }

    if (requestParameters.hasWalkInCloset !== undefined) {
      queryParameters['has_walk_in_closet'] = requestParameters.hasWalkInCloset;
    }

    if (requestParameters.hasCatv !== undefined) {
      queryParameters['has_catv'] = requestParameters.hasCatv;
    }

    if (requestParameters.hasCs !== undefined) {
      queryParameters['has_cs'] = requestParameters.hasCs;
    }

    if (requestParameters.hasBs !== undefined) {
      queryParameters['has_bs'] = requestParameters.hasBs;
    }

    if (requestParameters.hasOpticalFiber !== undefined) {
      queryParameters['has_optical_fiber'] = requestParameters.hasOpticalFiber;
    }

    if (requestParameters.isAllElectric !== undefined) {
      queryParameters['is_all_electric'] = requestParameters.isAllElectric;
    }

    if (requestParameters.hasVerandaBalcony !== undefined) {
      queryParameters['has_veranda_balcony'] =
        requestParameters.hasVerandaBalcony;
    }

    if (requestParameters.isMaisonette !== undefined) {
      queryParameters['is_maisonette'] = requestParameters.isMaisonette;
    }

    if (requestParameters.hasLoft !== undefined) {
      queryParameters['has_loft'] = requestParameters.hasLoft;
    }

    if (requestParameters.hasSoundproof !== undefined) {
      queryParameters['has_soundproof'] = requestParameters.hasSoundproof;
    }

    if (requestParameters.hasCounterKitchen !== undefined) {
      queryParameters['has_counter_kitchen'] =
        requestParameters.hasCounterKitchen;
    }

    if (requestParameters.hasGarbageCollectionSite !== undefined) {
      queryParameters['has_garbage_collection_site'] =
        requestParameters.hasGarbageCollectionSite;
    }

    if (requestParameters.hasOwnYard !== undefined) {
      queryParameters['has_own_yard'] = requestParameters.hasOwnYard;
    }

    if (requestParameters.isQuakeResistantStructure !== undefined) {
      queryParameters['is_quake_resistant_structure'] =
        requestParameters.isQuakeResistantStructure;
    }

    if (requestParameters.isQuakeAbsorbingStructure !== undefined) {
      queryParameters['is_quake_absorbing_structure'] =
        requestParameters.isQuakeAbsorbingStructure;
    }

    if (requestParameters.isDampingStructure !== undefined) {
      queryParameters['is_damping_structure'] =
        requestParameters.isDampingStructure;
    }

    if (requestParameters.hasTvIntercom !== undefined) {
      queryParameters['has_tv_intercom'] = requestParameters.hasTvIntercom;
    }

    if (requestParameters.hasSecurityCamera !== undefined) {
      queryParameters['has_security_camera'] =
        requestParameters.hasSecurityCamera;
    }

    if (requestParameters.isInternetAvailable !== undefined) {
      queryParameters['is_internet_available'] =
        requestParameters.isInternetAvailable;
    }

    if (requestParameters.hasTrunkRoom !== undefined) {
      queryParameters['has_trunk_room'] = requestParameters.hasTrunkRoom;
    }

    if (requestParameters.isCondominium !== undefined) {
      queryParameters['is_condominium'] = requestParameters.isCondominium;
    }

    if (requestParameters.isTowerApartment !== undefined) {
      queryParameters['is_tower_apartment'] =
        requestParameters.isTowerApartment;
    }

    if (requestParameters.isRenovated !== undefined) {
      queryParameters['is_renovated'] = requestParameters.isRenovated;
    }

    if (requestParameters.hasWashroom !== undefined) {
      queryParameters['has_washroom'] = requestParameters.hasWashroom;
    }

    if (requestParameters.buildingAgeFrom !== undefined) {
      queryParameters['building_age.from'] = requestParameters.buildingAgeFrom;
    }

    if (requestParameters.buildingAgeTo !== undefined) {
      queryParameters['building_age.to'] = requestParameters.buildingAgeTo;
    }

    if (requestParameters.priceFrom !== undefined) {
      queryParameters['price.from'] = requestParameters.priceFrom;
    }

    if (requestParameters.priceTo !== undefined) {
      queryParameters['price.to'] = requestParameters.priceTo;
    }

    if (requestParameters.manageCostYenFrom !== undefined) {
      queryParameters['manage_cost_yen.from'] =
        requestParameters.manageCostYenFrom;
    }

    if (requestParameters.manageCostYenTo !== undefined) {
      queryParameters['manage_cost_yen.to'] = requestParameters.manageCostYenTo;
    }

    if (requestParameters.depositYenFrom !== undefined) {
      queryParameters['deposit_yen.from'] = requestParameters.depositYenFrom;
    }

    if (requestParameters.depositYenTo !== undefined) {
      queryParameters['deposit_yen.to'] = requestParameters.depositYenTo;
    }

    if (requestParameters.depositMonthFrom !== undefined) {
      queryParameters['deposit_month.from'] =
        requestParameters.depositMonthFrom;
    }

    if (requestParameters.depositMonthTo !== undefined) {
      queryParameters['deposit_month.to'] = requestParameters.depositMonthTo;
    }

    if (requestParameters.keyMoneyYenFrom !== undefined) {
      queryParameters['key_money_yen.from'] = requestParameters.keyMoneyYenFrom;
    }

    if (requestParameters.keyMoneyYenTo !== undefined) {
      queryParameters['key_money_yen.to'] = requestParameters.keyMoneyYenTo;
    }

    if (requestParameters.keyMoneyMonthFrom !== undefined) {
      queryParameters['key_money_month.from'] =
        requestParameters.keyMoneyMonthFrom;
    }

    if (requestParameters.keyMoneyMonthTo !== undefined) {
      queryParameters['key_money_month.to'] = requestParameters.keyMoneyMonthTo;
    }

    if (requestParameters.repairCostYenFrom !== undefined) {
      queryParameters['repair_cost_yen.from'] =
        requestParameters.repairCostYenFrom;
    }

    if (requestParameters.repairCostYenTo !== undefined) {
      queryParameters['repair_cost_yen.to'] = requestParameters.repairCostYenTo;
    }

    if (requestParameters.repairCostMonthFrom !== undefined) {
      queryParameters['repair_cost_month.from'] =
        requestParameters.repairCostMonthFrom;
    }

    if (requestParameters.repairCostMonthTo !== undefined) {
      queryParameters['repair_cost_month.to'] =
        requestParameters.repairCostMonthTo;
    }

    if (requestParameters.initialCostFrom !== undefined) {
      queryParameters['initial_cost.from'] = requestParameters.initialCostFrom;
    }

    if (requestParameters.initialCostTo !== undefined) {
      queryParameters['initial_cost.to'] = requestParameters.initialCostTo;
    }

    if (requestParameters.monthlyCostSummaryFrom !== undefined) {
      queryParameters['monthly_cost_summary.from'] =
        requestParameters.monthlyCostSummaryFrom;
    }

    if (requestParameters.monthlyCostSummaryTo !== undefined) {
      queryParameters['monthly_cost_summary.to'] =
        requestParameters.monthlyCostSummaryTo;
    }

    if (requestParameters.advertisingFeePercentTo !== undefined) {
      queryParameters['advertising_fee_percent.to'] =
        requestParameters.advertisingFeePercentTo;
    }

    if (requestParameters.advertisingFeePercentFrom !== undefined) {
      queryParameters['advertising_fee_percent.from'] =
        requestParameters.advertisingFeePercentFrom;
    }

    if (requestParameters.areaFrom !== undefined) {
      queryParameters['area.from'] = requestParameters.areaFrom;
    }

    if (requestParameters.areaTo !== undefined) {
      queryParameters['area.to'] = requestParameters.areaTo;
    }

    if (requestParameters.exclusiveAreaFrom !== undefined) {
      queryParameters['exclusive_area.from'] =
        requestParameters.exclusiveAreaFrom;
    }

    if (requestParameters.exclusiveAreaTo !== undefined) {
      queryParameters['exclusive_area.to'] = requestParameters.exclusiveAreaTo;
    }

    if (requestParameters.walkFromStationMinutesFrom !== undefined) {
      queryParameters['walk_from_station_minutes.from'] =
        requestParameters.walkFromStationMinutesFrom;
    }

    if (requestParameters.walkFromStationMinutesTo !== undefined) {
      queryParameters['walk_from_station_minutes.to'] =
        requestParameters.walkFromStationMinutesTo;
    }

    if (requestParameters.lastUpdateDatetimeFrom !== undefined) {
      queryParameters['last_update_datetime.from'] = (
        requestParameters.lastUpdateDatetimeFrom as any
      ).toISOString();
    }

    if (requestParameters.lastUpdateDatetimeTo !== undefined) {
      queryParameters['last_update_datetime.to'] = (
        requestParameters.lastUpdateDatetimeTo as any
      ).toISOString();
    }

    if (requestParameters.publishedDatetimeFrom !== undefined) {
      queryParameters['published_datetime.from'] = (
        requestParameters.publishedDatetimeFrom as any
      ).toISOString();
    }

    if (requestParameters.publishedDatetimeTo !== undefined) {
      queryParameters['published_datetime.to'] = (
        requestParameters.publishedDatetimeTo as any
      ).toISOString();
    }

    if (requestParameters.priceUpdateDateFrom !== undefined) {
      queryParameters['price_update_date.from'] = (
        requestParameters.priceUpdateDateFrom as any
      ).toISOString();
    }

    if (requestParameters.priceUpdateDateTo !== undefined) {
      queryParameters['price_update_date.to'] = (
        requestParameters.priceUpdateDateTo as any
      ).toISOString();
    }

    if (requestParameters.advertisingFeeUpdateDateFrom !== undefined) {
      queryParameters['advertising_fee_update_date.from'] = (
        requestParameters.advertisingFeeUpdateDateFrom as any
      ).toISOString();
    }

    if (requestParameters.advertisingFeeUpdateDateTo !== undefined) {
      queryParameters['advertising_fee_update_date.to'] = (
        requestParameters.advertisingFeeUpdateDateTo as any
      ).toISOString();
    }

    if (requestParameters.originalPropertyCodeText !== undefined) {
      queryParameters['original_property_code_text'] =
        requestParameters.originalPropertyCodeText;
    }

    if (requestParameters.buildingGuid) {
      queryParameters['building_guid'] = requestParameters.buildingGuid;
    }

    if (requestParameters.buildingTypeCode) {
      queryParameters['building_type_code'] =
        requestParameters.buildingTypeCode;
    }

    if (requestParameters.structureCode) {
      queryParameters['structure_code'] = requestParameters.structureCode;
    }

    if (requestParameters.siteAreaFrom !== undefined) {
      queryParameters['site_area.from'] = requestParameters.siteAreaFrom;
    }

    if (requestParameters.siteAreaTo !== undefined) {
      queryParameters['site_area.to'] = requestParameters.siteAreaTo;
    }

    if (requestParameters.buildingName !== undefined) {
      queryParameters['building_name'] = requestParameters.buildingName;
    }

    if (requestParameters.buildingFurigana !== undefined) {
      queryParameters['building_furigana'] = requestParameters.buildingFurigana;
    }

    if (requestParameters.tagGuid) {
      queryParameters['tag_guid'] = requestParameters.tagGuid;
    }

    if (requestParameters.prefecture !== undefined) {
      queryParameters['prefecture'] = requestParameters.prefecture;
    }

    if (requestParameters.prefectureCode) {
      queryParameters['prefecture_code'] = requestParameters.prefectureCode;
    }

    if (requestParameters.city) {
      queryParameters['city'] = requestParameters.city;
    }

    if (requestParameters.cityCode) {
      queryParameters['city_code'] = requestParameters.cityCode;
    }

    if (requestParameters.town) {
      queryParameters['town'] = requestParameters.town;
    }

    if (requestParameters.jisCode) {
      queryParameters['jis_code'] = requestParameters.jisCode;
    }

    if (requestParameters.address) {
      queryParameters['address'] = requestParameters.address;
    }

    if (requestParameters.lineCode) {
      queryParameters['line_code'] = requestParameters.lineCode;
    }

    if (requestParameters.stationCode) {
      queryParameters['station_code'] = requestParameters.stationCode;
    }

    if (requestParameters.customerKey) {
      queryParameters['customer_key'] = requestParameters.customerKey;
    }

    if (requestParameters.ignorePublishStatus !== undefined) {
      queryParameters['ignore_publish_status'] =
        requestParameters.ignorePublishStatus;
    }

    if (requestParameters.nameOrCodeText !== undefined) {
      queryParameters['name_or_code_text'] = requestParameters.nameOrCodeText;
    }

    if (requestParameters.ignoreNameDisplay !== undefined) {
      queryParameters['ignore_name_display'] =
        requestParameters.ignoreNameDisplay;
    }

    if (requestParameters.query !== undefined) {
      queryParameters['query'] = requestParameters.query;
    }

    if (requestParameters.order !== undefined) {
      queryParameters['order'] = requestParameters.order;
    }

    if (requestParameters.propertyFullKeyOrder !== undefined) {
      queryParameters['property_full_key.order'] =
        requestParameters.propertyFullKeyOrder;
    }

    if (requestParameters.propertyClassCodeOrder !== undefined) {
      queryParameters['property_class_code.order'] =
        requestParameters.propertyClassCodeOrder;
    }

    if (requestParameters.propertyUseCodeOrder !== undefined) {
      queryParameters['property_use_code.order'] =
        requestParameters.propertyUseCodeOrder;
    }

    if (requestParameters.propertyTypeCodeOrder !== undefined) {
      queryParameters['property_type_code.order'] =
        requestParameters.propertyTypeCodeOrder;
    }

    if (requestParameters.modifiedOrder !== undefined) {
      queryParameters['modified.order'] = requestParameters.modifiedOrder;
    }

    if (requestParameters.lastUpdateDatetimeOrder !== undefined) {
      queryParameters['last_update_datetime.order'] =
        requestParameters.lastUpdateDatetimeOrder;
    }

    if (requestParameters.layoutOrder !== undefined) {
      queryParameters['layout.order'] = requestParameters.layoutOrder;
    }

    if (requestParameters.buildingAgeOrder !== undefined) {
      queryParameters['building_age.order'] =
        requestParameters.buildingAgeOrder;
    }

    if (requestParameters.stationOrder !== undefined) {
      queryParameters['station.order'] = requestParameters.stationOrder;
    }

    if (requestParameters.stationNameOrder !== undefined) {
      queryParameters['station_name.order'] =
        requestParameters.stationNameOrder;
    }

    if (requestParameters.lineOrder !== undefined) {
      queryParameters['line.order'] = requestParameters.lineOrder;
    }

    if (requestParameters.lineNameOrder !== undefined) {
      queryParameters['line_name.order'] = requestParameters.lineNameOrder;
    }

    if (requestParameters.walkFromStationMinutesOrder !== undefined) {
      queryParameters['walk_from_station_minutes.order'] =
        requestParameters.walkFromStationMinutesOrder;
    }

    if (requestParameters.addressOrder !== undefined) {
      queryParameters['address.order'] = requestParameters.addressOrder;
    }

    if (requestParameters.searchAreaOrder !== undefined) {
      queryParameters['search_area.order'] = requestParameters.searchAreaOrder;
    }

    if (requestParameters.exclusiveAreaOrder !== undefined) {
      queryParameters['exclusive_area.order'] =
        requestParameters.exclusiveAreaOrder;
    }

    if (requestParameters.buildingNameOrder !== undefined) {
      queryParameters['building_name.order'] =
        requestParameters.buildingNameOrder;
    }

    if (requestParameters.buildingFuriganaOrder !== undefined) {
      queryParameters['building_furigana.order'] =
        requestParameters.buildingFuriganaOrder;
    }

    if (requestParameters.depositPriceOrder !== undefined) {
      queryParameters['deposit_price.order'] =
        requestParameters.depositPriceOrder;
    }

    if (requestParameters.keyMoneyPriceOrder !== undefined) {
      queryParameters['key_money_price.order'] =
        requestParameters.keyMoneyPriceOrder;
    }

    if (requestParameters.manageCostPriceOrder !== undefined) {
      queryParameters['manage_cost_price.order'] =
        requestParameters.manageCostPriceOrder;
    }

    if (requestParameters.advertisingFeePercentOrder !== undefined) {
      queryParameters['advertising_fee_percent.order'] =
        requestParameters.advertisingFeePercentOrder;
    }

    if (requestParameters.advertiseFlagOrder !== undefined) {
      queryParameters['advertise_flag.order'] =
        requestParameters.advertiseFlagOrder;
    }

    if (requestParameters.floorNumberOrder !== undefined) {
      queryParameters['floor_number.order'] =
        requestParameters.floorNumberOrder;
    }

    if (requestParameters.availableDateOrder !== undefined) {
      queryParameters['available_date.order'] =
        requestParameters.availableDateOrder;
    }

    if (requestParameters.priceOrder !== undefined) {
      queryParameters['price.order'] = requestParameters.priceOrder;
    }

    if (requestParameters.initialCostOrder !== undefined) {
      queryParameters['initial_cost.order'] =
        requestParameters.initialCostOrder;
    }

    if (requestParameters.monthlyCostSummaryOrder !== undefined) {
      queryParameters['monthly_cost_summary.order'] =
        requestParameters.monthlyCostSummaryOrder;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Api-Key'] = this.configuration.apiKey('X-Api-Key'); // APIKeyHeader authentication
    }

    const response = await this.request({
      path: `/property/rent/search/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BuildingPropertyListFromJSON(jsonValue)
    );
  }

  /**
   * 建物とそれに紐づく物件の一覧を取得する（賃貸）  建物ごとにグルーピングした形式で、検索条件に合致する部屋区画の一覧情報を返す。 レスポンス形式のイメージは以下のようになる。  ``` 建物A -- 区画a       |- 区画b       |- 区画c 建物B -- 区画d       |- 区画e ```
   * Search Rent Property
   */
  async searchRentPropertyByBuilding(
    requestParameters: SearchRentPropertyByBuildingRequest
  ): Promise<BuildingPropertyList> {
    const response = await this.searchRentPropertyByBuildingRaw(
      requestParameters
    );
    return await response.value();
  }

  /**
   * 区画単位での物件一覧を取得する(賃貸)  区画ごとに検索条件に合致する部屋区画の一覧情報を返す。 レスポンス形式のイメージは以下のようになる。   ``` 区画a -- 建物A 区画b -- 建物A 区画c -- 建物A 区画d -- 建物B 区画e -- 建物B ```
   * Search Rent Property Dwelling Unit
   */
  async searchRentPropertyByDwellingUnitRaw(
    requestParameters: SearchRentPropertyByDwellingUnitRequest
  ): Promise<runtime.ApiResponse<PropertyList>> {
    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.startIndex !== undefined) {
      queryParameters['start_index'] = requestParameters.startIndex;
    }

    if (requestParameters.itemsPerPage !== undefined) {
      queryParameters['items_per_page'] = requestParameters.itemsPerPage;
    }

    if (requestParameters.baitaiCode !== undefined) {
      queryParameters['baitai_code'] = requestParameters.baitaiCode;
    }

    if (requestParameters.propertyFullKey) {
      queryParameters['property_full_key'] = requestParameters.propertyFullKey;
    }

    if (requestParameters.propertyUseCode) {
      queryParameters['property_use_code'] = requestParameters.propertyUseCode;
    }

    if (requestParameters.propertyTypeCode) {
      queryParameters['property_type_code'] =
        requestParameters.propertyTypeCode;
    }

    if (requestParameters.newUsedCode !== undefined) {
      queryParameters['new_used_code'] = requestParameters.newUsedCode;
    }

    if (requestParameters.residenceRentPeriodCode !== undefined) {
      queryParameters['residence_rent_period_code'] =
        requestParameters.residenceRentPeriodCode;
    }

    if (requestParameters.layoutText) {
      queryParameters['layout_text'] = requestParameters.layoutText;
    }

    if (requestParameters.layoutTypeCode) {
      queryParameters['layout_type_code'] = requestParameters.layoutTypeCode;
    }

    if (requestParameters.isLargerThan5k !== undefined) {
      queryParameters['is_larger_than_5k'] = requestParameters.isLargerThan5k;
    }

    if (requestParameters.layoutCode) {
      queryParameters['layout_code'] = requestParameters.layoutCode;
    }

    if (requestParameters.isNowAvailable !== undefined) {
      queryParameters['is_now_available'] = requestParameters.isNowAvailable;
    }

    if (requestParameters.availableCode) {
      queryParameters['available_code'] = requestParameters.availableCode;
    }

    if (requestParameters.rentTransactionFormCode) {
      queryParameters['rent_transaction_form_code'] =
        requestParameters.rentTransactionFormCode;
    }

    if (requestParameters.studentRestrictionCode) {
      queryParameters['student_restriction_code'] =
        requestParameters.studentRestrictionCode;
    }

    if (requestParameters.genderRestrictionCode) {
      queryParameters['gender_restriction_code'] =
        requestParameters.genderRestrictionCode;
    }

    if (requestParameters.kidsRestrictionCode) {
      queryParameters['kids_restriction_code'] =
        requestParameters.kidsRestrictionCode;
    }

    if (requestParameters.onePersonRestrictionCode) {
      queryParameters['one_person_restriction_code'] =
        requestParameters.onePersonRestrictionCode;
    }

    if (requestParameters.twoPersonsRestrictionCode) {
      queryParameters['two_persons_restriction_code'] =
        requestParameters.twoPersonsRestrictionCode;
    }

    if (requestParameters.elderRestrictionCode) {
      queryParameters['elder_restriction_code'] =
        requestParameters.elderRestrictionCode;
    }

    if (requestParameters.manageCostFreeCode) {
      queryParameters['manage_cost_free_code'] =
        requestParameters.manageCostFreeCode;
    }

    if (requestParameters.serviceFeeFreeCode) {
      queryParameters['service_fee_free_code'] =
        requestParameters.serviceFeeFreeCode;
    }

    if (requestParameters.miscExpenseFreeCode) {
      queryParameters['misc_expense_free_code'] =
        requestParameters.miscExpenseFreeCode;
    }

    if (requestParameters.otherInitialCostFreeFlag !== undefined) {
      queryParameters['other_initial_cost_free_flag'] =
        requestParameters.otherInitialCostFreeFlag;
    }

    if (requestParameters.petRestrictionCode) {
      queryParameters['pet_restriction_code'] =
        requestParameters.petRestrictionCode;
    }

    if (requestParameters.officeUsageRestrictionCode) {
      queryParameters['office_usage_restriction_code'] =
        requestParameters.officeUsageRestrictionCode;
    }

    if (requestParameters.corporateContractRestrictionCode) {
      queryParameters['corporate_contract_restriction_code'] =
        requestParameters.corporateContractRestrictionCode;
    }

    if (requestParameters.musicalInstrumentRestrictionCode) {
      queryParameters['musical_instrument_restriction_code'] =
        requestParameters.musicalInstrumentRestrictionCode;
    }

    if (requestParameters.restaurantUsageRestrictionCode) {
      queryParameters['restaurant_usage_restriction_code'] =
        requestParameters.restaurantUsageRestrictionCode;
    }

    if (requestParameters.roomSharingRestrictionCode) {
      queryParameters['room_sharing_restriction_code'] =
        requestParameters.roomSharingRestrictionCode;
    }

    if (requestParameters.foreignerRestrictionCode) {
      queryParameters['foreigner_restriction_code'] =
        requestParameters.foreignerRestrictionCode;
    }

    if (requestParameters.friendsRestrictionCode) {
      queryParameters['friends_restriction_code'] =
        requestParameters.friendsRestrictionCode;
    }

    if (requestParameters.foreignStudentRestrictionCode) {
      queryParameters['foreign_student_restriction_code'] =
        requestParameters.foreignStudentRestrictionCode;
    }

    if (requestParameters.parkingAvailabilityCode) {
      queryParameters['parking_availability_code'] =
        requestParameters.parkingAvailabilityCode;
    }

    if (requestParameters.gasCode) {
      queryParameters['gas_code'] = requestParameters.gasCode;
    }

    if (requestParameters.initialCostCode) {
      queryParameters['initial_cost_code'] = requestParameters.initialCostCode;
    }

    if (requestParameters.guarantorRequirementsCode) {
      queryParameters['guarantor_requirements_code'] =
        requestParameters.guarantorRequirementsCode;
    }

    if (requestParameters.hasInsurance !== undefined) {
      queryParameters['has_insurance'] = requestParameters.hasInsurance;
    }

    if (requestParameters.depositForStudentCode) {
      queryParameters['deposit_for_student_code'] =
        requestParameters.depositForStudentCode;
    }

    if (requestParameters.itJusetsuFlag !== undefined) {
      queryParameters['it_jusetsu_flag'] = requestParameters.itJusetsuFlag;
    }

    if (requestParameters.noGuarantorFlag !== undefined) {
      queryParameters['no_guarantor_flag'] = requestParameters.noGuarantorFlag;
    }

    if (requestParameters.isTokuyuchin !== undefined) {
      queryParameters['is_tokuyuchin'] = requestParameters.isTokuyuchin;
    }

    if (requestParameters.freeRentFlag !== undefined) {
      queryParameters['free_rent_flag'] = requestParameters.freeRentFlag;
    }

    if (requestParameters.managerFlag !== undefined) {
      queryParameters['manager_flag'] = requestParameters.managerFlag;
    }

    if (requestParameters.hasMotorbikeParking !== undefined) {
      queryParameters['has_motorbike_parking'] =
        requestParameters.hasMotorbikeParking;
    }

    if (requestParameters.hasBikeParking !== undefined) {
      queryParameters['has_bike_parking'] = requestParameters.hasBikeParking;
    }

    if (requestParameters.panoramaFlag !== undefined) {
      queryParameters['panorama_flag'] = requestParameters.panoramaFlag;
    }

    if (requestParameters.floorPlanFlag !== undefined) {
      queryParameters['floor_plan_flag'] = requestParameters.floorPlanFlag;
    }

    if (requestParameters.hasExteriorImage !== undefined) {
      queryParameters['has_exterior_image'] =
        requestParameters.hasExteriorImage;
    }

    if (requestParameters.b2bCustomFlag !== undefined) {
      queryParameters['b2b_custom_flag'] = requestParameters.b2bCustomFlag;
    }

    if (requestParameters.isFurnished !== undefined) {
      queryParameters['is_furnished'] = requestParameters.isFurnished;
    }

    if (requestParameters.hasAppliances !== undefined) {
      queryParameters['has_appliances'] = requestParameters.hasAppliances;
    }

    if (requestParameters.isNetFree !== undefined) {
      queryParameters['is_net_free'] = requestParameters.isNetFree;
    }

    if (requestParameters.isOver2f !== undefined) {
      queryParameters['is_over_2f'] = requestParameters.isOver2f;
    }

    if (requestParameters.isBathToiletSeparate !== undefined) {
      queryParameters['is_bath_toilet_separate'] =
        requestParameters.isBathToiletSeparate;
    }

    if (requestParameters.hasAircon !== undefined) {
      queryParameters['has_aircon'] = requestParameters.hasAircon;
    }

    if (requestParameters.hasAutoLock !== undefined) {
      queryParameters['has_auto_lock'] = requestParameters.hasAutoLock;
    }

    if (requestParameters.hasDeliveryBox !== undefined) {
      queryParameters['has_delivery_box'] = requestParameters.hasDeliveryBox;
    }

    if (requestParameters.hasElevator !== undefined) {
      queryParameters['has_elevator'] = requestParameters.hasElevator;
    }

    if (requestParameters.hasLandryRoom !== undefined) {
      queryParameters['has_landry_room'] = requestParameters.hasLandryRoom;
    }

    if (requestParameters.isFlooring !== undefined) {
      queryParameters['is_flooring'] = requestParameters.isFlooring;
    }

    if (requestParameters.isDesignersApartment !== undefined) {
      queryParameters['is_designers_apartment'] =
        requestParameters.isDesignersApartment;
    }

    if (requestParameters.isBarrierFree !== undefined) {
      queryParameters['is_barrier_free'] = requestParameters.isBarrierFree;
    }

    if (requestParameters.isSouthFacing !== undefined) {
      queryParameters['is_south_facing'] = requestParameters.isSouthFacing;
    }

    if (requestParameters.isHighestFloor !== undefined) {
      queryParameters['is_highest_floor'] = requestParameters.isHighestFloor;
    }

    if (requestParameters.isCornerRoom !== undefined) {
      queryParameters['is_corner_room'] = requestParameters.isCornerRoom;
    }

    if (requestParameters.hasSystemKitchen !== undefined) {
      queryParameters['has_system_kitchen'] =
        requestParameters.hasSystemKitchen;
    }

    if (requestParameters.hasIhStove !== undefined) {
      queryParameters['has_ih_stove'] = requestParameters.hasIhStove;
    }

    if (requestParameters.hasGasStove !== undefined) {
      queryParameters['has_gas_stove'] = requestParameters.hasGasStove;
    }

    if (requestParameters.hasMultipleGasStove !== undefined) {
      queryParameters['has_multiple_gas_stove'] =
        requestParameters.hasMultipleGasStove;
    }

    if (requestParameters.hasReboilBath !== undefined) {
      queryParameters['has_reboil_bath'] = requestParameters.hasReboilBath;
    }

    if (requestParameters.hasWashlet !== undefined) {
      queryParameters['has_washlet'] = requestParameters.hasWashlet;
    }

    if (requestParameters.hasBathDryer !== undefined) {
      queryParameters['has_bath_dryer'] = requestParameters.hasBathDryer;
    }

    if (requestParameters.hasFloorHeating !== undefined) {
      queryParameters['has_floor_heating'] = requestParameters.hasFloorHeating;
    }

    if (requestParameters.hasCloset !== undefined) {
      queryParameters['has_closet'] = requestParameters.hasCloset;
    }

    if (requestParameters.hasWalkInCloset !== undefined) {
      queryParameters['has_walk_in_closet'] = requestParameters.hasWalkInCloset;
    }

    if (requestParameters.hasCatv !== undefined) {
      queryParameters['has_catv'] = requestParameters.hasCatv;
    }

    if (requestParameters.hasCs !== undefined) {
      queryParameters['has_cs'] = requestParameters.hasCs;
    }

    if (requestParameters.hasBs !== undefined) {
      queryParameters['has_bs'] = requestParameters.hasBs;
    }

    if (requestParameters.hasOpticalFiber !== undefined) {
      queryParameters['has_optical_fiber'] = requestParameters.hasOpticalFiber;
    }

    if (requestParameters.isAllElectric !== undefined) {
      queryParameters['is_all_electric'] = requestParameters.isAllElectric;
    }

    if (requestParameters.hasVerandaBalcony !== undefined) {
      queryParameters['has_veranda_balcony'] =
        requestParameters.hasVerandaBalcony;
    }

    if (requestParameters.isMaisonette !== undefined) {
      queryParameters['is_maisonette'] = requestParameters.isMaisonette;
    }

    if (requestParameters.hasLoft !== undefined) {
      queryParameters['has_loft'] = requestParameters.hasLoft;
    }

    if (requestParameters.hasSoundproof !== undefined) {
      queryParameters['has_soundproof'] = requestParameters.hasSoundproof;
    }

    if (requestParameters.hasCounterKitchen !== undefined) {
      queryParameters['has_counter_kitchen'] =
        requestParameters.hasCounterKitchen;
    }

    if (requestParameters.hasGarbageCollectionSite !== undefined) {
      queryParameters['has_garbage_collection_site'] =
        requestParameters.hasGarbageCollectionSite;
    }

    if (requestParameters.hasOwnYard !== undefined) {
      queryParameters['has_own_yard'] = requestParameters.hasOwnYard;
    }

    if (requestParameters.isQuakeResistantStructure !== undefined) {
      queryParameters['is_quake_resistant_structure'] =
        requestParameters.isQuakeResistantStructure;
    }

    if (requestParameters.isQuakeAbsorbingStructure !== undefined) {
      queryParameters['is_quake_absorbing_structure'] =
        requestParameters.isQuakeAbsorbingStructure;
    }

    if (requestParameters.isDampingStructure !== undefined) {
      queryParameters['is_damping_structure'] =
        requestParameters.isDampingStructure;
    }

    if (requestParameters.hasTvIntercom !== undefined) {
      queryParameters['has_tv_intercom'] = requestParameters.hasTvIntercom;
    }

    if (requestParameters.hasSecurityCamera !== undefined) {
      queryParameters['has_security_camera'] =
        requestParameters.hasSecurityCamera;
    }

    if (requestParameters.isInternetAvailable !== undefined) {
      queryParameters['is_internet_available'] =
        requestParameters.isInternetAvailable;
    }

    if (requestParameters.hasTrunkRoom !== undefined) {
      queryParameters['has_trunk_room'] = requestParameters.hasTrunkRoom;
    }

    if (requestParameters.isCondominium !== undefined) {
      queryParameters['is_condominium'] = requestParameters.isCondominium;
    }

    if (requestParameters.isTowerApartment !== undefined) {
      queryParameters['is_tower_apartment'] =
        requestParameters.isTowerApartment;
    }

    if (requestParameters.isRenovated !== undefined) {
      queryParameters['is_renovated'] = requestParameters.isRenovated;
    }

    if (requestParameters.hasWashroom !== undefined) {
      queryParameters['has_washroom'] = requestParameters.hasWashroom;
    }

    if (requestParameters.buildingAgeFrom !== undefined) {
      queryParameters['building_age.from'] = requestParameters.buildingAgeFrom;
    }

    if (requestParameters.buildingAgeTo !== undefined) {
      queryParameters['building_age.to'] = requestParameters.buildingAgeTo;
    }

    if (requestParameters.priceFrom !== undefined) {
      queryParameters['price.from'] = requestParameters.priceFrom;
    }

    if (requestParameters.priceTo !== undefined) {
      queryParameters['price.to'] = requestParameters.priceTo;
    }

    if (requestParameters.manageCostYenFrom !== undefined) {
      queryParameters['manage_cost_yen.from'] =
        requestParameters.manageCostYenFrom;
    }

    if (requestParameters.manageCostYenTo !== undefined) {
      queryParameters['manage_cost_yen.to'] = requestParameters.manageCostYenTo;
    }

    if (requestParameters.depositYenFrom !== undefined) {
      queryParameters['deposit_yen.from'] = requestParameters.depositYenFrom;
    }

    if (requestParameters.depositYenTo !== undefined) {
      queryParameters['deposit_yen.to'] = requestParameters.depositYenTo;
    }

    if (requestParameters.depositMonthFrom !== undefined) {
      queryParameters['deposit_month.from'] =
        requestParameters.depositMonthFrom;
    }

    if (requestParameters.depositMonthTo !== undefined) {
      queryParameters['deposit_month.to'] = requestParameters.depositMonthTo;
    }

    if (requestParameters.keyMoneyYenFrom !== undefined) {
      queryParameters['key_money_yen.from'] = requestParameters.keyMoneyYenFrom;
    }

    if (requestParameters.keyMoneyYenTo !== undefined) {
      queryParameters['key_money_yen.to'] = requestParameters.keyMoneyYenTo;
    }

    if (requestParameters.keyMoneyMonthFrom !== undefined) {
      queryParameters['key_money_month.from'] =
        requestParameters.keyMoneyMonthFrom;
    }

    if (requestParameters.keyMoneyMonthTo !== undefined) {
      queryParameters['key_money_month.to'] = requestParameters.keyMoneyMonthTo;
    }

    if (requestParameters.repairCostYenFrom !== undefined) {
      queryParameters['repair_cost_yen.from'] =
        requestParameters.repairCostYenFrom;
    }

    if (requestParameters.repairCostYenTo !== undefined) {
      queryParameters['repair_cost_yen.to'] = requestParameters.repairCostYenTo;
    }

    if (requestParameters.repairCostMonthFrom !== undefined) {
      queryParameters['repair_cost_month.from'] =
        requestParameters.repairCostMonthFrom;
    }

    if (requestParameters.repairCostMonthTo !== undefined) {
      queryParameters['repair_cost_month.to'] =
        requestParameters.repairCostMonthTo;
    }

    if (requestParameters.initialCostFrom !== undefined) {
      queryParameters['initial_cost.from'] = requestParameters.initialCostFrom;
    }

    if (requestParameters.initialCostTo !== undefined) {
      queryParameters['initial_cost.to'] = requestParameters.initialCostTo;
    }

    if (requestParameters.monthlyCostSummaryFrom !== undefined) {
      queryParameters['monthly_cost_summary.from'] =
        requestParameters.monthlyCostSummaryFrom;
    }

    if (requestParameters.monthlyCostSummaryTo !== undefined) {
      queryParameters['monthly_cost_summary.to'] =
        requestParameters.monthlyCostSummaryTo;
    }

    if (requestParameters.advertisingFeePercentTo !== undefined) {
      queryParameters['advertising_fee_percent.to'] =
        requestParameters.advertisingFeePercentTo;
    }

    if (requestParameters.advertisingFeePercentFrom !== undefined) {
      queryParameters['advertising_fee_percent.from'] =
        requestParameters.advertisingFeePercentFrom;
    }

    if (requestParameters.areaFrom !== undefined) {
      queryParameters['area.from'] = requestParameters.areaFrom;
    }

    if (requestParameters.areaTo !== undefined) {
      queryParameters['area.to'] = requestParameters.areaTo;
    }

    if (requestParameters.exclusiveAreaFrom !== undefined) {
      queryParameters['exclusive_area.from'] =
        requestParameters.exclusiveAreaFrom;
    }

    if (requestParameters.exclusiveAreaTo !== undefined) {
      queryParameters['exclusive_area.to'] = requestParameters.exclusiveAreaTo;
    }

    if (requestParameters.walkFromStationMinutesFrom !== undefined) {
      queryParameters['walk_from_station_minutes.from'] =
        requestParameters.walkFromStationMinutesFrom;
    }

    if (requestParameters.walkFromStationMinutesTo !== undefined) {
      queryParameters['walk_from_station_minutes.to'] =
        requestParameters.walkFromStationMinutesTo;
    }

    if (requestParameters.lastUpdateDatetimeFrom !== undefined) {
      queryParameters['last_update_datetime.from'] = (
        requestParameters.lastUpdateDatetimeFrom as any
      ).toISOString();
    }

    if (requestParameters.lastUpdateDatetimeTo !== undefined) {
      queryParameters['last_update_datetime.to'] = (
        requestParameters.lastUpdateDatetimeTo as any
      ).toISOString();
    }

    if (requestParameters.publishedDatetimeFrom !== undefined) {
      queryParameters['published_datetime.from'] = (
        requestParameters.publishedDatetimeFrom as any
      ).toISOString();
    }

    if (requestParameters.publishedDatetimeTo !== undefined) {
      queryParameters['published_datetime.to'] = (
        requestParameters.publishedDatetimeTo as any
      ).toISOString();
    }

    if (requestParameters.priceUpdateDateFrom !== undefined) {
      queryParameters['price_update_date.from'] = (
        requestParameters.priceUpdateDateFrom as any
      ).toISOString();
    }

    if (requestParameters.priceUpdateDateTo !== undefined) {
      queryParameters['price_update_date.to'] = (
        requestParameters.priceUpdateDateTo as any
      ).toISOString();
    }

    if (requestParameters.advertisingFeeUpdateDateFrom !== undefined) {
      queryParameters['advertising_fee_update_date.from'] = (
        requestParameters.advertisingFeeUpdateDateFrom as any
      ).toISOString();
    }

    if (requestParameters.advertisingFeeUpdateDateTo !== undefined) {
      queryParameters['advertising_fee_update_date.to'] = (
        requestParameters.advertisingFeeUpdateDateTo as any
      ).toISOString();
    }

    if (requestParameters.originalPropertyCodeText !== undefined) {
      queryParameters['original_property_code_text'] =
        requestParameters.originalPropertyCodeText;
    }

    if (requestParameters.buildingGuid) {
      queryParameters['building_guid'] = requestParameters.buildingGuid;
    }

    if (requestParameters.buildingTypeCode) {
      queryParameters['building_type_code'] =
        requestParameters.buildingTypeCode;
    }

    if (requestParameters.structureCode) {
      queryParameters['structure_code'] = requestParameters.structureCode;
    }

    if (requestParameters.siteAreaFrom !== undefined) {
      queryParameters['site_area.from'] = requestParameters.siteAreaFrom;
    }

    if (requestParameters.siteAreaTo !== undefined) {
      queryParameters['site_area.to'] = requestParameters.siteAreaTo;
    }

    if (requestParameters.buildingName !== undefined) {
      queryParameters['building_name'] = requestParameters.buildingName;
    }

    if (requestParameters.buildingFurigana !== undefined) {
      queryParameters['building_furigana'] = requestParameters.buildingFurigana;
    }

    if (requestParameters.tagGuid) {
      queryParameters['tag_guid'] = requestParameters.tagGuid;
    }

    if (requestParameters.prefecture !== undefined) {
      queryParameters['prefecture'] = requestParameters.prefecture;
    }

    if (requestParameters.prefectureCode) {
      queryParameters['prefecture_code'] = requestParameters.prefectureCode;
    }

    if (requestParameters.city) {
      queryParameters['city'] = requestParameters.city;
    }

    if (requestParameters.cityCode) {
      queryParameters['city_code'] = requestParameters.cityCode;
    }

    if (requestParameters.town) {
      queryParameters['town'] = requestParameters.town;
    }

    if (requestParameters.jisCode) {
      queryParameters['jis_code'] = requestParameters.jisCode;
    }

    if (requestParameters.address) {
      queryParameters['address'] = requestParameters.address;
    }

    if (requestParameters.lineCode) {
      queryParameters['line_code'] = requestParameters.lineCode;
    }

    if (requestParameters.stationCode) {
      queryParameters['station_code'] = requestParameters.stationCode;
    }

    if (requestParameters.customerKey) {
      queryParameters['customer_key'] = requestParameters.customerKey;
    }

    if (requestParameters.ignorePublishStatus !== undefined) {
      queryParameters['ignore_publish_status'] =
        requestParameters.ignorePublishStatus;
    }

    if (requestParameters.nameOrCodeText !== undefined) {
      queryParameters['name_or_code_text'] = requestParameters.nameOrCodeText;
    }

    if (requestParameters.ignoreNameDisplay !== undefined) {
      queryParameters['ignore_name_display'] =
        requestParameters.ignoreNameDisplay;
    }

    if (requestParameters.query !== undefined) {
      queryParameters['query'] = requestParameters.query;
    }

    if (requestParameters.order !== undefined) {
      queryParameters['order'] = requestParameters.order;
    }

    if (requestParameters.propertyFullKeyOrder !== undefined) {
      queryParameters['property_full_key.order'] =
        requestParameters.propertyFullKeyOrder;
    }

    if (requestParameters.propertyClassCodeOrder !== undefined) {
      queryParameters['property_class_code.order'] =
        requestParameters.propertyClassCodeOrder;
    }

    if (requestParameters.propertyUseCodeOrder !== undefined) {
      queryParameters['property_use_code.order'] =
        requestParameters.propertyUseCodeOrder;
    }

    if (requestParameters.propertyTypeCodeOrder !== undefined) {
      queryParameters['property_type_code.order'] =
        requestParameters.propertyTypeCodeOrder;
    }

    if (requestParameters.modifiedOrder !== undefined) {
      queryParameters['modified.order'] = requestParameters.modifiedOrder;
    }

    if (requestParameters.lastUpdateDatetimeOrder !== undefined) {
      queryParameters['last_update_datetime.order'] =
        requestParameters.lastUpdateDatetimeOrder;
    }

    if (requestParameters.layoutOrder !== undefined) {
      queryParameters['layout.order'] = requestParameters.layoutOrder;
    }

    if (requestParameters.buildingAgeOrder !== undefined) {
      queryParameters['building_age.order'] =
        requestParameters.buildingAgeOrder;
    }

    if (requestParameters.stationOrder !== undefined) {
      queryParameters['station.order'] = requestParameters.stationOrder;
    }

    if (requestParameters.stationNameOrder !== undefined) {
      queryParameters['station_name.order'] =
        requestParameters.stationNameOrder;
    }

    if (requestParameters.lineOrder !== undefined) {
      queryParameters['line.order'] = requestParameters.lineOrder;
    }

    if (requestParameters.lineNameOrder !== undefined) {
      queryParameters['line_name.order'] = requestParameters.lineNameOrder;
    }

    if (requestParameters.walkFromStationMinutesOrder !== undefined) {
      queryParameters['walk_from_station_minutes.order'] =
        requestParameters.walkFromStationMinutesOrder;
    }

    if (requestParameters.addressOrder !== undefined) {
      queryParameters['address.order'] = requestParameters.addressOrder;
    }

    if (requestParameters.searchAreaOrder !== undefined) {
      queryParameters['search_area.order'] = requestParameters.searchAreaOrder;
    }

    if (requestParameters.exclusiveAreaOrder !== undefined) {
      queryParameters['exclusive_area.order'] =
        requestParameters.exclusiveAreaOrder;
    }

    if (requestParameters.buildingNameOrder !== undefined) {
      queryParameters['building_name.order'] =
        requestParameters.buildingNameOrder;
    }

    if (requestParameters.buildingFuriganaOrder !== undefined) {
      queryParameters['building_furigana.order'] =
        requestParameters.buildingFuriganaOrder;
    }

    if (requestParameters.depositPriceOrder !== undefined) {
      queryParameters['deposit_price.order'] =
        requestParameters.depositPriceOrder;
    }

    if (requestParameters.keyMoneyPriceOrder !== undefined) {
      queryParameters['key_money_price.order'] =
        requestParameters.keyMoneyPriceOrder;
    }

    if (requestParameters.manageCostPriceOrder !== undefined) {
      queryParameters['manage_cost_price.order'] =
        requestParameters.manageCostPriceOrder;
    }

    if (requestParameters.advertisingFeePercentOrder !== undefined) {
      queryParameters['advertising_fee_percent.order'] =
        requestParameters.advertisingFeePercentOrder;
    }

    if (requestParameters.advertiseFlagOrder !== undefined) {
      queryParameters['advertise_flag.order'] =
        requestParameters.advertiseFlagOrder;
    }

    if (requestParameters.floorNumberOrder !== undefined) {
      queryParameters['floor_number.order'] =
        requestParameters.floorNumberOrder;
    }

    if (requestParameters.availableDateOrder !== undefined) {
      queryParameters['available_date.order'] =
        requestParameters.availableDateOrder;
    }

    if (requestParameters.priceOrder !== undefined) {
      queryParameters['price.order'] = requestParameters.priceOrder;
    }

    if (requestParameters.initialCostOrder !== undefined) {
      queryParameters['initial_cost.order'] =
        requestParameters.initialCostOrder;
    }

    if (requestParameters.monthlyCostSummaryOrder !== undefined) {
      queryParameters['monthly_cost_summary.order'] =
        requestParameters.monthlyCostSummaryOrder;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Api-Key'] = this.configuration.apiKey('X-Api-Key'); // APIKeyHeader authentication
    }

    const response = await this.request({
      path: `/property/rent/dwelling_unit/search/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PropertyListFromJSON(jsonValue)
    );
  }

  /**
   * 区画単位での物件一覧を取得する(賃貸)  区画ごとに検索条件に合致する部屋区画の一覧情報を返す。 レスポンス形式のイメージは以下のようになる。   ``` 区画a -- 建物A 区画b -- 建物A 区画c -- 建物A 区画d -- 建物B 区画e -- 建物B ```
   * Search Rent Property Dwelling Unit
   */
  async searchRentPropertyByDwellingUnit(
    requestParameters: SearchRentPropertyByDwellingUnitRequest
  ): Promise<PropertyList> {
    const response = await this.searchRentPropertyByDwellingUnitRaw(
      requestParameters
    );
    return await response.value();
  }
}
