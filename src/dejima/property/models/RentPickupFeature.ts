/* tslint:disable */
/* eslint-disable */
/**
 * ES 物件API
 * （株）いい生活 が提供予定の 物件情報API のインターフェイス仕様書  いい物件Oneに登録した賃貸物件情報を参照する物件参照API仕様について定める。  ※1: 開発中のため、実際のリリース時の仕様は異なる場合がございます。  ※2: 売買物件に関する仕様に関してはα版であり、今後大きな仕様の見直しを行う可能性がございます。  ## リソース仕様  ### 通信仕様  HTTP/2 および HTTP/1.1 をサポートする。通信はTLSで暗号化されたHTTPSのみを許可する。  ### リクエストヘッダ  リクエストヘッダには以下の指定を必須とする。  | No. | リクエストヘッダのフィールド名 | 指定値 | |:---:|:-------------------------------|:-------| | 1 | Accept | application/json | | 2 | X-Api-Key | 弊社が指定するキー。ご利用のお客様を特定するためのもの。 |  Acceptヘッダには、常にapplication/json を指定する。 これにより、レスポンスがJSONであることを指示する。  ### データフォーマットと文字コード  データフォーマットはJSON、文字コードはUTF-8とする。  ### データ型  通常のJSONの型以外に擬似型としていくつかのデータ型を用意している。 これは、JSON標準では表現しきれないデータや、不動産特有のデータを扱うために定義したもので使用する。 また、ここに記載の無いデータ型については、 OpenAPI Specification (Version 3.0.2) の DataTypes に準拠する。  * [DataTypes](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#data-types)   | No. | 型 | 説明 | |:---:|:---|:-----| | 1 | string | JSON標準の文字列 | | 2 | int | JSON標準の整数 | | 3 | float | JSON標準の浮動小数点数 | | 4 | bool | JSON標準の真偽値 | | 5 | datetime | ISO8611フォーマットの日付時刻を表す文字列。YYYY-MM-DDTHH:MM:SS。 <br> 例: 2015-08-26T19:16:03 = 2015年8月26日19時16分03秒 | | 6 | date | ISO8611フォーマットの日付を表す文字列。YYYY-MM-DD。 <br> 例: 2015-08-26 = 2015年8月26日 | | 7 | datejun | 後述 |  #### datejun型  いい生活独自の日付と旬を表すフォーマット。YYYYMMJDD。  * YYYY: 西暦年 * MM: 月。01～12。ただし00とすることにより、年単位までの精度の数字を表現可能。 * J: 旬。1=上旬、2=中旬、3=下旬。 0とすることで月単位までの精度の数字を表現可能。 * DD: 日。01～31。ただし00とすることにより、旬単位までの精度の数字を表現可能。日単位の精度の場合、1～10日までは旬を1、11～20日までは旬を2、21日以降は旬を3と指定する必要がある。 * 例:     * 201900000 = 2019年     * 201901000 = 2019年1月     * 201903100 = 2019年3月上旬     * 201912300 = 2019年12月下旬     * 201906105 = 2019年6月5日     * 201908216 = 2019年8月16日  ## 検索パラメータ  ### OR 検索  パラメータタイプが `array` のキーについては、クエリパラメータで複数指定を行った場合、 指定された値のいずれかに一致する対象を検索する（ OR 検索）。  ex) `?layout_type_code=1&layout_type_code=2`  ### ソート順  `*.order` という名前のパラメータでソート順を指定可能。ascを指定したとき昇順、descを指定したとき降順となる。  ex) `?price.order=desc`  基本的にソート順は一つだけ指定する。
 *
 * The version of the OpenAPI document: 6.1.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * こだわり条件
 * @export
 * @interface RentPickupFeature
 */
export interface RentPickupFeature {
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  isFurnished?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasAppliances?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  isNetFree?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  isOver2f?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  isBathToiletSeparate?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasAircon?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasAutoLock?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasElevator?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasLandryRoom?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  isFlooring?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  isDesignersApartment?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  isBarrierFree?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  isSouthFacing?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  isHighestFloor?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  isCornerRoom?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasSystemKitchen?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasIhStove?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasGasStove?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasMultipleGasStove?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasReboilBath?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasWashlet?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasBathDryer?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasFloorHeating?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasCloset?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasWalkInCloset?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasCatv?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasCs?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasBs?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasOpticalFiber?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  isAllElectric?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasWashroom?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  isNoBuildingInFront?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentPickupFeature
   */
  hasVerandaBalcony?: boolean;
}

export function RentPickupFeatureFromJSON(json: any): RentPickupFeature {
  return RentPickupFeatureFromJSONTyped(json, false);
}

export function RentPickupFeatureFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): RentPickupFeature {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    isFurnished: !exists(json, 'is_furnished')
      ? undefined
      : json['is_furnished'],
    hasAppliances: !exists(json, 'has_appliances')
      ? undefined
      : json['has_appliances'],
    isNetFree: !exists(json, 'is_net_free') ? undefined : json['is_net_free'],
    isOver2f: !exists(json, 'is_over_2f') ? undefined : json['is_over_2f'],
    isBathToiletSeparate: !exists(json, 'is_bath_toilet_separate')
      ? undefined
      : json['is_bath_toilet_separate'],
    hasAircon: !exists(json, 'has_aircon') ? undefined : json['has_aircon'],
    hasAutoLock: !exists(json, 'has_auto_lock')
      ? undefined
      : json['has_auto_lock'],
    hasElevator: !exists(json, 'has_elevator')
      ? undefined
      : json['has_elevator'],
    hasLandryRoom: !exists(json, 'has_landry_room')
      ? undefined
      : json['has_landry_room'],
    isFlooring: !exists(json, 'is_flooring') ? undefined : json['is_flooring'],
    isDesignersApartment: !exists(json, 'is_designers_apartment')
      ? undefined
      : json['is_designers_apartment'],
    isBarrierFree: !exists(json, 'is_barrier_free')
      ? undefined
      : json['is_barrier_free'],
    isSouthFacing: !exists(json, 'is_south_facing')
      ? undefined
      : json['is_south_facing'],
    isHighestFloor: !exists(json, 'is_highest_floor')
      ? undefined
      : json['is_highest_floor'],
    isCornerRoom: !exists(json, 'is_corner_room')
      ? undefined
      : json['is_corner_room'],
    hasSystemKitchen: !exists(json, 'has_system_kitchen')
      ? undefined
      : json['has_system_kitchen'],
    hasIhStove: !exists(json, 'has_ih_stove')
      ? undefined
      : json['has_ih_stove'],
    hasGasStove: !exists(json, 'has_gas_stove')
      ? undefined
      : json['has_gas_stove'],
    hasMultipleGasStove: !exists(json, 'has_multiple_gas_stove')
      ? undefined
      : json['has_multiple_gas_stove'],
    hasReboilBath: !exists(json, 'has_reboil_bath')
      ? undefined
      : json['has_reboil_bath'],
    hasWashlet: !exists(json, 'has_washlet') ? undefined : json['has_washlet'],
    hasBathDryer: !exists(json, 'has_bath_dryer')
      ? undefined
      : json['has_bath_dryer'],
    hasFloorHeating: !exists(json, 'has_floor_heating')
      ? undefined
      : json['has_floor_heating'],
    hasCloset: !exists(json, 'has_closet') ? undefined : json['has_closet'],
    hasWalkInCloset: !exists(json, 'has_walk_in_closet')
      ? undefined
      : json['has_walk_in_closet'],
    hasCatv: !exists(json, 'has_catv') ? undefined : json['has_catv'],
    hasCs: !exists(json, 'has_cs') ? undefined : json['has_cs'],
    hasBs: !exists(json, 'has_bs') ? undefined : json['has_bs'],
    hasOpticalFiber: !exists(json, 'has_optical_fiber')
      ? undefined
      : json['has_optical_fiber'],
    isAllElectric: !exists(json, 'is_all_electric')
      ? undefined
      : json['is_all_electric'],
    hasWashroom: !exists(json, 'has_washroom')
      ? undefined
      : json['has_washroom'],
    isNoBuildingInFront: !exists(json, 'is_no_building_in_front')
      ? undefined
      : json['is_no_building_in_front'],
    hasVerandaBalcony: !exists(json, 'has_veranda_balcony')
      ? undefined
      : json['has_veranda_balcony'],
  };
}

export function RentPickupFeatureToJSON(value?: RentPickupFeature | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    is_furnished: value.isFurnished,
    has_appliances: value.hasAppliances,
    is_net_free: value.isNetFree,
    is_over_2f: value.isOver2f,
    is_bath_toilet_separate: value.isBathToiletSeparate,
    has_aircon: value.hasAircon,
    has_auto_lock: value.hasAutoLock,
    has_elevator: value.hasElevator,
    has_landry_room: value.hasLandryRoom,
    is_flooring: value.isFlooring,
    is_designers_apartment: value.isDesignersApartment,
    is_barrier_free: value.isBarrierFree,
    is_south_facing: value.isSouthFacing,
    is_highest_floor: value.isHighestFloor,
    is_corner_room: value.isCornerRoom,
    has_system_kitchen: value.hasSystemKitchen,
    has_ih_stove: value.hasIhStove,
    has_gas_stove: value.hasGasStove,
    has_multiple_gas_stove: value.hasMultipleGasStove,
    has_reboil_bath: value.hasReboilBath,
    has_washlet: value.hasWashlet,
    has_bath_dryer: value.hasBathDryer,
    has_floor_heating: value.hasFloorHeating,
    has_closet: value.hasCloset,
    has_walk_in_closet: value.hasWalkInCloset,
    has_catv: value.hasCatv,
    has_cs: value.hasCs,
    has_bs: value.hasBs,
    has_optical_fiber: value.hasOpticalFiber,
    is_all_electric: value.isAllElectric,
    has_washroom: value.hasWashroom,
    is_no_building_in_front: value.isNoBuildingInFront,
    has_veranda_balcony: value.hasVerandaBalcony,
  };
}
