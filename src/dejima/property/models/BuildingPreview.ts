/* tslint:disable */
/* eslint-disable */
/**
 * ES 物件API
 * （株）いい生活 が提供予定の 物件情報API のインターフェイス仕様書  いい物件Oneに登録した賃貸物件情報を参照する物件参照API仕様について定める。  ※1: 開発中のため、実際のリリース時の仕様は異なる場合がございます。  ※2: 売買物件に関する仕様に関してはα版であり、今後大きな仕様の見直しを行う可能性がございます。  ## リソース仕様  ### 通信仕様  HTTP/2 および HTTP/1.1 をサポートする。通信はTLSで暗号化されたHTTPSのみを許可する。  ### リクエストヘッダ  リクエストヘッダには以下の指定を必須とする。  | No. | リクエストヘッダのフィールド名 | 指定値 | |:---:|:-------------------------------|:-------| | 1 | Accept | application/json | | 2 | X-Api-Key | 弊社が指定するキー。ご利用のお客様を特定するためのもの。 |  Acceptヘッダには、常にapplication/json を指定する。 これにより、レスポンスがJSONであることを指示する。  ### データフォーマットと文字コード  データフォーマットはJSON、文字コードはUTF-8とする。  ### データ型  通常のJSONの型以外に擬似型としていくつかのデータ型を用意している。 これは、JSON標準では表現しきれないデータや、不動産特有のデータを扱うために定義したもので使用する。 また、ここに記載の無いデータ型については、 OpenAPI Specification (Version 3.0.2) の DataTypes に準拠する。  * [DataTypes](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#data-types)   | No. | 型 | 説明 | |:---:|:---|:-----| | 1 | string | JSON標準の文字列 | | 2 | int | JSON標準の整数 | | 3 | float | JSON標準の浮動小数点数 | | 4 | bool | JSON標準の真偽値 | | 5 | datetime | ISO8611フォーマットの日付時刻を表す文字列。YYYY-MM-DDTHH:MM:SS。 <br> 例: 2015-08-26T19:16:03 = 2015年8月26日19時16分03秒 | | 6 | date | ISO8611フォーマットの日付を表す文字列。YYYY-MM-DD。 <br> 例: 2015-08-26 = 2015年8月26日 | | 7 | datejun | 後述 |  #### datejun型  いい生活独自の日付と旬を表すフォーマット。YYYYMMJDD。  * YYYY: 西暦年 * MM: 月。01～12。ただし00とすることにより、年単位までの精度の数字を表現可能。 * J: 旬。1=上旬、2=中旬、3=下旬。 0とすることで月単位までの精度の数字を表現可能。 * DD: 日。01～31。ただし00とすることにより、旬単位までの精度の数字を表現可能。日単位の精度の場合、1～10日までは旬を1、11～20日までは旬を2、21日以降は旬を3と指定する必要がある。 * 例:     * 201900000 = 2019年     * 201901000 = 2019年1月     * 201903100 = 2019年3月上旬     * 201912300 = 2019年12月下旬     * 201906105 = 2019年6月5日     * 201908216 = 2019年8月16日  ## 検索パラメータ  ### OR 検索  パラメータタイプが `array` のキーについては、クエリパラメータで複数指定を行った場合、 指定された値のいずれかに一致する対象を検索する（ OR 検索）。  ex) `?layout_type_code=1&layout_type_code=2`  ### ソート順  `*.order` という名前のパラメータでソート順を指定可能。ascを指定したとき昇順、descを指定したとき降順となる。  ex) `?price.order=desc`  基本的にソート順は一つだけ指定する。
 *
 * The version of the OpenAPI document: 6.1.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  AreaWithMeasurementMethod,
  AreaWithMeasurementMethodFromJSON,
  AreaWithMeasurementMethodFromJSONTyped,
  AreaWithMeasurementMethodToJSON,
  DateJun,
  DateJunFromJSON,
  DateJunFromJSONTyped,
  DateJunToJSON,
} from './';

/**
 * 建物概要
 * @export
 * @interface BuildingPreview
 */
export interface BuildingPreview {
  /**
   *
   * @type {string}
   * @memberof BuildingPreview
   */
  readonly buildingGuid?: string;
  /**
   *
   * @type {string}
   * @memberof BuildingPreview
   */
  buildingFurigana?: string;
  /**
   *
   * @type {string}
   * @memberof BuildingPreview
   */
  buildingName: string;
  /**
   *
   * @type {string}
   * @memberof BuildingPreview
   */
  buildingClass?: string;
  /**
   * 1: 戸建<br/>2: 集合住宅<br/>3: 事務所・商業施設<br/>4: 土地<br/>5: 駐車場
   * @type {number}
   * @memberof BuildingPreview
   */
  buildingClassCode?: number;
  /**
   *
   * @type {string}
   * @memberof BuildingPreview
   */
  readonly buildingType: string;
  /**
   * 1: マンション<br/>2: リゾートマンション<br/>3: アパート<br/>4: テラスハウス<br/>5: タウンハウス<br/>6: 戸建<br/>7: 土地<br/>8: 店舗<br/>9: 事務所<br/>10: ビル<br/>11: 倉庫<br/>12: 工場<br/>13: トランクルーム<br/>14: 駐車場<br/>15: バイク置き場<br/>16: その他
   * @type {number}
   * @memberof BuildingPreview
   */
  buildingTypeCode: number;
  /**
   *
   * @type {string}
   * @memberof BuildingPreview
   */
  readonly structure?: string;
  /**
   * 1: 木造<br/>2: 軽量鉄骨<br/>3: 鉄筋コンクリート<br/>4: 鉄骨鉄筋コンクリート<br/>5: ALC<br/>6: プレキャストコンクリート<br/>7: 鉄筋ブロック<br/>8: 鉄骨プレ<br/>9: 鉄骨<br/>10: その他
   * @type {number}
   * @memberof BuildingPreview
   */
  structureCode?: number;
  /**
   *
   * @type {number}
   * @memberof BuildingPreview
   */
  totalUnits?: number;
  /**
   *
   * @type {number}
   * @memberof BuildingPreview
   */
  totalFloors?: number;
  /**
   *
   * @type {number}
   * @memberof BuildingPreview
   */
  groundFloors?: number;
  /**
   *
   * @type {number}
   * @memberof BuildingPreview
   */
  basementFloors?: number;
  /**
   * 竣工年月
   * @type {DateJun}
   * @memberof BuildingPreview
   */
  completionDatejun?: DateJun;
  /**
   * 土地造成完了年月
   * @type {DateJun}
   * @memberof BuildingPreview
   */
  landReclamationDatejun?: DateJun;
  /**
   *
   * @type {number}
   * @memberof BuildingPreview
   */
  coverage?: number;
  /**
   *
   * @type {number}
   * @memberof BuildingPreview
   */
  floorAreaRatio?: number;
  /**
   * 土地面積 単位: 平方メートル 計測方法: 公簿 実測
   * @type {AreaWithMeasurementMethod}
   * @memberof BuildingPreview
   */
  siteArea?: AreaWithMeasurementMethod;
  /**
   * 延床面積 単位: 平方メートル 計測方法: 壁芯 内法 登記簿
   * @type {AreaWithMeasurementMethod}
   * @memberof BuildingPreview
   */
  totalFloorArea?: AreaWithMeasurementMethod;
  /**
   *
   * @type {string}
   * @memberof BuildingPreview
   */
  zipcodeText?: string;
  /**
   *
   * @type {number}
   * @memberof BuildingPreview
   */
  jisCodeValue?: number;
  /**
   *
   * @type {string}
   * @memberof BuildingPreview
   */
  prefecture: string;
  /**
   *
   * @type {number}
   * @memberof BuildingPreview
   */
  prefectureCode: number;
  /**
   *
   * @type {string}
   * @memberof BuildingPreview
   */
  city: string;
  /**
   *
   * @type {number}
   * @memberof BuildingPreview
   */
  cityCode: number;
  /**
   *
   * @type {string}
   * @memberof BuildingPreview
   */
  town: string;
  /**
   *
   * @type {string}
   * @memberof BuildingPreview
   */
  tyoume: string;
  /**
   *
   * @type {string}
   * @memberof BuildingPreview
   */
  addressText?: string;
  /**
   *
   * @type {string}
   * @memberof BuildingPreview
   */
  branchNumberText?: string;
  /**
   *
   * @type {number}
   * @memberof BuildingPreview
   */
  latitude?: number;
  /**
   *
   * @type {number}
   * @memberof BuildingPreview
   */
  longitude?: number;
  /**
   *
   * @type {boolean}
   * @memberof BuildingPreview
   */
  parallel2ParkingFlag: boolean;
  /**
   *
   * @type {boolean}
   * @memberof BuildingPreview
   */
  parallel3ParkingFlag: boolean;
  /**
   *
   * @type {boolean}
   * @memberof BuildingPreview
   */
  hasLargeGarage: boolean;
  /**
   *
   * @type {boolean}
   * @memberof BuildingPreview
   */
  hasVisitorsParking: boolean;
  /**
   *
   * @type {boolean}
   * @memberof BuildingPreview
   */
  hasGarage: boolean;
  /**
   *
   * @type {boolean}
   * @memberof BuildingPreview
   */
  hasDeliveryBox: boolean;
}

export function BuildingPreviewFromJSON(json: any): BuildingPreview {
  return BuildingPreviewFromJSONTyped(json, false);
}

export function BuildingPreviewFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): BuildingPreview {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    buildingGuid: !exists(json, 'building_guid')
      ? undefined
      : json['building_guid'],
    buildingFurigana: !exists(json, 'building_furigana')
      ? undefined
      : json['building_furigana'],
    buildingName: json['building_name'],
    buildingClass: !exists(json, 'building_class')
      ? undefined
      : json['building_class'],
    buildingClassCode: !exists(json, 'building_class_code')
      ? undefined
      : json['building_class_code'],
    buildingType: json['building_type'],
    buildingTypeCode: json['building_type_code'],
    structure: !exists(json, 'structure') ? undefined : json['structure'],
    structureCode: !exists(json, 'structure_code')
      ? undefined
      : json['structure_code'],
    totalUnits: !exists(json, 'total_units') ? undefined : json['total_units'],
    totalFloors: !exists(json, 'total_floors')
      ? undefined
      : json['total_floors'],
    groundFloors: !exists(json, 'ground_floors')
      ? undefined
      : json['ground_floors'],
    basementFloors: !exists(json, 'basement_floors')
      ? undefined
      : json['basement_floors'],
    completionDatejun: !exists(json, 'completion_datejun')
      ? undefined
      : DateJunFromJSON(json['completion_datejun']),
    landReclamationDatejun: !exists(json, 'land_reclamation_datejun')
      ? undefined
      : DateJunFromJSON(json['land_reclamation_datejun']),
    coverage: !exists(json, 'coverage') ? undefined : json['coverage'],
    floorAreaRatio: !exists(json, 'floor_area_ratio')
      ? undefined
      : json['floor_area_ratio'],
    siteArea: !exists(json, 'site_area')
      ? undefined
      : AreaWithMeasurementMethodFromJSON(json['site_area']),
    totalFloorArea: !exists(json, 'total_floor_area')
      ? undefined
      : AreaWithMeasurementMethodFromJSON(json['total_floor_area']),
    zipcodeText: !exists(json, 'zipcode_text')
      ? undefined
      : json['zipcode_text'],
    jisCodeValue: !exists(json, 'jis_code_value')
      ? undefined
      : json['jis_code_value'],
    prefecture: json['prefecture'],
    prefectureCode: json['prefecture_code'],
    city: json['city'],
    cityCode: json['city_code'],
    town: json['town'],
    tyoume: json['tyoume'],
    addressText: !exists(json, 'address_text')
      ? undefined
      : json['address_text'],
    branchNumberText: !exists(json, 'branch_number_text')
      ? undefined
      : json['branch_number_text'],
    latitude: !exists(json, 'latitude') ? undefined : json['latitude'],
    longitude: !exists(json, 'longitude') ? undefined : json['longitude'],
    parallel2ParkingFlag: json['parallel_2_parking_flag'],
    parallel3ParkingFlag: json['parallel_3_parking_flag'],
    hasLargeGarage: json['has_large_garage'],
    hasVisitorsParking: json['has_visitors_parking'],
    hasGarage: json['has_garage'],
    hasDeliveryBox: json['has_delivery_box'],
  };
}

export function BuildingPreviewToJSON(value?: BuildingPreview | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    building_furigana: value.buildingFurigana,
    building_name: value.buildingName,
    building_class: value.buildingClass,
    building_class_code: value.buildingClassCode,
    building_type_code: value.buildingTypeCode,
    structure_code: value.structureCode,
    total_units: value.totalUnits,
    total_floors: value.totalFloors,
    ground_floors: value.groundFloors,
    basement_floors: value.basementFloors,
    completion_datejun: DateJunToJSON(value.completionDatejun),
    land_reclamation_datejun: DateJunToJSON(value.landReclamationDatejun),
    coverage: value.coverage,
    floor_area_ratio: value.floorAreaRatio,
    site_area: AreaWithMeasurementMethodToJSON(value.siteArea),
    total_floor_area: AreaWithMeasurementMethodToJSON(value.totalFloorArea),
    zipcode_text: value.zipcodeText,
    jis_code_value: value.jisCodeValue,
    prefecture: value.prefecture,
    prefecture_code: value.prefectureCode,
    city: value.city,
    city_code: value.cityCode,
    town: value.town,
    tyoume: value.tyoume,
    address_text: value.addressText,
    branch_number_text: value.branchNumberText,
    latitude: value.latitude,
    longitude: value.longitude,
    parallel_2_parking_flag: value.parallel2ParkingFlag,
    parallel_3_parking_flag: value.parallel3ParkingFlag,
    has_large_garage: value.hasLargeGarage,
    has_visitors_parking: value.hasVisitorsParking,
    has_garage: value.hasGarage,
    has_delivery_box: value.hasDeliveryBox,
  };
}
