/* tslint:disable */
/* eslint-disable */
/**
 * ES 物件API
 * （株）いい生活 が提供予定の 物件情報API のインターフェイス仕様書  いい物件Oneに登録した賃貸物件情報を参照する物件参照API仕様について定める。  ※1: 開発中のため、実際のリリース時の仕様は異なる場合がございます。  ※2: 売買物件に関する仕様に関してはα版であり、今後大きな仕様の見直しを行う可能性がございます。  ## リソース仕様  ### 通信仕様  HTTP/2 および HTTP/1.1 をサポートする。通信はTLSで暗号化されたHTTPSのみを許可する。  ### リクエストヘッダ  リクエストヘッダには以下の指定を必須とする。  | No. | リクエストヘッダのフィールド名 | 指定値 | |:---:|:-------------------------------|:-------| | 1 | Accept | application/json | | 2 | X-Api-Key | 弊社が指定するキー。ご利用のお客様を特定するためのもの。 |  Acceptヘッダには、常にapplication/json を指定する。 これにより、レスポンスがJSONであることを指示する。  ### データフォーマットと文字コード  データフォーマットはJSON、文字コードはUTF-8とする。  ### データ型  通常のJSONの型以外に擬似型としていくつかのデータ型を用意している。 これは、JSON標準では表現しきれないデータや、不動産特有のデータを扱うために定義したもので使用する。 また、ここに記載の無いデータ型については、 OpenAPI Specification (Version 3.0.2) の DataTypes に準拠する。  * [DataTypes](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#data-types)   | No. | 型 | 説明 | |:---:|:---|:-----| | 1 | string | JSON標準の文字列 | | 2 | int | JSON標準の整数 | | 3 | float | JSON標準の浮動小数点数 | | 4 | bool | JSON標準の真偽値 | | 5 | datetime | ISO8611フォーマットの日付時刻を表す文字列。YYYY-MM-DDTHH:MM:SS。 <br> 例: 2015-08-26T19:16:03 = 2015年8月26日19時16分03秒 | | 6 | date | ISO8611フォーマットの日付を表す文字列。YYYY-MM-DD。 <br> 例: 2015-08-26 = 2015年8月26日 | | 7 | datejun | 後述 |  #### datejun型  いい生活独自の日付と旬を表すフォーマット。YYYYMMJDD。  * YYYY: 西暦年 * MM: 月。01～12。ただし00とすることにより、年単位までの精度の数字を表現可能。 * J: 旬。1=上旬、2=中旬、3=下旬。 0とすることで月単位までの精度の数字を表現可能。 * DD: 日。01～31。ただし00とすることにより、旬単位までの精度の数字を表現可能。日単位の精度の場合、1～10日までは旬を1、11～20日までは旬を2、21日以降は旬を3と指定する必要がある。 * 例:     * 201900000 = 2019年     * 201901000 = 2019年1月     * 201903100 = 2019年3月上旬     * 201912300 = 2019年12月下旬     * 201906105 = 2019年6月5日     * 201908216 = 2019年8月16日  ## 検索パラメータ  ### OR 検索  パラメータタイプが `array` のキーについては、クエリパラメータで複数指定を行った場合、 指定された値のいずれかに一致する対象を検索する（ OR 検索）。  ex) `?layout_type_code=1&layout_type_code=2`  ### ソート順  `*.order` という名前のパラメータでソート順を指定可能。ascを指定したとき昇順、descを指定したとき降順となる。  ex) `?price.order=desc`  基本的にソート順は一つだけ指定する。
 *
 * The version of the OpenAPI document: 6.1.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  AreaWithMeasurementMethod,
  AreaWithMeasurementMethodFromJSON,
  AreaWithMeasurementMethodFromJSONTyped,
  AreaWithMeasurementMethodToJSON,
  BuildingFeature,
  BuildingFeatureFromJSON,
  BuildingFeatureFromJSONTyped,
  BuildingFeatureToJSON,
  DateJun,
  DateJunFromJSON,
  DateJunFromJSONTyped,
  DateJunToJSON,
  FacingRoad,
  FacingRoadFromJSON,
  FacingRoadFromJSONTyped,
  FacingRoadToJSON,
  UseDistrict,
  UseDistrictFromJSON,
  UseDistrictFromJSONTyped,
  UseDistrictToJSON,
} from './';

/**
 * 建物
 * @export
 * @interface Building
 */
export interface Building {
  /**
   *
   * @type {string}
   * @memberof Building
   */
  readonly buildingGuid?: string;
  /**
   *
   * @type {Date}
   * @memberof Building
   */
  modified: Date;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  buildingName: string;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  buildingFurigana?: string;
  /**
   *
   * @type {number}
   * @memberof Building
   */
  totalUnits?: number;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  buildingClass?: string;
  /**
   * 1: 戸建<br/>2: 集合住宅<br/>3: 事務所・商業施設<br/>4: 土地<br/>5: 駐車場
   * @type {number}
   * @memberof Building
   */
  buildingClassCode?: number;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  readonly buildingType?: string;
  /**
   * 1: マンション<br/>2: リゾートマンション<br/>3: アパート<br/>4: テラスハウス<br/>5: タウンハウス<br/>6: 戸建<br/>7: 土地<br/>8: 店舗<br/>9: 事務所<br/>10: ビル<br/>11: 倉庫<br/>12: 工場<br/>13: トランクルーム<br/>14: 駐車場<br/>15: バイク置き場<br/>16: その他
   * @type {number}
   * @memberof Building
   */
  buildingTypeCode: number;
  /**
   *
   * @type {number}
   * @memberof Building
   */
  totalFloors?: number;
  /**
   *
   * @type {number}
   * @memberof Building
   */
  groundFloors?: number;
  /**
   *
   * @type {number}
   * @memberof Building
   */
  basementFloors?: number;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  readonly setback?: string;
  /**
   * 1: 不要<br/>2: 要<br/>3: 済
   * @type {number}
   * @memberof Building
   */
  setbackCode?: number;
  /**
   *
   * @type {number}
   * @memberof Building
   */
  setbackArea?: number;
  /**
   * 延床面積 単位: 平方メートル 計測方法: 壁芯 内法 登記簿
   * @type {AreaWithMeasurementMethod}
   * @memberof Building
   */
  totalFloorArea?: AreaWithMeasurementMethod;
  /**
   *
   * @type {boolean}
   * @memberof Building
   */
  architecturalConditionFlag?: boolean;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  kenchikuKakuninNumber?: string;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  contractor?: string;
  /**
   * 竣工年月
   * @type {DateJun}
   * @memberof Building
   */
  completionDatejun?: DateJun;
  /**
   * 土地造成完了年月
   * @type {DateJun}
   * @memberof Building
   */
  landReclamationDatejun?: DateJun;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  readonly structure?: string;
  /**
   * 1: 木造<br/>2: 軽量鉄骨<br/>3: 鉄筋コンクリート<br/>4: 鉄骨鉄筋コンクリート<br/>5: ALC<br/>6: プレキャストコンクリート<br/>7: 鉄筋ブロック<br/>8: 鉄骨プレ<br/>9: 鉄骨<br/>10: その他
   * @type {number}
   * @memberof Building
   */
  structureCode?: number;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  structureNote?: string;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  readonly roadSituation?: string;
  /**
   * 1: 一方<br/>2: 二方<br/>3: 三方<br/>4: 四方<br/>5: 角地
   * @type {number}
   * @memberof Building
   */
  roadSituationCode?: number;
  /**
   *
   * @type {boolean}
   * @memberof Building
   */
  hirayadateFlag?: boolean;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  prefecture: string;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  city: string;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  town: string;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  tyoume: string;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  readonly addressText?: string;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  readonly branchNumberText?: string;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  zipcodeText?: string;
  /**
   *
   * @type {number}
   * @memberof Building
   */
  jisCodeValue?: number;
  /**
   *
   * @type {number}
   * @memberof Building
   */
  latitude?: number;
  /**
   *
   * @type {number}
   * @memberof Building
   */
  longitude?: number;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  readonly currentLandClass?: string;
  /**
   * 1: 宅地<br/>2: 田<br/>3: 畑<br/>4: 山林<br/>5: 雑種地<br/>6: その他<br/>7: 塩田<br/>8: 境内地<br/>9: 原野<br/>10: 公園<br/>11: 公衆用道路<br/>12: 鉱泉地<br/>13: 水道用地<br/>14: 井溝<br/>15: ため池<br/>16: 池沼<br/>17: 堤<br/>18: 保安林<br/>19: 牧場<br/>20: 墓地<br/>21: 用悪水路<br/>22: 運河用地
   * @type {number}
   * @memberof Building
   */
  currentLandClassCode?: number;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  registeredLandClass?: string;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  readonly topography?: string;
  /**
   * 1: 平坦<br/>2: 高台<br/>3: 低地<br/>4: ひな段<br/>5: 傾斜地<br/>99: その他
   * @type {number}
   * @memberof Building
   */
  topographyCode?: number;
  /**
   *
   * @type {boolean}
   * @memberof Building
   */
  isIrregularLandShape?: boolean;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  readonly landSituation?: string;
  /**
   * 1: 更地<br/>2: 古屋あり<br/>3: 造成済み<br/>4: 未造成
   * @type {number}
   * @memberof Building
   */
  landSituationCode?: number;
  /**
   * 土地面積 単位: 平方メートル 計測方法: 公簿 実測
   * @type {AreaWithMeasurementMethod}
   * @memberof Building
   */
  siteArea?: AreaWithMeasurementMethod;
  /**
   *
   * @type {number}
   * @memberof Building
   */
  coverage?: number;
  /**
   *
   * @type {number}
   * @memberof Building
   */
  floorAreaRatio?: number;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  readonly landUsePlanning?: string;
  /**
   * 1: 不要<br/>2: 要<br/>3: 届出中<br/>4: 届出済
   * @type {number}
   * @memberof Building
   */
  landUsePlanningCode?: number;
  /**
   *
   * @type {number}
   * @memberof Building
   */
  privateRoadAreaPublic?: number;
  /**
   *
   * @type {number}
   * @memberof Building
   */
  privateRoadAreaMeasured?: number;
  /**
   *
   * @type {boolean}
   * @memberof Building
   */
  isIllegalFacingRoad?: boolean;
  /**
   *
   * @type {number}
   * @memberof Building
   */
  privateRoadRateDenom?: number;
  /**
   *
   * @type {number}
   * @memberof Building
   */
  privateRoadRateNumer?: number;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  manageCompanyName?: string;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  readonly managerStyle?: string;
  /**
   * 1: 有<br/>2: 無<br/>3: 日勤<br/>4: 巡回<br/>5: 常駐
   * @type {number}
   * @memberof Building
   */
  managerStyleCode?: number;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  manageCompanyTelNumber?: string;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  readonly manageStyle?: string;
  /**
   * 1: 自主管理<br/>2: 一部委託<br/>3: 全部委託
   * @type {number}
   * @memberof Building
   */
  manageStyleCode?: number;
  /**
   *
   * @type {boolean}
   * @memberof Building
   */
  condominiumAssociationExistFlag?: boolean;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  readonly cityPlanningArea?: string;
  /**
   * 1: 市街化区域<br/>2: 市街化調整区域<br/>3: 非線引き区域<br/>4: 域外<br/>5: 準都市計画区域
   * @type {number}
   * @memberof Building
   */
  cityPlanningAreaCode?: number;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  developmentNumber?: string;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  constructionMethod?: string;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  outerWall?: string;
  /**
   *
   * @type {Array<UseDistrict>}
   * @memberof Building
   */
  useDistrict?: Array<UseDistrict>;
  /**
   *
   * @type {Array<BuildingFeature>}
   * @memberof Building
   */
  buildingFeature?: Array<BuildingFeature>;
  /**
   *
   * @type {Array<FacingRoad>}
   * @memberof Building
   */
  facingRoad?: Array<FacingRoad>;
  /**
   *
   * @type {string}
   * @memberof Building
   */
  cornerLot?: string;
  /**
   * 1: 東南角地<br/>2: 南西角地<br/>3: 北東角地<br/>4: 北西角地<br/>5: 三方角地<br/>6: 四方角地
   * @type {number}
   * @memberof Building
   */
  cornerLotCode?: number;
}

export function BuildingFromJSON(json: any): Building {
  return BuildingFromJSONTyped(json, false);
}

export function BuildingFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Building {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    buildingGuid: !exists(json, 'building_guid')
      ? undefined
      : json['building_guid'],
    modified: new Date(json['modified']),
    buildingName: json['building_name'],
    buildingFurigana: !exists(json, 'building_furigana')
      ? undefined
      : json['building_furigana'],
    totalUnits: !exists(json, 'total_units') ? undefined : json['total_units'],
    buildingClass: !exists(json, 'building_class')
      ? undefined
      : json['building_class'],
    buildingClassCode: !exists(json, 'building_class_code')
      ? undefined
      : json['building_class_code'],
    buildingType: !exists(json, 'building_type')
      ? undefined
      : json['building_type'],
    buildingTypeCode: json['building_type_code'],
    totalFloors: !exists(json, 'total_floors')
      ? undefined
      : json['total_floors'],
    groundFloors: !exists(json, 'ground_floors')
      ? undefined
      : json['ground_floors'],
    basementFloors: !exists(json, 'basement_floors')
      ? undefined
      : json['basement_floors'],
    setback: !exists(json, 'setback') ? undefined : json['setback'],
    setbackCode: !exists(json, 'setback_code')
      ? undefined
      : json['setback_code'],
    setbackArea: !exists(json, 'setback_area')
      ? undefined
      : json['setback_area'],
    totalFloorArea: !exists(json, 'total_floor_area')
      ? undefined
      : AreaWithMeasurementMethodFromJSON(json['total_floor_area']),
    architecturalConditionFlag: !exists(json, 'architectural_condition_flag')
      ? undefined
      : json['architectural_condition_flag'],
    kenchikuKakuninNumber: !exists(json, 'kenchiku_kakunin_number')
      ? undefined
      : json['kenchiku_kakunin_number'],
    contractor: !exists(json, 'contractor') ? undefined : json['contractor'],
    completionDatejun: !exists(json, 'completion_datejun')
      ? undefined
      : DateJunFromJSON(json['completion_datejun']),
    landReclamationDatejun: !exists(json, 'land_reclamation_datejun')
      ? undefined
      : DateJunFromJSON(json['land_reclamation_datejun']),
    structure: !exists(json, 'structure') ? undefined : json['structure'],
    structureCode: !exists(json, 'structure_code')
      ? undefined
      : json['structure_code'],
    structureNote: !exists(json, 'structure_note')
      ? undefined
      : json['structure_note'],
    roadSituation: !exists(json, 'road_situation')
      ? undefined
      : json['road_situation'],
    roadSituationCode: !exists(json, 'road_situation_code')
      ? undefined
      : json['road_situation_code'],
    hirayadateFlag: !exists(json, 'hirayadate_flag')
      ? undefined
      : json['hirayadate_flag'],
    prefecture: json['prefecture'],
    city: json['city'],
    town: json['town'],
    tyoume: json['tyoume'],
    addressText: !exists(json, 'address_text')
      ? undefined
      : json['address_text'],
    branchNumberText: !exists(json, 'branch_number_text')
      ? undefined
      : json['branch_number_text'],
    zipcodeText: !exists(json, 'zipcode_text')
      ? undefined
      : json['zipcode_text'],
    jisCodeValue: !exists(json, 'jis_code_value')
      ? undefined
      : json['jis_code_value'],
    latitude: !exists(json, 'latitude') ? undefined : json['latitude'],
    longitude: !exists(json, 'longitude') ? undefined : json['longitude'],
    currentLandClass: !exists(json, 'current_land_class')
      ? undefined
      : json['current_land_class'],
    currentLandClassCode: !exists(json, 'current_land_class_code')
      ? undefined
      : json['current_land_class_code'],
    registeredLandClass: !exists(json, 'registered_land_class')
      ? undefined
      : json['registered_land_class'],
    topography: !exists(json, 'topography') ? undefined : json['topography'],
    topographyCode: !exists(json, 'topography_code')
      ? undefined
      : json['topography_code'],
    isIrregularLandShape: !exists(json, 'is_irregular_land_shape')
      ? undefined
      : json['is_irregular_land_shape'],
    landSituation: !exists(json, 'land_situation')
      ? undefined
      : json['land_situation'],
    landSituationCode: !exists(json, 'land_situation_code')
      ? undefined
      : json['land_situation_code'],
    siteArea: !exists(json, 'site_area')
      ? undefined
      : AreaWithMeasurementMethodFromJSON(json['site_area']),
    coverage: !exists(json, 'coverage') ? undefined : json['coverage'],
    floorAreaRatio: !exists(json, 'floor_area_ratio')
      ? undefined
      : json['floor_area_ratio'],
    landUsePlanning: !exists(json, 'land_use_planning')
      ? undefined
      : json['land_use_planning'],
    landUsePlanningCode: !exists(json, 'land_use_planning_code')
      ? undefined
      : json['land_use_planning_code'],
    privateRoadAreaPublic: !exists(json, 'private_road_area_public')
      ? undefined
      : json['private_road_area_public'],
    privateRoadAreaMeasured: !exists(json, 'private_road_area_measured')
      ? undefined
      : json['private_road_area_measured'],
    isIllegalFacingRoad: !exists(json, 'is_illegal_facing_road')
      ? undefined
      : json['is_illegal_facing_road'],
    privateRoadRateDenom: !exists(json, 'private_road_rate_denom')
      ? undefined
      : json['private_road_rate_denom'],
    privateRoadRateNumer: !exists(json, 'private_road_rate_numer')
      ? undefined
      : json['private_road_rate_numer'],
    manageCompanyName: !exists(json, 'manage_company_name')
      ? undefined
      : json['manage_company_name'],
    managerStyle: !exists(json, 'manager_style')
      ? undefined
      : json['manager_style'],
    managerStyleCode: !exists(json, 'manager_style_code')
      ? undefined
      : json['manager_style_code'],
    manageCompanyTelNumber: !exists(json, 'manage_company_tel_number')
      ? undefined
      : json['manage_company_tel_number'],
    manageStyle: !exists(json, 'manage_style')
      ? undefined
      : json['manage_style'],
    manageStyleCode: !exists(json, 'manage_style_code')
      ? undefined
      : json['manage_style_code'],
    condominiumAssociationExistFlag: !exists(
      json,
      'condominium_association_exist_flag'
    )
      ? undefined
      : json['condominium_association_exist_flag'],
    cityPlanningArea: !exists(json, 'city_planning_area')
      ? undefined
      : json['city_planning_area'],
    cityPlanningAreaCode: !exists(json, 'city_planning_area_code')
      ? undefined
      : json['city_planning_area_code'],
    developmentNumber: !exists(json, 'development_number')
      ? undefined
      : json['development_number'],
    constructionMethod: !exists(json, 'construction_method')
      ? undefined
      : json['construction_method'],
    outerWall: !exists(json, 'outer_wall') ? undefined : json['outer_wall'],
    useDistrict: !exists(json, 'use_district')
      ? undefined
      : (json['use_district'] as Array<any>).map(UseDistrictFromJSON),
    buildingFeature: !exists(json, 'building_feature')
      ? undefined
      : (json['building_feature'] as Array<any>).map(BuildingFeatureFromJSON),
    facingRoad: !exists(json, 'facing_road')
      ? undefined
      : (json['facing_road'] as Array<any>).map(FacingRoadFromJSON),
    cornerLot: !exists(json, 'corner_lot') ? undefined : json['corner_lot'],
    cornerLotCode: !exists(json, 'corner_lot_code')
      ? undefined
      : json['corner_lot_code'],
  };
}

export function BuildingToJSON(value?: Building | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    modified: value.modified.toISOString(),
    building_name: value.buildingName,
    building_furigana: value.buildingFurigana,
    total_units: value.totalUnits,
    building_class: value.buildingClass,
    building_class_code: value.buildingClassCode,
    building_type_code: value.buildingTypeCode,
    total_floors: value.totalFloors,
    ground_floors: value.groundFloors,
    basement_floors: value.basementFloors,
    setback_code: value.setbackCode,
    setback_area: value.setbackArea,
    total_floor_area: AreaWithMeasurementMethodToJSON(value.totalFloorArea),
    architectural_condition_flag: value.architecturalConditionFlag,
    kenchiku_kakunin_number: value.kenchikuKakuninNumber,
    contractor: value.contractor,
    completion_datejun: DateJunToJSON(value.completionDatejun),
    land_reclamation_datejun: DateJunToJSON(value.landReclamationDatejun),
    structure_code: value.structureCode,
    structure_note: value.structureNote,
    road_situation_code: value.roadSituationCode,
    hirayadate_flag: value.hirayadateFlag,
    prefecture: value.prefecture,
    city: value.city,
    town: value.town,
    tyoume: value.tyoume,
    zipcode_text: value.zipcodeText,
    jis_code_value: value.jisCodeValue,
    latitude: value.latitude,
    longitude: value.longitude,
    current_land_class_code: value.currentLandClassCode,
    registered_land_class: value.registeredLandClass,
    topography_code: value.topographyCode,
    is_irregular_land_shape: value.isIrregularLandShape,
    land_situation_code: value.landSituationCode,
    site_area: AreaWithMeasurementMethodToJSON(value.siteArea),
    coverage: value.coverage,
    floor_area_ratio: value.floorAreaRatio,
    land_use_planning_code: value.landUsePlanningCode,
    private_road_area_public: value.privateRoadAreaPublic,
    private_road_area_measured: value.privateRoadAreaMeasured,
    is_illegal_facing_road: value.isIllegalFacingRoad,
    private_road_rate_denom: value.privateRoadRateDenom,
    private_road_rate_numer: value.privateRoadRateNumer,
    manage_company_name: value.manageCompanyName,
    manager_style_code: value.managerStyleCode,
    manage_company_tel_number: value.manageCompanyTelNumber,
    manage_style_code: value.manageStyleCode,
    condominium_association_exist_flag: value.condominiumAssociationExistFlag,
    city_planning_area_code: value.cityPlanningAreaCode,
    development_number: value.developmentNumber,
    construction_method: value.constructionMethod,
    outer_wall: value.outerWall,
    use_district:
      value.useDistrict === undefined
        ? undefined
        : (value.useDistrict as Array<any>).map(UseDistrictToJSON),
    building_feature:
      value.buildingFeature === undefined
        ? undefined
        : (value.buildingFeature as Array<any>).map(BuildingFeatureToJSON),
    facing_road:
      value.facingRoad === undefined
        ? undefined
        : (value.facingRoad as Array<any>).map(FacingRoadToJSON),
    corner_lot: value.cornerLot,
    corner_lot_code: value.cornerLotCode,
  };
}
