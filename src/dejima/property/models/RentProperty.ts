/* tslint:disable */
/* eslint-disable */
/**
 * ES 物件API
 * （株）いい生活 が提供予定の 物件情報API のインターフェイス仕様書  いい物件Oneに登録した賃貸物件情報を参照する物件参照API仕様について定める。  ※1: 開発中のため、実際のリリース時の仕様は異なる場合がございます。  ※2: 売買物件に関する仕様に関してはα版であり、今後大きな仕様の見直しを行う可能性がございます。  ## リソース仕様  ### 通信仕様  HTTP/2 および HTTP/1.1 をサポートする。通信はTLSで暗号化されたHTTPSのみを許可する。  ### リクエストヘッダ  リクエストヘッダには以下の指定を必須とする。  | No. | リクエストヘッダのフィールド名 | 指定値 | |:---:|:-------------------------------|:-------| | 1 | Accept | application/json | | 2 | X-Api-Key | 弊社が指定するキー。ご利用のお客様を特定するためのもの。 |  Acceptヘッダには、常にapplication/json を指定する。 これにより、レスポンスがJSONであることを指示する。  ### データフォーマットと文字コード  データフォーマットはJSON、文字コードはUTF-8とする。  ### データ型  通常のJSONの型以外に擬似型としていくつかのデータ型を用意している。 これは、JSON標準では表現しきれないデータや、不動産特有のデータを扱うために定義したもので使用する。 また、ここに記載の無いデータ型については、 OpenAPI Specification (Version 3.0.2) の DataTypes に準拠する。  * [DataTypes](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#data-types)   | No. | 型 | 説明 | |:---:|:---|:-----| | 1 | string | JSON標準の文字列 | | 2 | int | JSON標準の整数 | | 3 | float | JSON標準の浮動小数点数 | | 4 | bool | JSON標準の真偽値 | | 5 | datetime | ISO8611フォーマットの日付時刻を表す文字列。YYYY-MM-DDTHH:MM:SS。 <br> 例: 2015-08-26T19:16:03 = 2015年8月26日19時16分03秒 | | 6 | date | ISO8611フォーマットの日付を表す文字列。YYYY-MM-DD。 <br> 例: 2015-08-26 = 2015年8月26日 | | 7 | datejun | 後述 |  #### datejun型  いい生活独自の日付と旬を表すフォーマット。YYYYMMJDD。  * YYYY: 西暦年 * MM: 月。01～12。ただし00とすることにより、年単位までの精度の数字を表現可能。 * J: 旬。1=上旬、2=中旬、3=下旬。 0とすることで月単位までの精度の数字を表現可能。 * DD: 日。01～31。ただし00とすることにより、旬単位までの精度の数字を表現可能。日単位の精度の場合、1～10日までは旬を1、11～20日までは旬を2、21日以降は旬を3と指定する必要がある。 * 例:     * 201900000 = 2019年     * 201901000 = 2019年1月     * 201903100 = 2019年3月上旬     * 201912300 = 2019年12月下旬     * 201906105 = 2019年6月5日     * 201908216 = 2019年8月16日  ## 検索パラメータ  ### OR 検索  パラメータタイプが `array` のキーについては、クエリパラメータで複数指定を行った場合、 指定された値のいずれかに一致する対象を検索する（ OR 検索）。  ex) `?layout_type_code=1&layout_type_code=2`  ### ソート順  `*.order` という名前のパラメータでソート順を指定可能。ascを指定したとき昇順、descを指定したとき降順となる。  ex) `?price.order=desc`  基本的にソート順は一つだけ指定する。
 *
 * The version of the OpenAPI document: 6.1.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  DwellingUnit,
  DwellingUnitFromJSON,
  DwellingUnitFromJSONTyped,
  DwellingUnitToJSON,
  Institution,
  InstitutionFromJSON,
  InstitutionFromJSONTyped,
  InstitutionToJSON,
  PropertyParking,
  PropertyParkingFromJSON,
  PropertyParkingFromJSONTyped,
  PropertyParkingToJSON,
  RentContractCondition,
  RentContractConditionFromJSON,
  RentContractConditionFromJSONTyped,
  RentContractConditionToJSON,
  RentPickupFeature,
  RentPickupFeatureFromJSON,
  RentPickupFeatureFromJSONTyped,
  RentPickupFeatureToJSON,
  RentReform,
  RentReformFromJSON,
  RentReformFromJSONTyped,
  RentReformToJSON,
  Tag,
  TagFromJSON,
  TagFromJSONTyped,
  TagToJSON,
  Transportation,
  TransportationFromJSON,
  TransportationFromJSONTyped,
  TransportationToJSON,
} from './';

/**
 * 賃貸物件
 * @export
 * @interface RentProperty
 */
export interface RentProperty {
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  propertyFullKey: string;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  originalPropertyCodeText?: string;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  readonly propertyClass?: string;
  /**
   * 1: 土地<br/>2: 建物<br/>3: 区画<br/>4: 建物付帯設備
   * @type {number}
   * @memberof RentProperty
   */
  propertyClassCode?: number;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  readonly propertyUse?: string;
  /**
   * 1: 居住用<br/>2: 事業用<br/>3: 投資用
   * @type {number}
   * @memberof RentProperty
   */
  propertyUseCode: number;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  readonly propertyType?: string;
  /**
   * 101: マンション<br/>102: リゾートマンション<br/>103: アパート<br/>104: コーポ<br/>105: テラスハウス<br/>106: タウンハウス<br/>107: 戸建<br/>108: 土地<br/>109: 借地権譲渡<br/>110: 底地権譲渡<br/>111: 店舗<br/>112: 店舗事務所<br/>113: 住宅付店舗<br/>114: 事務所<br/>115: ビル<br/>116: 倉庫<br/>117: 工場<br/>118: トランクルーム<br/>119: 駐車場<br/>120: バイク置き場<br/>121: その他<br/>122: 間借り
   * @type {number}
   * @memberof RentProperty
   */
  propertyTypeCode: number;
  /**
   *
   * @type {boolean}
   * @memberof RentProperty
   */
  hasEntries?: boolean;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  readonly currentStatus?: string;
  /**
   * 1: 居住中<br/>2: 空室<br/>3: 建築中<br/>4: 退去予定<br/>5: 改装中<br/>6: 完成済
   * @type {number}
   * @memberof RentProperty
   */
  currentStatusCode?: number;
  /**
   *
   * @type {Date}
   * @memberof RentProperty
   */
  departureDate?: Date;
  /**
   *
   * @type {boolean}
   * @memberof RentProperty
   */
  nameDisplayFlag: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentProperty
   */
  branchNumberDisplayFlag: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentProperty
   */
  roomNumberDisplayFlag: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentProperty
   */
  mapMarkerDisplayFlag: boolean;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  readonly gas?: string;
  /**
   * 1: 都市ガス<br/>2: プロパン<br/>3: 共同<br/>4: その他
   * @type {number}
   * @memberof RentProperty
   */
  gasCode?: number;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  readonly waterSupply?: string;
  /**
   * 1: 無<br/>2: メーター<br/>3: 専用メーター<br/>4: 小メーター<br/>5: 割当<br/>6: 本管より直結<br/>7: 受水槽<br/>8: 公営<br/>9: 私営<br/>10: 井戸<br/>11: 共同<br/>12: 簡易<br/>13: 公営水道引込可<br/>14: 公営水道引込済<br/>15: その他
   * @type {number}
   * @memberof RentProperty
   */
  waterSupplyCode?: number;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  readonly sewerage?: string;
  /**
   * 1: 公共下水<br/>2: 浄化槽_個別<br/>3: 浄化槽_集中<br/>4: 汲取り<br/>5: 側溝_個別<br/>6: 側溝_集中<br/>7: その他
   * @type {number}
   * @memberof RentProperty
   */
  sewerageCode?: number;
  /**
   *
   * @type {boolean}
   * @memberof RentProperty
   */
  hasElectricity?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentProperty
   */
  itJusetsuFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RentProperty
   */
  isNewlyBuilt?: boolean;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  readonly newUsed?: string;
  /**
   *
   * @type {number}
   * @memberof RentProperty
   */
  newUsedCode?: number;
  /**
   *
   * @type {boolean}
   * @memberof RentProperty
   */
  panoramaFlag: boolean;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  websiteComment?: string;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  pdfComment?: string;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  tantoshaComment?: string;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  salesPoint?: string;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  specialityComment?: string;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  specialityPdfComment?: string;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  equipmentComment?: string;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  equipmentPdfComment?: string;
  /**
   *
   * @type {number}
   * @memberof RentProperty
   */
  customerKey: number;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  agentGuid: string;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  staffGuid?: string;
  /**
   *
   * @type {RentContractCondition}
   * @memberof RentProperty
   */
  contractCondition: RentContractCondition;
  /**
   *
   * @type {PropertyParking}
   * @memberof RentProperty
   */
  propertyParking: PropertyParking;
  /**
   *
   * @type {Array<Tag>}
   * @memberof RentProperty
   */
  propertyTag: Array<Tag>;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  readonly buildingGuid?: string;
  /**
   *
   * @type {DwellingUnit}
   * @memberof RentProperty
   */
  dwellingUnit?: DwellingUnit;
  /**
   *
   * @type {Array<Transportation>}
   * @memberof RentProperty
   */
  transportation: Array<Transportation>;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  otherTransportation?: string;
  /**
   *
   * @type {Array<Institution>}
   * @memberof RentProperty
   */
  institution: Array<Institution>;
  /**
   *
   * @type {RentReform}
   * @memberof RentProperty
   */
  reform?: RentReform;
  /**
   *
   * @type {string}
   * @memberof RentProperty
   */
  companyRemark?: string;
  /**
   *
   * @type {boolean}
   * @memberof RentProperty
   */
  readonly isPublished?: boolean;
  /**
   *
   * @type {Date}
   * @memberof RentProperty
   */
  readonly publishedDatetime?: Date;
  /**
   *
   * @type {Date}
   * @memberof RentProperty
   */
  readonly lastUpdateDatetime?: Date;
  /**
   *
   * @type {Date}
   * @memberof RentProperty
   */
  readonly nextRenewalDatetime?: Date;
  /**
   *
   * @type {RentPickupFeature}
   * @memberof RentProperty
   */
  rentPickupFeature?: RentPickupFeature;
}

export function RentPropertyFromJSON(json: any): RentProperty {
  return RentPropertyFromJSONTyped(json, false);
}

export function RentPropertyFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): RentProperty {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    propertyFullKey: json['property_full_key'],
    originalPropertyCodeText: !exists(json, 'original_property_code_text')
      ? undefined
      : json['original_property_code_text'],
    propertyClass: !exists(json, 'property_class')
      ? undefined
      : json['property_class'],
    propertyClassCode: !exists(json, 'property_class_code')
      ? undefined
      : json['property_class_code'],
    propertyUse: !exists(json, 'property_use')
      ? undefined
      : json['property_use'],
    propertyUseCode: json['property_use_code'],
    propertyType: !exists(json, 'property_type')
      ? undefined
      : json['property_type'],
    propertyTypeCode: json['property_type_code'],
    hasEntries: !exists(json, 'has_entries') ? undefined : json['has_entries'],
    currentStatus: !exists(json, 'current_status')
      ? undefined
      : json['current_status'],
    currentStatusCode: !exists(json, 'current_status_code')
      ? undefined
      : json['current_status_code'],
    departureDate: !exists(json, 'departure_date')
      ? undefined
      : new Date(json['departure_date']),
    nameDisplayFlag: json['name_display_flag'],
    branchNumberDisplayFlag: json['branch_number_display_flag'],
    roomNumberDisplayFlag: json['room_number_display_flag'],
    mapMarkerDisplayFlag: json['map_marker_display_flag'],
    gas: !exists(json, 'gas') ? undefined : json['gas'],
    gasCode: !exists(json, 'gas_code') ? undefined : json['gas_code'],
    waterSupply: !exists(json, 'water_supply')
      ? undefined
      : json['water_supply'],
    waterSupplyCode: !exists(json, 'water_supply_code')
      ? undefined
      : json['water_supply_code'],
    sewerage: !exists(json, 'sewerage') ? undefined : json['sewerage'],
    sewerageCode: !exists(json, 'sewerage_code')
      ? undefined
      : json['sewerage_code'],
    hasElectricity: !exists(json, 'has_electricity')
      ? undefined
      : json['has_electricity'],
    itJusetsuFlag: !exists(json, 'it_jusetsu_flag')
      ? undefined
      : json['it_jusetsu_flag'],
    isNewlyBuilt: !exists(json, 'is_newly_built')
      ? undefined
      : json['is_newly_built'],
    newUsed: !exists(json, 'new_used') ? undefined : json['new_used'],
    newUsedCode: !exists(json, 'new_used_code')
      ? undefined
      : json['new_used_code'],
    panoramaFlag: json['panorama_flag'],
    websiteComment: !exists(json, 'website_comment')
      ? undefined
      : json['website_comment'],
    pdfComment: !exists(json, 'pdf_comment') ? undefined : json['pdf_comment'],
    tantoshaComment: !exists(json, 'tantosha_comment')
      ? undefined
      : json['tantosha_comment'],
    salesPoint: !exists(json, 'sales_point') ? undefined : json['sales_point'],
    specialityComment: !exists(json, 'speciality_comment')
      ? undefined
      : json['speciality_comment'],
    specialityPdfComment: !exists(json, 'speciality_pdf_comment')
      ? undefined
      : json['speciality_pdf_comment'],
    equipmentComment: !exists(json, 'equipment_comment')
      ? undefined
      : json['equipment_comment'],
    equipmentPdfComment: !exists(json, 'equipment_pdf_comment')
      ? undefined
      : json['equipment_pdf_comment'],
    customerKey: json['customer_key'],
    agentGuid: json['agent_guid'],
    staffGuid: !exists(json, 'staff_guid') ? undefined : json['staff_guid'],
    contractCondition: RentContractConditionFromJSON(
      json['contract_condition']
    ),
    propertyParking: PropertyParkingFromJSON(json['property_parking']),
    propertyTag: (json['property_tag'] as Array<any>).map(TagFromJSON),
    buildingGuid: !exists(json, 'building_guid')
      ? undefined
      : json['building_guid'],
    dwellingUnit: !exists(json, 'dwelling_unit')
      ? undefined
      : DwellingUnitFromJSON(json['dwelling_unit']),
    transportation: (json['transportation'] as Array<any>).map(
      TransportationFromJSON
    ),
    otherTransportation: !exists(json, 'other_transportation')
      ? undefined
      : json['other_transportation'],
    institution: (json['institution'] as Array<any>).map(InstitutionFromJSON),
    reform: !exists(json, 'reform')
      ? undefined
      : RentReformFromJSON(json['reform']),
    companyRemark: !exists(json, 'company_remark')
      ? undefined
      : json['company_remark'],
    isPublished: !exists(json, 'is_published')
      ? undefined
      : json['is_published'],
    publishedDatetime: !exists(json, 'published_datetime')
      ? undefined
      : new Date(json['published_datetime']),
    lastUpdateDatetime: !exists(json, 'last_update_datetime')
      ? undefined
      : new Date(json['last_update_datetime']),
    nextRenewalDatetime: !exists(json, 'next_renewal_datetime')
      ? undefined
      : new Date(json['next_renewal_datetime']),
    rentPickupFeature: !exists(json, 'rent_pickup_feature')
      ? undefined
      : RentPickupFeatureFromJSON(json['rent_pickup_feature']),
  };
}

export function RentPropertyToJSON(value?: RentProperty | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    property_full_key: value.propertyFullKey,
    original_property_code_text: value.originalPropertyCodeText,
    property_class_code: value.propertyClassCode,
    property_use_code: value.propertyUseCode,
    property_type_code: value.propertyTypeCode,
    has_entries: value.hasEntries,
    current_status_code: value.currentStatusCode,
    departure_date:
      value.departureDate === undefined
        ? undefined
        : value.departureDate.toISOString().substr(0, 10),
    name_display_flag: value.nameDisplayFlag,
    branch_number_display_flag: value.branchNumberDisplayFlag,
    room_number_display_flag: value.roomNumberDisplayFlag,
    map_marker_display_flag: value.mapMarkerDisplayFlag,
    gas_code: value.gasCode,
    water_supply_code: value.waterSupplyCode,
    sewerage_code: value.sewerageCode,
    has_electricity: value.hasElectricity,
    it_jusetsu_flag: value.itJusetsuFlag,
    is_newly_built: value.isNewlyBuilt,
    new_used_code: value.newUsedCode,
    panorama_flag: value.panoramaFlag,
    website_comment: value.websiteComment,
    pdf_comment: value.pdfComment,
    tantosha_comment: value.tantoshaComment,
    sales_point: value.salesPoint,
    speciality_comment: value.specialityComment,
    speciality_pdf_comment: value.specialityPdfComment,
    equipment_comment: value.equipmentComment,
    equipment_pdf_comment: value.equipmentPdfComment,
    customer_key: value.customerKey,
    agent_guid: value.agentGuid,
    staff_guid: value.staffGuid,
    contract_condition: RentContractConditionToJSON(value.contractCondition),
    property_parking: PropertyParkingToJSON(value.propertyParking),
    property_tag: (value.propertyTag as Array<any>).map(TagToJSON),
    dwelling_unit: DwellingUnitToJSON(value.dwellingUnit),
    transportation: (value.transportation as Array<any>).map(
      TransportationToJSON
    ),
    other_transportation: value.otherTransportation,
    institution: (value.institution as Array<any>).map(InstitutionToJSON),
    reform: RentReformToJSON(value.reform),
    company_remark: value.companyRemark,
    rent_pickup_feature: RentPickupFeatureToJSON(value.rentPickupFeature),
  };
}
