/* tslint:disable */
/* eslint-disable */
/**
 * ES 物件API
 * （株）いい生活 が提供予定の 物件情報API のインターフェイス仕様書  いい物件Oneに登録した賃貸物件情報を参照する物件参照API仕様について定める。  ※1: 開発中のため、実際のリリース時の仕様は異なる場合がございます。  ※2: 売買物件に関する仕様に関してはα版であり、今後大きな仕様の見直しを行う可能性がございます。  ## リソース仕様  ### 通信仕様  HTTP/2 および HTTP/1.1 をサポートする。通信はTLSで暗号化されたHTTPSのみを許可する。  ### リクエストヘッダ  リクエストヘッダには以下の指定を必須とする。  | No. | リクエストヘッダのフィールド名 | 指定値 | |:---:|:-------------------------------|:-------| | 1 | Accept | application/json | | 2 | X-Api-Key | 弊社が指定するキー。ご利用のお客様を特定するためのもの。 |  Acceptヘッダには、常にapplication/json を指定する。 これにより、レスポンスがJSONであることを指示する。  ### データフォーマットと文字コード  データフォーマットはJSON、文字コードはUTF-8とする。  ### データ型  通常のJSONの型以外に擬似型としていくつかのデータ型を用意している。 これは、JSON標準では表現しきれないデータや、不動産特有のデータを扱うために定義したもので使用する。 また、ここに記載の無いデータ型については、 OpenAPI Specification (Version 3.0.2) の DataTypes に準拠する。  * [DataTypes](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#data-types)   | No. | 型 | 説明 | |:---:|:---|:-----| | 1 | string | JSON標準の文字列 | | 2 | int | JSON標準の整数 | | 3 | float | JSON標準の浮動小数点数 | | 4 | bool | JSON標準の真偽値 | | 5 | datetime | ISO8611フォーマットの日付時刻を表す文字列。YYYY-MM-DDTHH:MM:SS。 <br> 例: 2015-08-26T19:16:03 = 2015年8月26日19時16分03秒 | | 6 | date | ISO8611フォーマットの日付を表す文字列。YYYY-MM-DD。 <br> 例: 2015-08-26 = 2015年8月26日 | | 7 | datejun | 後述 |  #### datejun型  いい生活独自の日付と旬を表すフォーマット。YYYYMMJDD。  * YYYY: 西暦年 * MM: 月。01～12。ただし00とすることにより、年単位までの精度の数字を表現可能。 * J: 旬。1=上旬、2=中旬、3=下旬。 0とすることで月単位までの精度の数字を表現可能。 * DD: 日。01～31。ただし00とすることにより、旬単位までの精度の数字を表現可能。日単位の精度の場合、1～10日までは旬を1、11～20日までは旬を2、21日以降は旬を3と指定する必要がある。 * 例:     * 201900000 = 2019年     * 201901000 = 2019年1月     * 201903100 = 2019年3月上旬     * 201912300 = 2019年12月下旬     * 201906105 = 2019年6月5日     * 201908216 = 2019年8月16日  ## 検索パラメータ  ### OR 検索  パラメータタイプが `array` のキーについては、クエリパラメータで複数指定を行った場合、 指定された値のいずれかに一致する対象を検索する（ OR 検索）。  ex) `?layout_type_code=1&layout_type_code=2`  ### ソート順  `*.order` という名前のパラメータでソート順を指定可能。ascを指定したとき昇順、descを指定したとき降順となる。  ex) `?price.order=desc`  基本的にソート順は一つだけ指定する。
 *
 * The version of the OpenAPI document: 6.1.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  IntRange,
  IntRangeFromJSON,
  IntRangeFromJSONTyped,
  IntRangeToJSON,
  PriceWithUnit,
  PriceWithUnitFromJSON,
  PriceWithUnitFromJSONTyped,
  PriceWithUnitToJSON,
} from './';

/**
 * 駐車場
 * @export
 * @interface PropertyParking
 */
export interface PropertyParking {
  /**
   *
   * @type {string}
   * @memberof PropertyParking
   */
  readonly parkingAvailability?: string;
  /**
   * 1: 無<br/>2: 有(敷地内)<br/>3: 付<br/>4: 近隣駐車場<br/>5: 空無<br/>6: 要問合せ
   * @type {number}
   * @memberof PropertyParking
   */
  parkingAvailabilityCode?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyParking
   */
  neighborhoodParkingDistance?: number;
  /**
   *
   * @type {string}
   * @memberof PropertyParking
   */
  readonly parkingType?: string;
  /**
   * 1: 舗装<br/>2: 未舗装<br/>3: 機械式<br/>4: タワー式<br/>5: 時間貸し<br/>6: その他<br/>7: 自走式<br/>8: 平置
   * @type {number}
   * @memberof PropertyParking
   */
  parkingTypeCode?: number;
  /**
   *
   * @type {string}
   * @memberof PropertyParking
   */
  readonly parkingRoof?: string;
  /**
   * 1: 無<br/>2: 有<br/>3: 地下<br/>4: 屋内
   * @type {number}
   * @memberof PropertyParking
   */
  parkingRoofCode?: number;
  /**
   *
   * @type {string}
   * @memberof PropertyParking
   */
  parkingShutter?: string;
  /**
   * 1: 無<br/>2: 付き<br/>3: リモコンシャッタ
   * @type {number}
   * @memberof PropertyParking
   */
  parkingShutterCode?: number;
  /**
   *
   * @type {IntRange}
   * @memberof PropertyParking
   */
  parkingPriceRange?: IntRange;
  /**
   *
   * @type {number}
   * @memberof PropertyParking
   */
  parkableNum?: number;
  /**
   *
   * @type {PriceWithUnit}
   * @memberof PropertyParking
   */
  parkingKeyMoney?: PriceWithUnit;
  /**
   *
   * @type {PriceWithUnit}
   * @memberof PropertyParking
   */
  parkingDeposit?: PriceWithUnit;
  /**
   *
   * @type {boolean}
   * @memberof PropertyParking
   */
  hasBikeParking?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PropertyParking
   */
  hasMotorbikeParking?: boolean;
}

export function PropertyParkingFromJSON(json: any): PropertyParking {
  return PropertyParkingFromJSONTyped(json, false);
}

export function PropertyParkingFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): PropertyParking {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    parkingAvailability: !exists(json, 'parking_availability')
      ? undefined
      : json['parking_availability'],
    parkingAvailabilityCode: !exists(json, 'parking_availability_code')
      ? undefined
      : json['parking_availability_code'],
    neighborhoodParkingDistance: !exists(json, 'neighborhood_parking_distance')
      ? undefined
      : json['neighborhood_parking_distance'],
    parkingType: !exists(json, 'parking_type')
      ? undefined
      : json['parking_type'],
    parkingTypeCode: !exists(json, 'parking_type_code')
      ? undefined
      : json['parking_type_code'],
    parkingRoof: !exists(json, 'parking_roof')
      ? undefined
      : json['parking_roof'],
    parkingRoofCode: !exists(json, 'parking_roof_code')
      ? undefined
      : json['parking_roof_code'],
    parkingShutter: !exists(json, 'parking_shutter')
      ? undefined
      : json['parking_shutter'],
    parkingShutterCode: !exists(json, 'parking_shutter_code')
      ? undefined
      : json['parking_shutter_code'],
    parkingPriceRange: !exists(json, 'parking_price_range')
      ? undefined
      : IntRangeFromJSON(json['parking_price_range']),
    parkableNum: !exists(json, 'parkable_num')
      ? undefined
      : json['parkable_num'],
    parkingKeyMoney: !exists(json, 'parking_key_money')
      ? undefined
      : PriceWithUnitFromJSON(json['parking_key_money']),
    parkingDeposit: !exists(json, 'parking_deposit')
      ? undefined
      : PriceWithUnitFromJSON(json['parking_deposit']),
    hasBikeParking: !exists(json, 'has_bike_parking')
      ? undefined
      : json['has_bike_parking'],
    hasMotorbikeParking: !exists(json, 'has_motorbike_parking')
      ? undefined
      : json['has_motorbike_parking'],
  };
}

export function PropertyParkingToJSON(value?: PropertyParking | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    parking_availability_code: value.parkingAvailabilityCode,
    neighborhood_parking_distance: value.neighborhoodParkingDistance,
    parking_type_code: value.parkingTypeCode,
    parking_roof_code: value.parkingRoofCode,
    parking_shutter: value.parkingShutter,
    parking_shutter_code: value.parkingShutterCode,
    parking_price_range: IntRangeToJSON(value.parkingPriceRange),
    parkable_num: value.parkableNum,
    parking_key_money: PriceWithUnitToJSON(value.parkingKeyMoney),
    parking_deposit: PriceWithUnitToJSON(value.parkingDeposit),
    has_bike_parking: value.hasBikeParking,
    has_motorbike_parking: value.hasMotorbikeParking,
  };
}
