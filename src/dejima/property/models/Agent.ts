/* tslint:disable */
/* eslint-disable */
/**
 * ES 物件API
 * （株）いい生活 が提供予定の 物件情報API のインターフェイス仕様書  いい物件Oneに登録した賃貸物件情報を参照する物件参照API仕様について定める。  ※1: 開発中のため、実際のリリース時の仕様は異なる場合がございます。  ※2: 売買物件に関する仕様に関してはα版であり、今後大きな仕様の見直しを行う可能性がございます。  ## リソース仕様  ### 通信仕様  HTTP/2 および HTTP/1.1 をサポートする。通信はTLSで暗号化されたHTTPSのみを許可する。  ### リクエストヘッダ  リクエストヘッダには以下の指定を必須とする。  | No. | リクエストヘッダのフィールド名 | 指定値 | |:---:|:-------------------------------|:-------| | 1 | Accept | application/json | | 2 | X-Api-Key | 弊社が指定するキー。ご利用のお客様を特定するためのもの。 |  Acceptヘッダには、常にapplication/json を指定する。 これにより、レスポンスがJSONであることを指示する。  ### データフォーマットと文字コード  データフォーマットはJSON、文字コードはUTF-8とする。  ### データ型  通常のJSONの型以外に擬似型としていくつかのデータ型を用意している。 これは、JSON標準では表現しきれないデータや、不動産特有のデータを扱うために定義したもので使用する。 また、ここに記載の無いデータ型については、 OpenAPI Specification (Version 3.0.2) の DataTypes に準拠する。  * [DataTypes](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#data-types)   | No. | 型 | 説明 | |:---:|:---|:-----| | 1 | string | JSON標準の文字列 | | 2 | int | JSON標準の整数 | | 3 | float | JSON標準の浮動小数点数 | | 4 | bool | JSON標準の真偽値 | | 5 | datetime | ISO8611フォーマットの日付時刻を表す文字列。YYYY-MM-DDTHH:MM:SS。 <br> 例: 2015-08-26T19:16:03 = 2015年8月26日19時16分03秒 | | 6 | date | ISO8611フォーマットの日付を表す文字列。YYYY-MM-DD。 <br> 例: 2015-08-26 = 2015年8月26日 | | 7 | datejun | 後述 |  #### datejun型  いい生活独自の日付と旬を表すフォーマット。YYYYMMJDD。  * YYYY: 西暦年 * MM: 月。01～12。ただし00とすることにより、年単位までの精度の数字を表現可能。 * J: 旬。1=上旬、2=中旬、3=下旬。 0とすることで月単位までの精度の数字を表現可能。 * DD: 日。01～31。ただし00とすることにより、旬単位までの精度の数字を表現可能。日単位の精度の場合、1～10日までは旬を1、11～20日までは旬を2、21日以降は旬を3と指定する必要がある。 * 例:     * 201900000 = 2019年     * 201901000 = 2019年1月     * 201903100 = 2019年3月上旬     * 201912300 = 2019年12月下旬     * 201906105 = 2019年6月5日     * 201908216 = 2019年8月16日  ## 検索パラメータ  ### OR 検索  パラメータタイプが `array` のキーについては、クエリパラメータで複数指定を行った場合、 指定された値のいずれかに一致する対象を検索する（ OR 検索）。  ex) `?layout_type_code=1&layout_type_code=2`  ### ソート順  `*.order` という名前のパラメータでソート順を指定可能。ascを指定したとき昇順、descを指定したとき降順となる。  ex) `?price.order=desc`  基本的にソート順は一つだけ指定する。
 *
 * The version of the OpenAPI document: 6.1.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import { Staff, StaffFromJSON, StaffFromJSONTyped, StaffToJSON } from './';

/**
 * 店舗
 * @export
 * @interface Agent
 */
export interface Agent {
  /**
   *
   * @type {number}
   * @memberof Agent
   */
  customerKey: number;
  /**
   *
   * @type {string}
   * @memberof Agent
   */
  agentGuid: string;
  /**
   *
   * @type {string}
   * @memberof Agent
   */
  agentTelNumber?: string;
  /**
   *
   * @type {string}
   * @memberof Agent
   */
  agentFaxNumber?: string;
  /**
   *
   * @type {string}
   * @memberof Agent
   */
  agentEmail?: string;
  /**
   *
   * @type {string}
   * @memberof Agent
   */
  agentShopAddress?: string;
  /**
   *
   * @type {number}
   * @memberof Agent
   */
  latitude?: number;
  /**
   *
   * @type {number}
   * @memberof Agent
   */
  longitude?: number;
  /**
   *
   * @type {string}
   * @memberof Agent
   */
  agentShopName: string;
  /**
   *
   * @type {string}
   * @memberof Agent
   */
  agentOrganization?: string;
  /**
   *
   * @type {string}
   * @memberof Agent
   */
  agentUrlCaption?: string;
  /**
   *
   * @type {string}
   * @memberof Agent
   */
  agentUrl?: string;
  /**
   *
   * @type {string}
   * @memberof Agent
   */
  agentLicenseNumber?: string;
  /**
   *
   * @type {Array<Staff>}
   * @memberof Agent
   */
  staff: Array<Staff>;
}

export function AgentFromJSON(json: any): Agent {
  return AgentFromJSONTyped(json, false);
}

export function AgentFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Agent {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    customerKey: json['customer_key'],
    agentGuid: json['agent_guid'],
    agentTelNumber: !exists(json, 'agent_tel_number')
      ? undefined
      : json['agent_tel_number'],
    agentFaxNumber: !exists(json, 'agent_fax_number')
      ? undefined
      : json['agent_fax_number'],
    agentEmail: !exists(json, 'agent_email') ? undefined : json['agent_email'],
    agentShopAddress: !exists(json, 'agent_shop_address')
      ? undefined
      : json['agent_shop_address'],
    latitude: !exists(json, 'latitude') ? undefined : json['latitude'],
    longitude: !exists(json, 'longitude') ? undefined : json['longitude'],
    agentShopName: json['agent_shop_name'],
    agentOrganization: !exists(json, 'agent_organization')
      ? undefined
      : json['agent_organization'],
    agentUrlCaption: !exists(json, 'agent_url_caption')
      ? undefined
      : json['agent_url_caption'],
    agentUrl: !exists(json, 'agent_url') ? undefined : json['agent_url'],
    agentLicenseNumber: !exists(json, 'agent_license_number')
      ? undefined
      : json['agent_license_number'],
    staff: (json['staff'] as Array<any>).map(StaffFromJSON),
  };
}

export function AgentToJSON(value?: Agent | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    customer_key: value.customerKey,
    agent_guid: value.agentGuid,
    agent_tel_number: value.agentTelNumber,
    agent_fax_number: value.agentFaxNumber,
    agent_email: value.agentEmail,
    agent_shop_address: value.agentShopAddress,
    latitude: value.latitude,
    longitude: value.longitude,
    agent_shop_name: value.agentShopName,
    agent_organization: value.agentOrganization,
    agent_url_caption: value.agentUrlCaption,
    agent_url: value.agentUrl,
    agent_license_number: value.agentLicenseNumber,
    staff: (value.staff as Array<any>).map(StaffToJSON),
  };
}
